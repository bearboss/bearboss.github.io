<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Json 使用规范</title>
    <url>/2021/05/25/1-Json%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/1.jpg"></p>
</span>

<span id="more"></span>

<h1 id="json-lib-2.4-jdk15">json-lib-2.4-jdk15 使用</h1>

<pre><code>import java.util.ArrayList;
import java.util.HashMap;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
public class JsonCombine {
    public static void main(String[] args) {
        JSONObject jsonOne = new JSONObject();
        jsonOne.put("name", "kewen");
        jsonOne.put("age", "24");
        JSONObject jsonTwo = new JSONObject();
        jsonTwo.put("hobbit", "Doto");
        jsonTwo.put("hobbit2", "wow");
        JSONObject jsonThree = new JSONObject();
        jsonThree.putAll(jsonOne);
        jsonThree.putAll(jsonTwo);
        System.out.println(jsonThree.toString());
    
        // JsonObject和JsonArray区别就是JsonObject是对象形式，JsonArray是数组形式
        // 创建JsonObject第一种方法
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("UserName", "ZHULI");
        jsonObject.put("age", "30");
        jsonObject.put("workIn", "ALI");
        System.out.println("jsonObject1：" + jsonObject);
    
        // 创建JsonObject第二种方法
        HashMap&lt;String, String&gt; hashMap = new HashMap&lt;String, String&gt;();
        hashMap.put("UserName", "ZHULI");
        hashMap.put("age", "30");
        hashMap.put("workIn", "ALI");
        System.out.println("jsonObject2：" + JSONObject.fromObject(hashMap));
    
        // 创建一个JsonArray方法1
        JSONArray jsonArray = new JSONArray();
        jsonArray.add(0, "ZHULI");
        jsonArray.add(1, "30");
        jsonArray.add(2, "ALI");
        System.out.println("jsonArray1：" + jsonArray);
    
        // 创建JsonArray方法2
        ArrayList&lt;String&gt; arrayList = new ArrayList&lt;String&gt;();
        arrayList.add("ZHULI");
        arrayList.add("30");
        arrayList.add("ALI");
        System.out.println("jsonArray2：" + JSONArray.fromObject(arrayList));
        // 如果JSONArray解析一个HashMap
        System.out.println("jsonArray FROM HASHMAP：" + JSONArray.fromObject(hashMap));
        // 组装一个复杂的JSONArray
        JSONObject jsonObject2 = new JSONObject();
        jsonObject2.put("UserName", "ZHULI");
        jsonObject2.put("age", "30");
        jsonObject2.put("workIn", "ALI");
        jsonObject2.element("Array", arrayList);
        jsonObject2.element("Map", hashMap);
        System.out.println("jsonObject2：" + jsonObject2);
    
        // 将Json字符串转为java对象
        String jsonString = "{\"UserName\":\"ZHULI\",\"age\":\"30\",\"workIn\":\"ALI\",\"Array\":[\"ZHULI\",\"30\",\"ALI\"]}";
        JSONObject obj = JSONObject.fromObject(jsonString);
        if (obj.has("UserName")) {
            System.out.println("UserName:" + obj.getString("UserName"));
        }
        if (obj.has("Array")) {
            JSONArray transitListArray = obj.getJSONArray("Array");
            for (int i = 0; i &lt; transitListArray.size(); i++) {
                System.out.println("Array:" + transitListArray.getString(i) + " ");
    
            }
        }
    }
}
</code></pre>
<h1 id="org.json">org.json 使用</h1>

<pre><code>&lt;dependency&gt;
  &lt;groupId&gt;org.json&lt;/groupId&gt;
  &lt;artifactId&gt;json&lt;/artifactId&gt;
  &lt;version&gt;20180130&lt;/version&gt;
&lt;/dependency&gt;
(1)使用普通设置
JSONObject jsonObject = new JSONObject();
jsonObject.put("name","张三");
jsonObject.put("sex",false);
jsonObject.put("sex",new String[]{"dsd","富士达","fdsfd"});
String s = jsonObject.toString();
System.out.println(s);
（2）使用map或者实体
Page u = new Page();
new JSONObject(u).toString()
#读json文件
&lt;dependency&gt;
   &lt;groupId&gt;commons-io&lt;/groupId&gt;
   &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
   &lt;version&gt; 2.6 &lt;/version&gt;
   &lt;/dependency&gt;

   File file = new File(xx.class.getResource("/json.json").getFile());
   String s = fileUtil.readFileToString(file);
   JSONObject jsonobject = new JSONObject(s);
   System.out.println(jsonobject.getInt("id"));
</code></pre>
<h1 id="gson">gson 使用</h1>

<pre><code>&lt;dependency&gt;
  &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;
  &lt;artifactId&gt;gson&lt;/artifactId&gt;
  &lt;version&gt;2.8.5&lt;/version&gt;
&lt;/dependency&gt;
Page u = new Page();
new Gson().toJson(u)
#读json文件-对应java实体been
&lt;dependency&gt;
   &lt;groupId&gt;commons-io&lt;/groupId&gt;
   &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
   &lt;version&gt; 2.6 &lt;/version&gt;
   &lt;/dependency&gt;
   File file = new File(xx.class.getResource("/json.json").getFile());
   String s = fileUtil.readFileToString(file);
   Gson gson= new Gson();
   Page page = gson.fromJson(s,Page.class);
   System.out.println(page);
</code></pre>
<h1 id="fastJson">fastJson</h1>

<pre><code>#JSON类型
    JSON.toJavaObject((JSON) json.getResult(), clazz);
#jSONObject
    String jsonString = JSON.toJSONString(jsonObject);
    MatterVO vo = JSON.parseObject(jsonString, MatterVO.class);
</code></pre>
]]></content>
      <categories>
        <category>Json</category>
      </categories>
      <tags>
        <tag>Json</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>ActiveMQ</title>
    <url>/2021/05/28/10-ActiveMQ/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/10.jpg"></p>
</span>

<span id="more"></span>

<h1 id="ActiveMQ介绍"><a href="#ActiveMQ介绍" class="headerlink" title="ActiveMQ介绍"></a>ActiveMQ 介绍</h1><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> url = <span class="string">"tcp://127.0.0.1:61616"</span>; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> topicName = <span class="string">"topic-list"</span>; </span><br></pre></td></tr></tbody></table></figure>

<p>## 主题模式生产者</p>
<figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建连接工程</span></span><br><span class="line">ConnectionFactory connectionFactory = <span class="keyword">new</span> <span class="constructor">ActiveMQConnectionFactory(<span class="params">url</span>)</span>;</span><br><span class="line"><span class="comment">//2.创建Connenction</span></span><br><span class="line">Connection connection = connectionFactory.create<span class="constructor">Connection()</span>;</span><br><span class="line"><span class="comment">//3.启动连接</span></span><br><span class="line">connection.start<span class="literal">()</span>;</span><br><span class="line"><span class="comment">//4.创建会话</span></span><br><span class="line">Session session = connection.create<span class="constructor">Session(<span class="params">false</span>,Session.AUTO_ACKNOWLEDGE)</span>;</span><br><span class="line"><span class="comment">//5.创建一个目标</span></span><br><span class="line">Destination destination = session.create<span class="constructor">Topic(<span class="params">topicName</span>)</span>;</span><br><span class="line"><span class="comment">//6,。创建生产者</span></span><br><span class="line">MessageProducer mp = session.create<span class="constructor">Producer(<span class="params">destination</span>)</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>;i&lt;<span class="number">100</span>;i++){</span><br><span class="line">    <span class="comment">//7.创建消息</span></span><br><span class="line">    TextMessage textMessage = session.create<span class="constructor">TextMessage(<span class="string">"TOPIC"</span>+<span class="params">i</span>)</span>;</span><br><span class="line">    <span class="comment">//8.发送消息</span></span><br><span class="line">    mp.send(textMessage);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"消息发送成功:"</span>+textMessage.get<span class="constructor">Text()</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">connection.close<span class="literal">()</span>;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="主题模式的消费者"><a href="#主题模式的消费者" class="headerlink" title="主题模式的消费者"></a>主题模式的消费者</h2><blockquote>
<p>  主题模式下，消费者无法接收到订阅之前生产者发布的消息，只有先开消费者，再开生产者才能接受消息。</p>
</blockquote>
<blockquote>
<p>  队列模式不论先后 queue (将 createTopic 改成 createQueue 即为队列模式)</p>
</blockquote>
<figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">ConnectionFactory connectionFactory = <span class="keyword">new</span> <span class="constructor">ActiveMQConnectionFactory(<span class="params">url</span>)</span>;</span><br><span class="line"><span class="comment">//2.创建Connenction</span></span><br><span class="line">Connection connection = connectionFactory.create<span class="constructor">Connection()</span>;</span><br><span class="line"><span class="comment">//3.启动连接</span></span><br><span class="line">connection.start<span class="literal">()</span>;</span><br><span class="line"><span class="comment">//4.创建会话</span></span><br><span class="line">Session session = connection.create<span class="constructor">Session(<span class="params">false</span>,Session.AUTO_ACKNOWLEDGE)</span>;</span><br><span class="line"><span class="comment">//5.创建一个目标</span></span><br><span class="line">Destination destination = session.create<span class="constructor">Topic(<span class="params">topicName</span>)</span>;</span><br><span class="line"><span class="comment">//6,。创建消费者</span></span><br><span class="line">MessageConsumer mp = session.create<span class="constructor">Consumer(<span class="params">destination</span>)</span>;</span><br><span class="line"><span class="comment">//7.创建一个监听器</span></span><br><span class="line">mp.set<span class="constructor">MessageListener(<span class="params">new</span> MessageListener()</span> {</span><br><span class="line">    public void on<span class="constructor">Message(Message <span class="params">message</span>)</span> {</span><br><span class="line">        TextMessage textMessage =(TextMessage)message;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"接收消息："</span>+textMessage.get<span class="constructor">Text()</span>);</span><br><span class="line">        } catch (JMSException e) {</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">});	</span><br></pre></td></tr></tbody></table></figure>


<h2 id="Spring集成JMS连接ActiveMQ"><a href="#Spring集成JMS连接ActiveMQ" class="headerlink" title="Spring集成JMS连接ActiveMQ"></a>Spring 集成 JMS 连接 ActiveMQ</h2><blockquote>
<p>ConnectionFactory 用于管理连接的连接工厂</p>
</blockquote>
<blockquote>
<blockquote>
<p> 一个 Spring 为我们提供的连接池，Spring 中提供了 SingleConnectionFactory 和 CachingConnectionFactory</p>
</blockquote>
</blockquote>
<blockquote>
<p>JmsTemplate 用于发送和接受消息的模板类</p>
</blockquote>
<blockquote>
<blockquote>
<p> 注入即可使用，线程安全，JmsTemplate 每次发送消息都会重新创建连接，会话和 productor</p>
</blockquote>
</blockquote>
<blockquote>
<p>MessageListerner 消息监听器</p>
</blockquote>
<blockquote>
<blockquote>
<p> 实现一个 onMessage 方法，该方法只接受一个 Message 参数</p>
</blockquote>
</blockquote>
<h3 id="common-xml"><a href="#common-xml" class="headerlink" title="common.xml"></a>common.xml</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置activeMQ连接工厂--&gt;</span>	</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"activeMQConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://localhost:61616"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置spring连接工厂--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">ref</span>=<span class="string">"activeMQConnectionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置目标地址：使用队列--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queueDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"queue"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>	</span><br><span class="line"><span class="comment">&lt;!--配置目标地址：使用主题模式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"topicDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"topic"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>	</span><br></pre></td></tr></tbody></table></figure>
<h3 id="consumer-xml"><a href="#consumer-xml" class="headerlink" title="consumer.xml"></a>consumer.xml</h3><figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;import resource=<span class="string">"common.xml"</span>/&gt;</span><br><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"consumerContainerListener"</span> <span class="built_in">class</span>=<span class="string">"com.imooc.jms.consumer.ConsumerContainerListener"</span>/&gt;	</span><br><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"jmsContainer"</span> <span class="built_in">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"connectionFactory"</span> <span class="keyword">ref</span>=<span class="string">"connectionFactory"</span>/&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"destination"</span> <span class="keyword">ref</span>=<span class="string">"queueDestination"</span>/&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"messageListener"</span> <span class="keyword">ref</span>=<span class="string">"consumerContainerListener"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="producer-xml"><a href="#producer-xml" class="headerlink" title="producer.xml"></a>producer.xml</h3><figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;import resource=<span class="string">"common.xml"</span>/&gt;</span><br><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"jmsTemplate"</span> <span class="built_in">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"connectionFactory"</span> <span class="keyword">ref</span>=<span class="string">"connectionFactory"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean <span class="built_in">class</span>=<span class="string">"com.imooc.jms.producer.impl.ProducerServiceImpl"</span>/&gt;</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2021/08/15/100-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/100.jpg"></p>
</span>

<span id="more"></span>

<h1 id="左右旋转"><a href="#左右旋转" class="headerlink" title="左右旋转"></a>左右旋转</h1><p>   <img data-src="/images/code/rl.jpg"> </p>
<h1 id="AVL树的性质"><a href="#AVL树的性质" class="headerlink" title="AVL树的性质"></a>AVL 树的性质</h1>  <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>.左右节点度不能大于<span class="number">1</span>,平衡二叉树</span><br><span class="line"><span class="attribute">2</span>.需要左旋右旋来维持平衡</span><br><span class="line"><span class="attribute">3</span>.存在平衡因子概念</span><br></pre></td></tr></tbody></table></figure>
<h1 id="红黑树的五个性质"><a href="#红黑树的五个性质" class="headerlink" title="红黑树的五个性质"></a>红黑树的五个性质</h1><figure class="highlight livecodeserver"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1.</span>性质</span><br><span class="line"></span><br><span class="line">    <span class="number">1.</span>根节点是黑色</span><br><span class="line">    <span class="number">2.</span>节点是黑色或者红色</span><br><span class="line">    <span class="number">3.</span>叶子节点全是黑色(<span class="literal">null</span>节点)</span><br><span class="line">    <span class="number">4.</span>红节点的子节点都是黑</span><br><span class="line">        <span class="comment">-- 红节点的父亲节点都是黑</span></span><br><span class="line">        <span class="comment">-- 从根到叶子节点不能连续两个红色节点    </span></span><br><span class="line">    <span class="number">5.</span>根节点到任意节点的包含相同数目的黑节点</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span>红黑树类比于四阶B数</span><br><span class="line">    <span class="number">1.</span>删除非叶子节点,需要找到前驱或者后继节点来代替,删除的都是叶子节点</span><br><span class="line">    <span class="number">2.</span>不满足红黑树性质,删除需要下溢,然后左右旋转来保持平衡</span><br><span class="line">    <span class="number">3.</span>添加节点需要上溢,然后左右旋转来保持平衡</span><br><span class="line"><span class="number">3.</span>红黑树为什么效率高<span class="keyword">long</span>(n)</span><br><span class="line">    左右节点路径最长为<span class="number">2</span>倍 即黑节点立马跟上红节点,弱平衡</span><br></pre></td></tr></tbody></table></figure>

<h1 id="MAP-与-Set"><a href="#MAP-与-Set" class="headerlink" title="MAP 与 Set"></a>MAP 与 Set</h1><figure class="highlight gauss"><table><tbody><tr><td class="code"><pre><span class="line">TreeMap 运用红黑树作为数据存储,<span class="built_in">Key</span>就是天然的不重复,可比较</span><br><span class="line">所以TreeSet 类比于 TreeMap&lt;<span class="built_in">KEY</span>,<span class="built_in">NULL</span>&gt;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="计算hash槽"><a href="#计算hash槽" class="headerlink" title="计算hash槽"></a>计算 hash 槽</h1><pre><code>计算hash公式: hash_code(key)&amp;(tableSize-1);
</code></pre>
<p>1） 公式</p>
<figure class="highlight 1c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&amp; 位运算 双1为 1 其余全为0 </span></span><br><span class="line"><span class="string">| 或运算 一个为1，其值为1。</span></span><br><span class="line">^ 异或运算 值相同为<span class="number">0</span> 值不同为<span class="number">1</span></span><br></pre></td></tr></tbody></table></figure>
<p>2） 为什么 hashMap 要进行 &amp;(tableSize-1);</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">tableSize</span> <span class="string">强制数组长度为2^n</span> <span class="string">如:4</span></span><br><span class="line"><span class="number">2</span><span class="string">^n</span> <span class="string">:</span> <span class="string">转成二进制类似:100</span></span><br><span class="line"><span class="number">2</span><span class="string">^n-1</span> <span class="string">转成二进制:011</span></span><br><span class="line"><span class="string">hash_code(key)</span> <span class="string">无论计算出来多少的32位INT长度与011进行&amp;运算</span> <span class="string">都是2位</span> </span><br><span class="line"><span class="number">1010 </span><span class="number">1010 </span><span class="number">1010 </span><span class="number">1010 </span><span class="number">1010 </span><span class="number">1010 </span><span class="number">1010 </span><span class="number">1010</span></span><br><span class="line"><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0011</span></span><br><span class="line"><span class="string">=</span> <span class="number">10</span> </span><br><span class="line"><span class="string">所以计算槽位结果为数组2,永远比2^n-1小</span> </span><br><span class="line"><span class="string">就是比tableSize数组长度小</span></span><br></pre></td></tr></tbody></table></figure>

<p>3）如何生成 Key 的 hash 值</p>
<figure class="highlight gauss"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">key</span>的常见种类可能有:</span><br><span class="line"></span><br><span class="line">整数 浮点数 字符串 自定义对象</span><br><span class="line">不同种类的<span class="built_in">key</span>哈希值生成方式不一样 但目标一致</span><br><span class="line">    尽量让每个<span class="built_in">key</span>的哈希值唯一的</span><br><span class="line">    尽量让<span class="built_in">KEy</span>的所有信息参与运算</span><br><span class="line"></span><br><span class="line">JAVA hashMap 的<span class="built_in">key</span>必须实现hashCode.equals方法 也允许为<span class="built_in">null</span></span><br></pre></td></tr></tbody></table></figure>

<p>4） hash_code 计算 32 位 hash 值 其实就是 int</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">(int)</span> <span class="string">(value</span> <span class="string">^</span> <span class="string">(value&gt;&gt;&gt;32))</span></span><br><span class="line"></span><br><span class="line"><span class="string">int</span> <span class="string">的hash值就是自己</span></span><br><span class="line"><span class="string">float</span> <span class="string">将存储的二进制格式转成整数</span> <span class="string">Float.floatToIntBits()</span> <span class="string">查看整数信息</span></span><br><span class="line"><span class="string">double</span> <span class="string">转成64位整数</span> <span class="string">Double.doubleToLongBits()</span> <span class="string">,高低32位进行异或运算</span></span><br><span class="line"><span class="string">long</span> <span class="string">高低32位进行异或运算</span></span><br><span class="line"></span><br><span class="line"><span class="string">value&gt;&gt;&gt;32:无符号右移32位</span></span><br><span class="line"><span class="attr">value :</span>                 <span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">0001 </span><span class="number">0001 </span><span class="number">0001 </span><span class="number">0001 </span><span class="number">0001 </span><span class="number">0001 </span><span class="number">0001</span></span><br><span class="line"><span class="string">value&gt;&gt;&gt;32</span> <span class="string">:</span>            <span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">0000 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111</span></span><br><span class="line"><span class="string">value</span> <span class="string">^</span> <span class="string">(value&gt;&gt;&gt;32):</span>   <span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1111 </span><span class="number">1110 </span><span class="number">1110 </span><span class="number">1110 </span><span class="number">1110 </span><span class="number">1110 </span><span class="number">1110 </span><span class="number">1110</span></span><br><span class="line"><span class="string">(int)(</span> <span class="string">value</span> <span class="string">^</span> <span class="string">(value&gt;&gt;&gt;32))::</span> <span class="number">1110 </span><span class="number">1110 </span><span class="number">1110 </span><span class="number">1110 </span><span class="number">1110 </span><span class="number">1110 </span><span class="number">1110</span></span><br><span class="line"><span class="string">为什么是异或运算:</span></span><br><span class="line"><span class="string">如果是与运算:</span> <span class="string">全是低位数据,高位数据未参与运算</span></span><br><span class="line"><span class="string">如果是或运算:</span> <span class="string">全是高位数据,低位数据未参与运算</span></span><br><span class="line"><span class="string">异或运算:则最大程度高低为都参与运算</span></span><br><span class="line"><span class="string">最后强制转换成32位</span> <span class="string">结果丢弃高32位:</span> <span class="number">1110 </span><span class="number">1110 </span><span class="number">1110 </span><span class="number">1110 </span><span class="number">1110 </span><span class="number">1110 </span><span class="number">1110</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>5）字符串计算 hash</p>
<figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">5894</span> : <span class="number">5</span>*<span class="number">10</span>^<span class="number">3</span>+<span class="number">8</span>*<span class="number">10</span>^<span class="number">2</span>+<span class="number">9</span>*<span class="number">10</span>^<span class="number">1</span>+<span class="number">4</span>*<span class="number">10</span>^<span class="number">0</span></span><br><span class="line">套用规则:</span><br><span class="line">jack : j*n^<span class="number">3</span>+a*n^<span class="number">2</span>+c*n^<span class="number">1</span>+k*n^<span class="number">0</span></span><br><span class="line">    重复计算优化:[(j*n+a)*n+c]*n+k</span><br><span class="line">在JDK中 乘数n为<span class="number">31</span> ,为什么是<span class="number">31</span>呢?</span><br><span class="line">    <span class="number">31</span>是奇素数,JVM会将<span class="number">31</span>*i优化成(i&lt;&lt;<span class="number">5</span>)-i</span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="number">31</span>*i);</span><br><span class="line">    System.out.<span class="built_in">println</span>((i&lt;&lt;<span class="number">5</span>)-i);</span><br><span class="line"> </span><br><span class="line">计算字符串hash公式:</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span></span>{</span><br><span class="line">    <span class="keyword">String</span> string = <span class="string">"jack"</span>;</span><br><span class="line">    <span class="keyword">int</span> len = string.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">int</span> hashcode = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">        <span class="keyword">char</span> c = string.<span class="built_in">charAt</span>(i);</span><br><span class="line">        <span class="comment">//hashcode = hashcode*31 + c ;</span></span><br><span class="line">        hashcode = (hashcode&lt;&lt;<span class="number">5</span>)-hashcode + c;</span><br><span class="line">    }</span><br><span class="line">    System.out.<span class="built_in">println</span>(hashcode);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>6）自定义对象计算 hash</p>
<figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line">还是按照字符串数字来处理,重写hashCode</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">static</span> <span class="keyword">int</span> hashCode(<span class="keyword">Object</span> a[]) {</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">Object</span> element : a)</span><br><span class="line">        result = <span class="number">31</span> * result + (element == <span class="literal">null</span> ? <span class="number">0</span> : element.hashCode());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>7）为什么要重新 hashcode 和 equals<br><img data-src="/images/code/cao.jpg"> </p>
<figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">首先:Hash表是数组:hash值是计算数组索引,数组中存储的是实际key-value元素</span><br><span class="line">hash是比较索引槽在那里</span><br><span class="line">equals是hash冲突的时候比较槽里存的数据key是不是相同</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean equals(Object o) {</span><br><span class="line">    <span class="keyword">if</span> (this<span class="operator"> == </span>o) return <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(o instanceof ActivitiAdvanceSettingEntity)) return <span class="literal">false</span>;</span><br><span class="line">    ActivitiAdvanceSettingEntity that = (ActivitiAdvanceSettingEntity) o;</span><br><span class="line">    return <span class="module-access"><span class="module"><span class="identifier">Objects</span>.</span></span>equals(get<span class="constructor">RemarkRequired()</span>, that.get<span class="constructor">RemarkRequired()</span>)<span class="operator"> &amp;&amp;</span></span><br><span class="line"><span class="operator">            </span><span class="module-access"><span class="module"><span class="identifier">Objects</span>.</span></span>equals(get<span class="constructor">MyAuditAutoPass()</span>, that.get<span class="constructor">MyAuditAutoPass()</span>)<span class="operator"> &amp;&amp;</span></span><br><span class="line"><span class="operator">            </span><span class="module-access"><span class="module"><span class="identifier">Objects</span>.</span></span>equals(get<span class="constructor">RemarkTip()</span>, that.get<span class="constructor">RemarkTip()</span>)<span class="operator"> &amp;&amp;</span></span><br><span class="line"><span class="operator">            </span><span class="module-access"><span class="module"><span class="identifier">Objects</span>.</span></span>equals(get<span class="constructor">AutoRepeat()</span>, that.get<span class="constructor">AutoRepeat()</span>)<span class="operator"> &amp;&amp;</span></span><br><span class="line"><span class="operator">            </span><span class="module-access"><span class="module"><span class="identifier">Objects</span>.</span></span>equals(get<span class="constructor">NotVisibleForSponsor()</span>, that.get<span class="constructor">NotVisibleForSponsor()</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/2021/09/05/101-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/101.jpg"></p>
</span>

<span id="more"></span>

<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Integer[] array =  <span class="keyword">new</span> Integer[]{<span class="number">1</span>,<span class="number">33</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>};</span><br><span class="line"><span class="comment">//原始版本冒泡 - 第一次就将最大的元素排在了后面,紧接着,最外层减减,直到全部排序完成</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doubbleSort1</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = array.length - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= j; i++) {</span><br><span class="line">            <span class="keyword">if</span> (array[i] &lt; array[i - <span class="number">1</span>]) {</span><br><span class="line">                <span class="keyword">int</span> tmp = array[i - <span class="number">1</span>];</span><br><span class="line">                array[i - <span class="number">1</span>] = array[i];</span><br><span class="line">                array[i] = tmp;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length - <span class="number">1</span>; j++) {</span><br><span class="line">            <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>]) {</span><br><span class="line">                <span class="keyword">int</span> tmp = array[j + <span class="number">1</span>];</span><br><span class="line">                array[j + <span class="number">1</span>] = array[j];</span><br><span class="line">                array[j] = tmp;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//增加如果尾部已经排序完成,就直接退出优化</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doubbleSort2</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = array.length - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) {</span><br><span class="line">        <span class="keyword">boolean</span> sorted = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= j; i++) {</span><br><span class="line">            <span class="keyword">if</span> (array[i] &lt; array[i - <span class="number">1</span>]) {</span><br><span class="line">                <span class="keyword">int</span> tmp = array[i - <span class="number">1</span>];</span><br><span class="line">                array[i - <span class="number">1</span>] = array[i];</span><br><span class="line">                array[i] = tmp;</span><br><span class="line">                sorted = <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(sorted){<span class="keyword">break</span>;}</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//增加排好序的索引序列,减少循环次数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doubbleSort3</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = array.length - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) {</span><br><span class="line">        <span class="keyword">int</span> sortedIndex = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= j; i++) {</span><br><span class="line">            <span class="keyword">if</span> (array[i] &lt; array[i - <span class="number">1</span>]) {</span><br><span class="line">                <span class="keyword">int</span> tmp = array[i - <span class="number">1</span>];</span><br><span class="line">                array[i - <span class="number">1</span>] = array[i];</span><br><span class="line">                array[i] = tmp;</span><br><span class="line">                sortedIndex = i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        j = sortedIndex;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//每次取最大的元素放入末尾,依次操作</span></span><br><span class="line"><span class="keyword">static</span> Integer[] array =  <span class="keyword">new</span> Integer[]{<span class="number">1</span>,<span class="number">33</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>};</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = array.length - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) {</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= j; i++) {</span><br><span class="line">            <span class="keyword">if</span> (array[max] &lt; array[i]) {</span><br><span class="line">                max = i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> tmp = array[max];</span><br><span class="line">        array[max] = array[j];</span><br><span class="line">        array[j] = tmp;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) {</span><br><span class="line">        <span class="keyword">int</span> max = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; array.length; j++) {</span><br><span class="line">            <span class="keyword">if</span>(array[max] &lt; array[j]){</span><br><span class="line">                max = j;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> tmp = array[max];</span><br><span class="line">        array[max] = array[i];</span><br><span class="line">        array[i] = tmp;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h1 id="选择排序优化之堆排序"><a href="#选择排序优化之堆排序" class="headerlink" title="选择排序优化之堆排序"></a>选择排序优化之堆排序</h1><p><img data-src="/images/sort/%E4%BA%8C%E5%8F%89%E5%A0%86.png"></p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Integer[] array =  <span class="keyword">new</span> Integer[]{<span class="number">1</span>,<span class="number">33</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>};</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 原地建堆</span></span><br><span class="line">    heapSize = array.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (heapSize &gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">        <span class="built_in">siftDown</span>(i);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (heapSize &gt; <span class="number">1</span>) {</span><br><span class="line">        <span class="comment">// 交换堆顶元素和尾部元素</span></span><br><span class="line">        <span class="built_in">swap</span>(<span class="number">0</span>, --heapSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对0位置进行siftDown（恢复堆的性质）</span></span><br><span class="line">        <span class="built_in">siftDown</span>(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//下滤之原地建堆</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDown</span><span class="params">(<span class="keyword">int</span> index)</span> </span>{</span><br><span class="line">    T element = array[index];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> half = heapSize &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (index &lt; half) { <span class="comment">// index必须是非叶子节点</span></span><br><span class="line">        <span class="comment">// 默认是左边跟父节点比</span></span><br><span class="line">        <span class="keyword">int</span> childIndex = (index &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        T child = array[childIndex];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> rightIndex = childIndex + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 右子节点比左子节点大</span></span><br><span class="line">        <span class="keyword">if</span> (rightIndex &lt; heapSize &amp;&amp; </span><br><span class="line">                <span class="built_in">cmp</span>(array[rightIndex], child) &gt; <span class="number">0</span>) { </span><br><span class="line">            child = array[childIndex = rightIndex];</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 大于等于子节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cmp</span>(element, child) &gt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        array[index] = child;</span><br><span class="line">        index = childIndex;</span><br><span class="line">    }</span><br><span class="line">    array[index] = element;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//插入 拿最新的元素和前面的进行比较,如果小就交换位置</span></span><br><span class="line"><span class="keyword">static</span> Integer[] array =  <span class="keyword">new</span> Integer[]{<span class="number">1</span>,<span class="number">33</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>};</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) {</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">            <span class="keyword">if</span> (j &lt; <span class="number">1</span> ) {</span><br><span class="line">                <span class="comment">//执行到末尾了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(array[j] &gt; array[j - <span class="number">1</span>]){</span><br><span class="line">                <span class="comment">//已经排完序了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">int</span> tmp = array[j];</span><br><span class="line">            array[j] = array[j - <span class="number">1</span>];</span><br><span class="line">            array[j - <span class="number">1</span>] = tmp;</span><br><span class="line">            j--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//找到索引 最后在进行插入操作</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) {</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="comment">//保存值</span></span><br><span class="line">        <span class="keyword">int</span> m = array[j];</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">            <span class="keyword">if</span> (j &lt; <span class="number">1</span>) {</span><br><span class="line">                <span class="comment">//执行到末尾了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (m &gt; array[j - <span class="number">1</span>]) {</span><br><span class="line">                <span class="comment">//已经排完序了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            array[j] = array[j - <span class="number">1</span>];</span><br><span class="line">            j--;</span><br><span class="line">        }</span><br><span class="line">        array[j] = m;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="插入排序优化之二分搜索索引插入"><a href="#插入排序优化之二分搜索索引插入" class="headerlink" title="插入排序优化之二分搜索索引插入"></a>插入排序优化之二分搜索索引插入</h1><figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="keyword">static</span> Integer[] array =  <span class="keyword">new</span> Integer[]{<span class="number">1</span>,<span class="number">33</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>};</span><br><span class="line"> <span class="comment">//二分查找</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (array == null || array.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end = array.length;</span><br><span class="line">    <span class="keyword">while</span> (begin &lt; end) {</span><br><span class="line">        <span class="keyword">int</span> mid = (begin + end) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; array[mid]) {</span><br><span class="line">            end = mid;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (v &gt; array[mid]) {</span><br><span class="line">            begin = mid + <span class="number">1</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//二分查找找索引</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (array == null || array.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end = array.length;</span><br><span class="line">    <span class="keyword">while</span> (begin &lt; end) {</span><br><span class="line">        <span class="keyword">int</span> mid = (begin + end) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; array[mid]) {</span><br><span class="line">            end = mid;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            begin = mid + <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> begin;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入排序的优化</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> begin = <span class="number">1</span>; begin &lt; array.length; begin++) {</span><br><span class="line">        <span class="built_in">insert</span>(begin, <span class="built_in">search</span>(begin));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//插入到指定的索引位置,将后面的依次移动</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> source, <span class="keyword">int</span> dest)</span> </span>{</span><br><span class="line">    T v = array[source];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = source; i &gt; dest; i--) {</span><br><span class="line">        array[i] = array[i - <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">    array[dest] = v;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p><img data-src="/images/sort/%E5%BD%92%E5%B9%B6.png"></p>
<figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Integer[] array =  <span class="keyword">new</span> Integer[]{<span class="number">1</span>,<span class="number">33</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>};</span><br><span class="line"><span class="keyword">static</span> Integer[] leftArray =  <span class="keyword">new</span> Integer[array.length &gt;&gt; <span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> begin,<span class="keyword">int</span> end)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(end - begin &lt; <span class="number">2</span>){<span class="keyword">return</span>;}</span><br><span class="line">    <span class="keyword">int</span> mid = (begin+end)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">sort</span>(begin,mid);</span><br><span class="line">    <span class="built_in">sort</span>(mid,end);</span><br><span class="line">    <span class="built_in">merge</span>(begin,mid,end);</span><br><span class="line"> }</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> begin,<span class="keyword">int</span> mid,<span class="keyword">int</span> end)</span></span>{</span><br><span class="line">    <span class="comment">//定义左右数组下标</span></span><br><span class="line">    <span class="keyword">int</span> li = <span class="number">0</span>; <span class="keyword">int</span> le = mid - begin; <span class="comment">// 这里是因为你数组下标从0开始,所以你左边数组的下标就从mid-begin开始</span></span><br><span class="line">    <span class="keyword">int</span> ri = mid; <span class="keyword">int</span> re = end;</span><br><span class="line">    <span class="keyword">int</span> ai = begin;</span><br><span class="line">    <span class="comment">//复制元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = li;i &lt; le;i++){</span><br><span class="line">        leftArray[i] = array[i+begin];</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//左边元素交换完毕就不需要再循环了,因为右边一定是有序的</span></span><br><span class="line">    <span class="keyword">while</span>(li &lt; le){</span><br><span class="line">        <span class="comment">//右边要没有循环完,否则直接左边复制到右边,并且左边的元素大于右边,就要把右边的移进去</span></span><br><span class="line">        <span class="keyword">if</span>(ri &lt; re &amp;&amp; array[ri] &lt; leftArray[li]){</span><br><span class="line">            array[ai++] = array[ri++];</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            array[ai++] = leftArray[li++];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"> }  </span><br></pre></td></tr></tbody></table></figure>
<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p><img data-src="/images/sort/%E5%BF%AB%E6%8E%92.png"> </p>
<figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//计算轴点所在位置,吧每一个元素都当成轴点</span></span><br><span class="line"><span class="comment">//比轴点小的在左边,比轴点大的在右边,然后递归调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> Integer[] array =  <span class="keyword">new</span> Integer[]{<span class="number">1</span>,<span class="number">33</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>};</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">sort</span>(<span class="number">0</span>,array.length);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> begin,<span class="keyword">int</span> end)</span></span>{</span><br><span class="line">    <span class="comment">//小于两个元素就退出</span></span><br><span class="line">    <span class="keyword">if</span>( end - begin &lt; <span class="number">2</span> )<span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//计算轴点位置</span></span><br><span class="line">    <span class="keyword">int</span> pivot = <span class="built_in">pivotIndex</span>(begin,end);</span><br><span class="line">    <span class="built_in">sort</span>(begin,pivot);</span><br><span class="line">    <span class="built_in">sort</span>(pivot+<span class="number">1</span>,end);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//返回均分之后轴点元素的坐标位置,然后继续进行轴分</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">pivotIndex</span><span class="params">(<span class="keyword">int</span> begin,<span class="keyword">int</span> end)</span></span>{</span><br><span class="line">    <span class="comment">//左闭右开 - 需要先变成右闭</span></span><br><span class="line">    end--;</span><br><span class="line">    <span class="comment">//备份元素 - 这里可优化成随机轴点,防止退化成O(N2),比如 7 1 2 3 4 5 6  用7作为轴点就会变成极度不平均,时间复杂度变成O(n2)</span></span><br><span class="line">    <span class="comment">//int val = array[begin];</span></span><br><span class="line">    <span class="comment">//随机轴点</span></span><br><span class="line">    <span class="keyword">int</span> val = array[begin + (<span class="keyword">int</span>)(Math.<span class="built_in">random</span>() * (end - begin))];</span><br><span class="line">    <span class="comment">//计算轴点位置</span></span><br><span class="line">    <span class="keyword">while</span>(begin &lt; end){</span><br><span class="line">        <span class="comment">//while进行掉头</span></span><br><span class="line">        <span class="keyword">while</span>(begin &lt; end) {</span><br><span class="line">            <span class="comment">//最开始从右往左进行比较,不能使用&gt;=,不然777777777这种比较的时候会不断进行end--,导致左右不能均分,比较元素一直会在左边或者右边</span></span><br><span class="line">            <span class="keyword">if</span>( val &lt; array[end] ){</span><br><span class="line">                end--;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">              array[begin++] = array[end];</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span>(begin &lt; end) {</span><br><span class="line">            <span class="comment">//从左往右进行比较</span></span><br><span class="line">            <span class="keyword">if</span>( val &gt; array[begin] ){</span><br><span class="line">                begin++;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">              array[end--] = array[begin];</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//一定最后是begin==end才返回</span></span><br><span class="line">    array[begin] = val;</span><br><span class="line">    <span class="keyword">return</span> begin;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><ul>
<li>可以理解为对插入排序的优化，每次分成排列排序就会减少逆序对 </li>
</ul>
<p><img data-src="/images/sort/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.jpg"> </p>
<figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Integer[] array =  <span class="keyword">new</span> Integer[]{<span class="number">1</span>,<span class="number">33</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>};</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">//希尔</span></span><br><span class="line">    List&lt;Integer&gt; steps = <span class="built_in">stepQuene</span>();</span><br><span class="line">    <span class="keyword">for</span> (Integer step : steps) {</span><br><span class="line">        <span class="built_in">sort</span>(step);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> step)</span> </span>{</span><br><span class="line">    <span class="comment">//分成多个列,对插入排序的优化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; step;col++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> begin = col+step; begin &lt; array.length; begin+= step) {</span><br><span class="line">            <span class="keyword">int</span> index = begin;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">                <span class="keyword">if</span> (index &lt; <span class="number">1</span> || array[index] &gt; array[index - step]) {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">int</span> tmp = array[index];</span><br><span class="line">                array[index] = array[index - step];</span><br><span class="line">                array[index - step] = tmp;</span><br><span class="line">                index-= step;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//步长序列</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">stepQuene</span><span class="params">()</span> </span>{</span><br><span class="line">    List&lt;Integer&gt; stepArr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> step = array.length;</span><br><span class="line">    <span class="keyword">while</span> (step &gt; <span class="number">1</span>) {</span><br><span class="line">        step = step &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        stepArr.<span class="built_in">add</span>(step);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> stepArr;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//优化的步长序列 - 最坏情况O(N1.43)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">sedgewickStepSequence</span><span class="params">()</span> </span>{</span><br><span class="line">    List&lt;Integer&gt; stepSequence = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>, step = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">        <span class="keyword">if</span> (k % <span class="number">2</span> == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">int</span> pow = (<span class="keyword">int</span>) Math.<span class="built_in">pow</span>(<span class="number">2</span>, k &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            step = <span class="number">1</span> + <span class="number">9</span> * (pow * pow - pow);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">int</span> pow1 = (<span class="keyword">int</span>) Math.<span class="built_in">pow</span>(<span class="number">2</span>, (k - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> pow2 = (<span class="keyword">int</span>) Math.<span class="built_in">pow</span>(<span class="number">2</span>, (k + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            step = <span class="number">1</span> + <span class="number">8</span> * pow1 * pow2 - <span class="number">6</span> * pow2;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (step &gt;= array.length) <span class="keyword">break</span>;</span><br><span class="line">        stepSequence.<span class="built_in">add</span>(<span class="number">0</span>, step);</span><br><span class="line">        k++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> stepSequence;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h1><figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Integer[] array = <span class="keyword">new</span> Integer[]{<span class="number">2</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>};</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">sort0</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 找出最大值</span></span><br><span class="line">    <span class="keyword">int</span> max = array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (array[i] &gt; max) {</span><br><span class="line">            max = array[i];</span><br><span class="line">        }</span><br><span class="line">    } <span class="comment">// O(n)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开辟内存空间，存储每个整数出现的次数</span></span><br><span class="line">    <span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span> + max];</span><br><span class="line">    <span class="comment">// 统计每个整数出现的次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) {</span><br><span class="line">        counts[array[i]]++;</span><br><span class="line">    } <span class="comment">// O(n)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据整数的出现次数，对整数进行排序</span></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; counts.length; i++) {</span><br><span class="line">        <span class="keyword">while</span> (counts[i]-- &gt; <span class="number">0</span>) {</span><br><span class="line">            array[index++] = i;</span><br><span class="line">        }</span><br><span class="line">    } <span class="comment">// O(n)</span></span><br><span class="line">}	</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 找出最值</span></span><br><span class="line">    <span class="keyword">int</span> max = array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> min = array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (array[i] &gt; max) {</span><br><span class="line">            max = array[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (array[i] &lt; min) {</span><br><span class="line">            min = array[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 开辟内存空间，存储次数</span></span><br><span class="line">    <span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[max - min + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 统计每个整数出现的次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) {</span><br><span class="line">        counts[array[i] - min]++;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 累加次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; counts.length; i++) {</span><br><span class="line">        counts[i] += counts[i - <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 从后往前遍历元素，将它放到有序数组中的合适位置</span></span><br><span class="line">    <span class="keyword">int</span>[] newArray = <span class="keyword">new</span> <span class="keyword">int</span>[array.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = array.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">        newArray[--counts[array[i] - min]] = array[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 将有序数组赋值到array</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; newArray.length; i++) {</span><br><span class="line">        array[i] = newArray[i];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Integer[] array = <span class="keyword">new</span> Integer[]{<span class="number">2</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>};</span><br><span class="line"><span class="comment">//先对个位使用计数排序,再对十位排序,依次类推,从小到大</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 找出最大值</span></span><br><span class="line">    <span class="keyword">int</span> max = array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (array[i] &gt; max) {</span><br><span class="line">            max = array[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 个位数: array[i] / 1 % 10 = 3</span></span><br><span class="line">    <span class="comment">// 十位数：array[i] / 10 % 10 = 9</span></span><br><span class="line">    <span class="comment">// 百位数：array[i] / 100 % 10 = 5</span></span><br><span class="line">    <span class="comment">// 千位数：array[i] / 1000 % 10 = ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> divider = <span class="number">1</span>; divider &lt;= max; divider *= <span class="number">10</span>) {</span><br><span class="line">        <span class="built_in">countingSort</span>(divider);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">countingSort</span><span class="params">(<span class="keyword">int</span> divider)</span> </span>{</span><br><span class="line">    <span class="comment">// 开辟内存空间，存储次数</span></span><br><span class="line">    <span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">// 统计每个整数出现的次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) {</span><br><span class="line">        counts[array[i] / divider % <span class="number">10</span>]++;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 累加次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; counts.length; i++) {</span><br><span class="line">        counts[i] += counts[i - <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从后往前遍历元素，将它放到有序数组中的合适位置</span></span><br><span class="line">    <span class="keyword">int</span>[] newArray = <span class="keyword">new</span> <span class="keyword">int</span>[array.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = array.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">        newArray[--counts[array[i] / divider % <span class="number">10</span>]] = array[i];</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将有序数组赋值到array</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; newArray.length; i++) {</span><br><span class="line">        array[i] = newArray[i];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">分成多个桶,桶数据排序</span><br></pre></td></tr></tbody></table></figure>

<h1 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h1><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">add</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span> {</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">add</span>(a ^ b, (a &amp; b) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">add</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span> {</span><br><span class="line">    <span class="keyword">while</span> (b != <span class="number">0</span>) {</span><br><span class="line">        <span class="built_in">int</span> tmp = (a ^ b);</span><br><span class="line">        b = (a &amp; b) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        a = tmp;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h1><p>* 需要用到加法的函数</p>
<figure class="highlight aspectj"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">int</span> <span class="title">subtraction</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">add</span><span class="params">(a, ~b+<span class="number">1</span>)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h1><figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">multiplication</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> a+<span class="built_in">multiplication</span>(a, b<span class="number">-1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">multiplication</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b!=<span class="number">0</span>){</span><br><span class="line">        <span class="keyword">if</span>((b&amp;<span class="number">1</span>) == <span class="number">1</span>){</span><br><span class="line">            res+=a&lt;&lt;cur;</span><br><span class="line">        }</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        cur++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h1><figure class="highlight perl"><table><tbody><tr><td class="code"><pre><span class="line">private static <span class="keyword">int</span> division(<span class="keyword">int</span> a, <span class="keyword">int</span> b) {</span><br><span class="line">    boolean flag = (a ^ b) &gt;= <span class="number">0</span>;</span><br><span class="line">    a = -Math.abs(a);</span><br><span class="line">    b = -Math.abs(b);</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (a &lt;= b) {</span><br><span class="line">        <span class="keyword">int</span> <span class="function"><span class="keyword">sub</span> = <span class="title">b</span></span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (a - <span class="function"><span class="keyword">sub</span> &lt;= <span class="title">sub</span>) </span>{</span><br><span class="line">            sum &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            <span class="function"><span class="keyword">sub</span> &lt;&lt;= 1</span>;</span><br><span class="line">        }</span><br><span class="line">        res += sum;</span><br><span class="line">        a -= <span class="function"><span class="keyword">sub</span></span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> flag ? res : -res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="POWER"><a href="#POWER" class="headerlink" title="POWER"></a>POWER</h1><figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="keyword">power</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) {</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (b == -<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span> / a;</span><br><span class="line">    <span class="keyword">boolean</span> flag = ((b &amp; <span class="number">1</span>) == <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">double</span> half = <span class="keyword">power</span>(a, b &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    half *= half;</span><br><span class="line">    <span class="keyword">return</span> flag ? a * half : half;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="keyword">power</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b) {</span><br><span class="line">    <span class="keyword">boolean</span> flag = b &lt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> y = flag ? -((<span class="keyword">long</span>) b) : b;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y != <span class="number">0</span>) {</span><br><span class="line">      <span class="keyword">if</span> ((y &amp; <span class="number">1</span>) == <span class="number">1</span>) {</span><br><span class="line">          res *= a;</span><br><span class="line">      }</span><br><span class="line">      a *= a;</span><br><span class="line">      y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> flag ? <span class="number">1</span> / res : res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法总结</title>
    <url>/2021/09/11/103-%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/103.jpg"></p>
</span>

<span id="more"></span>
<p><img data-src="/images/java/%E8%A1%A5%E7%A0%81.png"></p>
<h1 id="ListNode"><a href="#ListNode" class="headerlink" title="ListNode"></a>ListNode</h1><figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>{</span><br><span class="line">   <span class="keyword">public</span> int <span class="keyword">val</span>;</span><br><span class="line">   <span class="keyword">public</span> ListNode next;</span><br><span class="line">   ListNode() {}</span><br><span class="line">   ListNode(int <span class="keyword">val</span>) { <span class="keyword">this</span>.<span class="keyword">val</span> = <span class="keyword">val</span>; }</span><br><span class="line">   ListNode(int <span class="keyword">val</span>, ListNode next) { <span class="keyword">this</span>.<span class="keyword">val</span> = <span class="keyword">val</span>; <span class="keyword">this</span>.next = next; }</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String toString() {</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">val</span> + <span class="string">" -&gt; "</span> + next ;</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="TEST"><a href="#TEST" class="headerlink" title="TEST"></a>TEST</h1><figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) {</span><br><span class="line">    ListNode listNode = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">    listNode.<span class="keyword">next</span> = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">    listNode.<span class="keyword">next</span>.<span class="keyword">next</span> = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">    listNode.<span class="keyword">next</span>.<span class="keyword">next</span>.<span class="keyword">next</span> = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">    listNode.<span class="keyword">next</span>.<span class="keyword">next</span>.<span class="keyword">next</span>.<span class="keyword">next</span> = <span class="keyword">new</span> ListNode(<span class="number">5</span>);</span><br><span class="line">    listNode.<span class="keyword">next</span>.<span class="keyword">next</span>.<span class="keyword">next</span>.<span class="keyword">next</span>.<span class="keyword">next</span> = <span class="keyword">new</span> ListNode(<span class="number">6</span>);</span><br><span class="line">    listNode.<span class="keyword">next</span>.<span class="keyword">next</span>.<span class="keyword">next</span>.<span class="keyword">next</span>.<span class="keyword">next</span>.<span class="keyword">next</span> = <span class="keyword">new</span> ListNode(<span class="number">7</span>);</span><br><span class="line">    Test test = <span class="keyword">new</span> Test();</span><br><span class="line">    ListNode node = test.reverseNode(listNode);</span><br><span class="line">    System.out.<span class="keyword">println</span>(node);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="移除链表元素"><a href="#移除链表元素" class="headerlink" title="移除链表元素"></a>移除链表元素</h1><figure class="highlight haxe"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode removeNode(ListNode head,int val) { </span><br><span class="line">    ListNode <span class="keyword">new</span><span class="type">Head</span> = <span class="keyword">new</span> <span class="type">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    ListNode <span class="keyword">new</span><span class="type">Tail</span> = <span class="keyword">new</span><span class="type">Head</span>;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">if</span> (head.val != val) {</span><br><span class="line">            <span class="comment">//修改newHead指针的指向</span></span><br><span class="line">            <span class="keyword">new</span><span class="type">Tail</span>.next = head;</span><br><span class="line">            <span class="comment">//重置尾结点</span></span><br><span class="line">            <span class="keyword">new</span><span class="type">Tail</span> = <span class="keyword">new</span><span class="type">Tail</span>.next;</span><br><span class="line">        }</span><br><span class="line">        head = head.next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">new</span><span class="type">Tail</span>.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Head</span>.next;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="翻转链表"><a href="#翻转链表" class="headerlink" title="翻转链表"></a>翻转链表</h1><figure class="highlight haxe"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode reverseNode(ListNode head) { </span><br><span class="line">    ListNode <span class="keyword">new</span><span class="type">Head</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(head != <span class="literal">null</span>){</span><br><span class="line">        <span class="comment">//建一个临时节点存储</span></span><br><span class="line">        ListNode temp = head.next;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//当前元素1指向null;以此类推 2 -&gt; 1 -&gt; null </span></span><br><span class="line">        head.next = <span class="keyword">new</span><span class="type">Head</span>;</span><br><span class="line">        <span class="keyword">new</span><span class="type">Head</span> =  head;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//继续遍历下一个元素</span></span><br><span class="line">        head = temp;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Head</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="快慢指针求中心节点"><a href="#快慢指针求中心节点" class="headerlink" title="快慢指针求中心节点"></a>快慢指针求中心节点</h1><ul>
<li>快指针走两步 慢指针走一步，一旦快指针下一个节点或者下下个节点为 null, 慢指针就是中心节点 </li>
</ul>
<figure class="highlight axapta"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode middleNode(ListNode head) { </span><br><span class="line">   ListNode slow = head;</span><br><span class="line">   ListNode fast = head;       </span><br><span class="line">   <span class="keyword">while</span>(fast.<span class="keyword">next</span> != <span class="literal">null</span> &amp;&amp; fast.<span class="keyword">next</span>.<span class="keyword">next</span> != <span class="literal">null</span>){</span><br><span class="line">        slow = slow.<span class="keyword">next</span>; </span><br><span class="line">        fast = fast.<span class="keyword">next</span>.<span class="keyword">next</span>;</span><br><span class="line">   }</span><br><span class="line">   <span class="keyword">return</span> slow;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="利用栈求解左-右边第一个比它大的数"><a href="#利用栈求解左-右边第一个比它大的数" class="headerlink" title="利用栈求解左/右边第一个比它大的数"></a>利用栈求解左 / 右边第一个比它大的数</h1><p><img data-src="/images/sort/stack.png"></p>
<figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主函数</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span>[] nums = {<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">5</span>};</span><br><span class="line">    <span class="built_in">parentIndex</span>(nums);</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用栈求解左/右边第一个比它大的数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] <span class="built_in">parentIndex</span>(<span class="keyword">int</span>[] nums) {</span><br><span class="line">    <span class="comment">//1.扫描一遍所有的元素</span></span><br><span class="line">    <span class="comment">//2.保持栈底到栈顶是单调递减的</span></span><br><span class="line">    <span class="comment">//3.遍历到的数大于栈顶数: 栈顶数右边的第一个大的数是遍历到的数,并且不停的弹出来</span></span><br><span class="line">    <span class="comment">//4.遍历到的数小于栈顶数: 遍历元素左边第一个大的数是栈顶数</span></span><br><span class="line">    <span class="comment">//5.将该数入栈</span></span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span>[] lis = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    <span class="keyword">int</span>[] ris = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">        lis[i] = <span class="number">-1</span>;</span><br><span class="line">        ris[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!stack.<span class="built_in">isEmpty</span>() &amp;&amp; nums[i] &gt; nums[stack.<span class="built_in">peek</span>()]) {</span><br><span class="line">            ris[stack.<span class="built_in">pop</span>()] = i;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (!stack.<span class="built_in">isEmpty</span>()) {</span><br><span class="line">            lis[i] = stack.<span class="built_in">peek</span>();</span><br><span class="line">        }</span><br><span class="line">        stack.<span class="built_in">push</span>(i);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//从左右去选择一个最小的就是父节点</span></span><br><span class="line">    <span class="keyword">int</span>[] pis = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pis.length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (lis[i] == <span class="number">-1</span> &amp;&amp; ris[i] == <span class="number">-1</span>) {</span><br><span class="line">            pis[i] = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (lis[i] == <span class="number">-1</span>) {</span><br><span class="line">            pis[i] = ris[i];</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (ris[i] == <span class="number">-1</span>) {</span><br><span class="line">            pis[i] = lis[i];</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (nums[lis[i]] &lt; nums[ris[i]]) {</span><br><span class="line">            pis[i] = lis[i];</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            pis[i] = ris[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    System.out.<span class="built_in">println</span>(Arrays.<span class="built_in">toString</span>(pis));</span><br><span class="line">    <span class="keyword">return</span> pis;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="求每日温度"><a href="#求每日温度" class="headerlink" title="求每日温度"></a>求每日温度</h1><p><img data-src="/images/sort/%E6%B8%A9%E5%BA%A6.png"></p>
<figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">public</span> static <span class="type">void</span> main(String[] args) {</span><br><span class="line">    <span class="type">int</span>[] tmp = {<span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">71</span>, <span class="number">69</span>, <span class="number">72</span>, <span class="number">76</span>, <span class="number">73</span>};</span><br><span class="line">    Solution8 solution8 = <span class="built_in">new</span> Solution8();</span><br><span class="line">    solution8.dailyTemperatures(tmp);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用栈,求解右边第一个比它大的数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">public</span> <span class="type">int</span>[] dailyTemperatures2(<span class="type">int</span>[] temperatures) {</span><br><span class="line">    <span class="type">int</span>[] ris = <span class="built_in">new</span> <span class="type">int</span>[temperatures.length];</span><br><span class="line">    Stack&lt;<span class="type">Integer</span>&gt; stack = <span class="built_in">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; temperatures.length; i++) {</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; temperatures[i] &gt; temperatures[stack.peek()]) {</span><br><span class="line">            <span class="type">Integer</span> peek = stack.pop();</span><br><span class="line">            ris[peek] = i - peek;</span><br><span class="line">        }</span><br><span class="line">        stack.push(i);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(Arrays.toString(ris));</span><br><span class="line">    <span class="keyword">return</span> ris;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 倒推法-类比动态规划</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">public</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] T) {</span><br><span class="line">    <span class="type">int</span>[] <span class="keyword">values</span> = <span class="built_in">new</span> <span class="type">int</span>[T.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = T.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i<span class="comment">--) {</span></span><br><span class="line">        <span class="type">int</span> j = i + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">if</span> (T[i] &lt; T[j]) {</span><br><span class="line">                <span class="keyword">values</span>[i] = j - i;</span><br><span class="line">                break;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">values</span>[j] == <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">values</span>[i] = <span class="number">0</span>;</span><br><span class="line">                break;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (T[i] == T[j]) {</span><br><span class="line">                <span class="keyword">values</span>[i] = <span class="keyword">values</span>[j] + j - i;</span><br><span class="line">                break;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                j = j + <span class="keyword">values</span>[j];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(Arrays.toString(<span class="keyword">values</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">values</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 倒推法优化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">public</span> <span class="type">int</span>[] dailyTemperatures3(<span class="type">int</span>[] T) {</span><br><span class="line">    <span class="type">int</span>[] <span class="keyword">values</span> = <span class="built_in">new</span> <span class="type">int</span>[T.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = T.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i<span class="comment">--) {</span></span><br><span class="line">        <span class="type">int</span> j = i + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">if</span> (T[i] &lt; T[j]) {</span><br><span class="line">                <span class="keyword">values</span>[i] = j - i;</span><br><span class="line">                break;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">values</span>[j] == <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">values</span>[i] = <span class="number">0</span>;</span><br><span class="line">                break;</span><br><span class="line">            }</span><br><span class="line">            j = j + <span class="keyword">values</span>[j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(Arrays.toString(<span class="keyword">values</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">values</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h1 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h1><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"># 递归版本</span></span><br><span class="line">    <span class="meta">#前中后</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span>(<span class="params">TreeNode root</span>)</span> {</span><br><span class="line">         <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">         <span class="meta">#System.out.println(root.val); # 前序 根左右</span></span><br><span class="line">         preOrder(root.left);</span><br><span class="line">         <span class="meta">#System.out.println(root.val); # 中序 左根右</span></span><br><span class="line">         preOrder(root.right);   </span><br><span class="line">         <span class="meta">#System.out.println(root.val); # 后序 左右根</span></span><br><span class="line">    }</span><br><span class="line">    <span class="meta">#层序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">levelOrder</span>(<span class="params">TreeNode root</span>)</span> {</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        levelOrder(root, <span class="number">1</span>,list);</span><br><span class="line">        <span class="meta">#System.out.println(Arrays.toString(list.toArray()));</span></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">levelOrder</span>(<span class="params">TreeNode root, <span class="built_in">int</span> i, List list</span>)</span> {</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">int</span> length = list.size();</span><br><span class="line">        <span class="keyword">if</span> (length &lt;= i) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; i - length ; j++) {</span><br><span class="line">                list.<span class="keyword">add</span>(length + j, <span class="literal">null</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        list.<span class="keyword">set</span>(i, root.val);</span><br><span class="line">        <span class="comment">//定位元素在数组中的问题  左边是2*i  右边是 2*i+1</span></span><br><span class="line">        levelOrder(root.left, <span class="number">2</span> * i, list);</span><br><span class="line">        levelOrder(root.right, <span class="number">2</span> * i + <span class="number">1</span>, list);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line"><span class="meta">#  迭代版本</span></span><br><span class="line">    <span class="meta">#1. 前中后 , 使用对象去绑定  </span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Opt</span> {</span><br><span class="line">            <span class="keyword">private</span> String op;</span><br><span class="line">            <span class="keyword">private</span> TreeNode node;</span><br><span class="line">    </span><br><span class="line">            Opt(String op, TreeNode node) {</span><br><span class="line">                <span class="keyword">this</span>.op = op;</span><br><span class="line">                <span class="keyword">this</span>.node = node;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span>(<span class="params">TreeNode root</span>)</span> {</span><br><span class="line">            <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            Stack&lt;Opt&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">            stack.<span class="keyword">add</span>(<span class="keyword">new</span> Opt(<span class="string">"op"</span>, root));</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty()) {</span><br><span class="line">                Opt opt = stack.pop();</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"op"</span>.<span class="keyword">equals</span>(opt.op)) {</span><br><span class="line">                    TreeNode node = opt.node;</span><br><span class="line">                    <span class="comment">//后序stack.add(new Opt("pt", node));</span></span><br><span class="line">                    <span class="keyword">if</span> (node.right != <span class="literal">null</span>) {</span><br><span class="line">                        stack.<span class="keyword">add</span>(<span class="keyword">new</span> Opt(<span class="string">"op"</span>, node.right));</span><br><span class="line">                    }  </span><br><span class="line">                    <span class="comment">//中序stack.add(new Opt("pt", node));</span></span><br><span class="line">                    <span class="keyword">if</span> (node.left != <span class="literal">null</span>) {</span><br><span class="line">                        stack.<span class="keyword">add</span>(<span class="keyword">new</span> Opt(<span class="string">"op"</span>, node.left));</span><br><span class="line">                    }</span><br><span class="line">                    <span class="comment">//前序stack.add(new Opt("pt", node));</span></span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    System.<span class="keyword">out</span>.println(opt.node.val);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }       </span><br><span class="line">    <span class="meta">#2. 正常使用while方式</span></span><br><span class="line">        <span class="meta">#前序</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span>(<span class="params">TreeNode root</span>)</span> {</span><br><span class="line">            <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">            stack.<span class="keyword">add</span>(root);</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty()) {</span><br><span class="line">                root = stack.pop();</span><br><span class="line">                <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">                System.<span class="keyword">out</span>.println(root.val);</span><br><span class="line">                stack.<span class="keyword">add</span>(root.right);</span><br><span class="line">                stack.<span class="keyword">add</span>(root.left);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="meta">#中序</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrder</span>(<span class="params">TreeNode root</span>)</span> {</span><br><span class="line">            <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() || root != <span class="literal">null</span>) {</span><br><span class="line">                <span class="keyword">if</span> (root != <span class="literal">null</span>) {</span><br><span class="line">                    stack.<span class="keyword">add</span>(root);</span><br><span class="line">                    root = root.left;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    TreeNode pop = stack.pop();</span><br><span class="line">                    System.<span class="keyword">out</span>.print(pop.val);</span><br><span class="line">                    root = pop.right;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="meta"># 后序</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrder</span>(<span class="params">TreeNode root</span>)</span> {</span><br><span class="line">            <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">            TreeNode prev = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() || root != <span class="literal">null</span>) {</span><br><span class="line">                <span class="keyword">while</span> (root != <span class="literal">null</span>) {</span><br><span class="line">                    stack.<span class="keyword">add</span>(root);</span><br><span class="line">                    root = root.left;</span><br><span class="line">                }</span><br><span class="line">                root = stack.pop();</span><br><span class="line">                <span class="keyword">if</span>(root.right == <span class="literal">null</span> || root.right == prev){</span><br><span class="line">                    System.<span class="keyword">out</span>.print(root.val);</span><br><span class="line">                    prev = root;</span><br><span class="line">                    root = <span class="literal">null</span>;</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                    stack.push(root);</span><br><span class="line">                    root = root.right;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="meta">#层序</span></span><br><span class="line">        <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {</span><br><span class="line">             List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> list;</span><br><span class="line">            Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList() ;</span><br><span class="line">            queue.<span class="keyword">add</span>(root);</span><br><span class="line">            <span class="keyword">while</span>(!queue.isEmpty()){</span><br><span class="line">                List&lt;Integer&gt; sub = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="comment">//这里很重要,要把size放出来</span></span><br><span class="line">                <span class="built_in">int</span> size = queue.size();</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">                     TreeNode poll = queue.poll();</span><br><span class="line">                     sub.<span class="keyword">add</span>(poll.val);</span><br><span class="line">    </span><br><span class="line">                     <span class="keyword">if</span>(poll.left != <span class="literal">null</span>){</span><br><span class="line">                        queue.offer(poll.left);</span><br><span class="line">                     }</span><br><span class="line">                     <span class="keyword">if</span>(poll.right != <span class="literal">null</span>) {</span><br><span class="line">                        queue.offer(poll.right);</span><br><span class="line">                     }</span><br><span class="line">                }</span><br><span class="line">                list.<span class="keyword">add</span>(sub);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">    </span><br><span class="line">        }</span><br><span class="line"><span class="meta"># morris 遍历 (找前驱结点然后指向自己)  前驱结点是垂直方向左边(不论层级)离自己最近的节点</span></span><br><span class="line">    <span class="meta"># 前序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">morrisOrder</span>(<span class="params">TreeNode cur</span>)</span> {</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        TreeNode mostRight = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) {</span><br><span class="line">            <span class="comment">//前驱结点</span></span><br><span class="line">            mostRight = cur.left;</span><br><span class="line">            <span class="keyword">if</span> (mostRight != <span class="literal">null</span>) {</span><br><span class="line">                <span class="keyword">while</span> (mostRight.right != <span class="literal">null</span> &amp;&amp; mostRight.right != cur) {</span><br><span class="line">                    mostRight = mostRight.right;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (mostRight.right == <span class="literal">null</span>) {</span><br><span class="line">                    <span class="comment">//前驱结点指向当前节点</span></span><br><span class="line">                    mostRight.right = cur;</span><br><span class="line">                    <span class="comment">//打印根</span></span><br><span class="line">                    System.<span class="keyword">out</span>.print(cur.val);</span><br><span class="line">                    cur = cur.left;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="comment">// 删除前驱结点指向当前节点</span></span><br><span class="line">                    mostRight.right = <span class="literal">null</span>;</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">//打印左边</span></span><br><span class="line">                System.<span class="keyword">out</span>.print(cur.val);</span><br><span class="line">            }</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta"># 中序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">morrisOrder</span>(<span class="params">TreeNode cur</span>)</span> {</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        TreeNode mostRight = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) {</span><br><span class="line">            <span class="comment">//前驱结点</span></span><br><span class="line">            mostRight = cur.left;</span><br><span class="line">            <span class="keyword">if</span> (mostRight != <span class="literal">null</span>) {</span><br><span class="line">                <span class="keyword">while</span> (mostRight.right != <span class="literal">null</span> &amp;&amp; mostRight.right != cur) {</span><br><span class="line">                    mostRight = mostRight.right;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (mostRight.right == <span class="literal">null</span>) {</span><br><span class="line">                    <span class="comment">//前驱结点指向当前节点</span></span><br><span class="line">                    mostRight.right = cur; </span><br><span class="line">                    cur = cur.left;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="comment">// 删除前驱结点指向当前节点</span></span><br><span class="line">                    mostRight.right = <span class="literal">null</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//开启打印</span></span><br><span class="line">            System.<span class="keyword">out</span>.print(cur.val);</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta"># 后序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">morrisOrder</span>(<span class="params">TreeNode cur</span>)</span> {</span><br><span class="line">        TreeNode root = cur;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        TreeNode mostRight;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) {</span><br><span class="line">            <span class="comment">//前驱结点</span></span><br><span class="line">            mostRight = cur.left;</span><br><span class="line">            <span class="keyword">if</span> (mostRight != <span class="literal">null</span>) {</span><br><span class="line">                <span class="keyword">while</span> (mostRight.right != <span class="literal">null</span> &amp;&amp; mostRight.right != cur) {</span><br><span class="line">                    mostRight = mostRight.right;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (mostRight.right == <span class="literal">null</span>) {</span><br><span class="line">                    <span class="comment">//前驱结点指向当前节点</span></span><br><span class="line">                    mostRight.right = cur;</span><br><span class="line">                    cur = cur.left;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="comment">// 删除前驱结点指向当前节点</span></span><br><span class="line">                    mostRight.right = <span class="literal">null</span>;</span><br><span class="line">                    <span class="comment">//打印左边的数据</span></span><br><span class="line">                    println(cur.left);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//打印根节点的链</span></span><br><span class="line">        println(root);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span>(<span class="params">TreeNode left</span>)</span> {</span><br><span class="line">        <span class="comment">//翻转链表</span></span><br><span class="line">        TreeNode tail = reverse(left);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (tail != <span class="literal">null</span>) {</span><br><span class="line">            System.<span class="keyword">out</span>.print(tail.val);</span><br><span class="line">            tail = tail.right;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        reverse(left);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> TreeNode <span class="title">reverse</span>(<span class="params">TreeNode head</span>)</span> {</span><br><span class="line">        TreeNode next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span>) {</span><br><span class="line">            TreeNode temp =  head.right;</span><br><span class="line">            head.right = next;</span><br><span class="line">            next = head;</span><br><span class="line">            head = temp;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<h1 id="省份数量"><a href="#省份数量" class="headerlink" title="省份数量"></a>省份数量</h1><figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line">#深度优先</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findCircleNum</span><span class="params">(<span class="keyword">int</span>[][] citysConnected)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> citys = citysConnected.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[citys];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> provinces = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; citys; i++) {</span><br><span class="line">            <span class="keyword">if</span> (visited[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(i, visited, citysConnected, citys);</span><br><span class="line">            provinces++;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> provinces;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">boolean</span>[] visited, <span class="keyword">int</span>[][] citysConnected, <span class="keyword">int</span> citys)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>[] ints = citysConnected[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; citys; j++) {</span><br><span class="line">            <span class="keyword">if</span> (ints[j] == <span class="number">1</span> &amp;&amp; !visited[j]) {</span><br><span class="line">                visited[j] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(j, visited, citysConnected, citys);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"># 广度优先</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findCircleNum</span><span class="params">(<span class="keyword">int</span>[][] citysConnected)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> citys = citysConnected.length;</span><br><span class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[citys];</span><br><span class="line">        <span class="keyword">int</span> provinces = <span class="number">0</span>;</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="built_in">LinkedList</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; citys; i++) {</span><br><span class="line">            <span class="keyword">if</span> (visited[i]) <span class="keyword">continue</span>;</span><br><span class="line">            queue.<span class="built_in">offer</span>(i);</span><br><span class="line">            <span class="keyword">while</span>(!queue.<span class="built_in">isEmpty</span>()){</span><br><span class="line">                Integer k = queue.<span class="built_in">poll</span>();</span><br><span class="line">                visited[k] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; citys; j++) {</span><br><span class="line">                    <span class="keyword">int</span>[] ints = citysConnected[i];</span><br><span class="line">                    <span class="keyword">if</span> (ints[j] == <span class="number">1</span> &amp;&amp; !visited[j] ) {</span><br><span class="line">                        queue.<span class="built_in">offer</span>(j);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            provinces++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> provinces;</span><br><span class="line">    }</span><br><span class="line"># 并查集</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">mergeFind</span><span class="params">(<span class="keyword">int</span>[][] citys)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> length = citys.length;</span><br><span class="line">        <span class="keyword">int</span>[] head = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        <span class="keyword">int</span>[] level = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) {</span><br><span class="line">            head[i] = i;</span><br><span class="line">            level[i] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; length; j++) {</span><br><span class="line">                <span class="built_in">merge</span>(i, j, head, level);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; head.length; i++) {</span><br><span class="line">            <span class="keyword">if</span>(head[i] == i)count++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">     <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span>[] head, <span class="keyword">int</span>[] level)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> i = <span class="built_in">find</span>(x, head);</span><br><span class="line">        <span class="keyword">int</span> j = <span class="built_in">find</span>(y, head);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i == j) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (level[i] &lt;= level[j]) {</span><br><span class="line">            head[i] = j;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            head[j] = i;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (level[i] == level[j]) {</span><br><span class="line">            level[i]++;</span><br><span class="line">            level[j]++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span>[] head)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (head[x] == x) <span class="keyword">return</span> x;</span><br><span class="line">        head[x] = <span class="built_in">find</span>(head[x], head);</span><br><span class="line">        <span class="keyword">return</span> head[x];</span><br><span class="line">    } </span><br></pre></td></tr></tbody></table></figure>
<h1 id="字符查找-indexOf"><a href="#字符查找-indexOf" class="headerlink" title="字符查找  indexOf"></a>字符查找  indexOf</h1><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>.暴力查找,双层循环</span><br><span class="line"><span class="attribute">2</span>.使用hash,整段hash.每个字母定义成 <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>数字.然后求和,比较总和.移动就减最前面的再加上后面的,计算总和</span><br><span class="line"><span class="attribute">3</span>.bm算法,好后缀和坏字符,两种中式使用,增加跳过的概率.直接定位到新的字符</span><br><span class="line"><span class="attribute">4</span>.kmp</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>算法总结</category>
      </categories>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title>并查集</title>
    <url>/2021/09/11/102-%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/102.jpg"></p>
</span>

<span id="more"></span>

<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><ul>
<li>举例：多个村庄判断是否有路相连</li>
</ul>
<h2 id="抽象父类-UnionFind"><a href="#抽象父类-UnionFind" class="headerlink" title="抽象父类 UnionFind"></a>抽象父类 UnionFind</h2><figure class="highlight aspectj"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span> </span>{</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span>[] <span class="keyword">parents</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnionFind</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (capacity &lt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"capacity must be &gt;= 1"</span>);</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">parents</span> = <span class="keyword">new</span> <span class="keyword">int</span>[capacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">parents</span>.length; i++) {</span><br><span class="line">            <span class="keyword">parents</span>[i] = i;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找v所属的集合（根节点）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> v)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并v1、v2所在的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> v1, <span class="keyword">int</span> v2)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查v1、v2是否属于同一个集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isSame</span><span class="params">(<span class="keyword">int</span> v1, <span class="keyword">int</span> v2)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> find(v1) == find(v2);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span> || v &gt;= <span class="keyword">parents</span>.length) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"v is out of bounds"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="UnionFind-QF"><a href="#UnionFind-QF" class="headerlink" title="UnionFind_QF"></a>UnionFind_QF</h2><figure class="highlight smali"><table><tbody><tr><td class="code"><pre><span class="line">// 快速查找,find(O(1)) union (O(n))</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 父节点就是根节点</span><br><span class="line"> */<span class="keyword"></span></span><br><span class="line"><span class="keyword">public</span><span class="built_in"> int </span>find(int v) {</span><br><span class="line">    rangeCheck(v);</span><br><span class="line">   <span class="built_in"> return </span>parents[v];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 将v1所在集合的所有元素，都嫁接到v2的父节点上</span><br><span class="line"> */<span class="keyword"></span></span><br><span class="line"><span class="keyword">public</span> void union(int v1,<span class="built_in"> int </span>v2) {</span><br><span class="line">   <span class="built_in"> int </span>p1 = find(v1);</span><br><span class="line">   <span class="built_in"> int </span>p2 = find(v2);</span><br><span class="line">   <span class="built_in"> if </span>(p1 == p2) return;</span><br><span class="line">    for (int i = 0; i &lt; parents.length; i++) {</span><br><span class="line">       <span class="built_in"> if </span>(parents[i] == p1) {</span><br><span class="line">            parents[i] = p2;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="UnionFind-QU"><a href="#UnionFind-QU" class="headerlink" title="UnionFind_QU"></a>UnionFind_QU</h2><p><img data-src="/images/sort/UnionFind_QU.jpg"><br><img data-src="/images/sort/UnionQU.jpg"></p>
<figure class="highlight smali"><table><tbody><tr><td class="code"><pre><span class="line">// 快速合并,find(O(logn)) union (O(logn))</span><br><span class="line"></span><br><span class="line">//通过parent链条不断地向上找，直到找到根节点<span class="keyword"></span></span><br><span class="line"><span class="keyword">public</span><span class="built_in"> int </span>find(int v) {</span><br><span class="line">    rangeCheck(v);</span><br><span class="line">    while(v != parents[v]){</span><br><span class="line">        v = parents[v]</span><br><span class="line">    }</span><br><span class="line">   <span class="built_in"> return </span>v;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 将v1所在集合的所有元素，都嫁接到v2的父节点上</span><br><span class="line"> */<span class="keyword"></span></span><br><span class="line"><span class="keyword">public</span> void union(int v1,<span class="built_in"> int </span>v2) {</span><br><span class="line">   <span class="built_in"> int </span>p1 = find(v1);</span><br><span class="line">   <span class="built_in"> int </span>p2 = find(v2);</span><br><span class="line">   <span class="built_in"> if </span>(p1 == p2) return;</span><br><span class="line">    parents[p1] = p2</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h1 id="UnionFind-QU-优化"><a href="#UnionFind-QU-优化" class="headerlink" title="UnionFind_QU 优化"></a>UnionFind_QU 优化</h1><ul>
<li>减少树的层高 降低查询的复杂度</li>
</ul>
<h2 id="UnionFind-QU-S"><a href="#UnionFind-QU-S" class="headerlink" title="UnionFind_QU_S"></a>UnionFind_QU_S</h2><figure class="highlight smali"><table><tbody><tr><td class="code"><pre><span class="line">// 快速合并,基于元素数量的优化 - 大元素的嫁接在小元素上</span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">private</span> int[] sizes;</span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">public</span> UnionFind_QU_S(int capacity) {</span><br><span class="line">    super(capacity);</span><br><span class="line">    </span><br><span class="line">    sizes =<span class="built_in"> new </span>int[capacity];</span><br><span class="line">    for (int i = 0; i &lt; sizes.length; i++) {</span><br><span class="line">        sizes[i] = 1;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 将v1所在集合的所有元素，都嫁接到v2的父节点上</span><br><span class="line"> */<span class="keyword"></span></span><br><span class="line"><span class="keyword">public</span> void union(int v1,<span class="built_in"> int </span>v2) {</span><br><span class="line">   <span class="built_in"> int </span>p1 = find(v1);</span><br><span class="line">   <span class="built_in"> int </span>p2 = find(v2);</span><br><span class="line">   <span class="built_in"> if </span>(p1 == p2) return;</span><br><span class="line">    </span><br><span class="line">   <span class="built_in"> if </span>(sizes[p1] &lt; sizes[p2]) {</span><br><span class="line">        parents[p1] = p2;</span><br><span class="line">        sizes[p2] += sizes[p1];</span><br><span class="line">    } else {</span><br><span class="line">        parents[p2] = p1;</span><br><span class="line">        sizes[p1] += sizes[p2];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="UnionFind-QU-R"><a href="#UnionFind-QU-R" class="headerlink" title="UnionFind_QU_R"></a>UnionFind_QU_R</h2><figure class="highlight smali"><table><tbody><tr><td class="code"><pre><span class="line">// 快速合并Rank,基于层高的计算 - 将大层高的嫁接到小层高上</span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">private</span> int[] ranks;</span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">public</span> UnionFind_QU_R(int capacity) {</span><br><span class="line">    super(capacity);</span><br><span class="line">    </span><br><span class="line">    ranks =<span class="built_in"> new </span>int[capacity];</span><br><span class="line">    for (int i = 0; i &lt; ranks.length; i++) {</span><br><span class="line">        ranks[i] = 1;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 将v1所在集合的所有元素，都嫁接到v2的父节点上</span><br><span class="line"> */<span class="keyword"></span></span><br><span class="line"><span class="keyword">public</span> void union(int v1,<span class="built_in"> int </span>v2) {</span><br><span class="line">   <span class="built_in"> int </span>p1 = find(v1);</span><br><span class="line">   <span class="built_in"> int </span>p2 = find(v2);</span><br><span class="line">   <span class="built_in"> if </span>(p1 == p2) return;</span><br><span class="line">   <span class="built_in"> if </span>(ranks[p1] &lt; ranks[p2]) {</span><br><span class="line">        parents[p1] = p2;</span><br><span class="line">    } else<span class="built_in"> if </span>(ranks[p1] &gt; ranks[p2]) {</span><br><span class="line">        parents[p2] = p1;</span><br><span class="line">    } else {</span><br><span class="line">        parents[p1] = p2;</span><br><span class="line">        //相等的时候层高加+1</span><br><span class="line">        ranks[p2] += 1;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="UnionFind-QU-R-PC-基于rank的优化-路径压缩-Path-Compression"><a href="#UnionFind-QU-R-PC-基于rank的优化-路径压缩-Path-Compression" class="headerlink" title="UnionFind_QU_R_PC - 基于rank的优化 - 路径压缩(Path Compression)"></a>UnionFind_QU_R_PC - 基于 rank 的优化 - 路径压缩 (Path Compression)</h2><figure class="highlight aspectj"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFind_QU_R_PC</span> <span class="keyword">extends</span> <span class="title">UnionFind_QU_R</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnionFind_QU_R_PC</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(capacity);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">        rangeCheck(v);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">parents</span>[v] != v) {</span><br><span class="line">            <span class="comment">//采用递归将当前节点,父节点的元素父亲都修改为顶点元素 - 保持树高为2层</span></span><br><span class="line">            <span class="keyword">parents</span>[v] = find(<span class="keyword">parents</span>[v]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">parents</span>[v];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="UnionFind-QU-R-PH-基于rank的优化-路径减半-Path-Halving"><a href="#UnionFind-QU-R-PH-基于rank的优化-路径减半-Path-Halving" class="headerlink" title="UnionFind_QU_R_PH - 基于rank的优化 - 路径减半(Path Halving)"></a>UnionFind_QU_R_PH - 基于 rank 的优化 - 路径减半 (Path Halving)</h2><figure class="highlight aspectj"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFind_QU_R_PH</span> <span class="keyword">extends</span> <span class="title">UnionFind_QU_R</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnionFind_QU_R_PH</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(capacity);</span><br><span class="line">    }</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> v)</span> </span>{ </span><br><span class="line">        rangeCheck(v);</span><br><span class="line">        <span class="keyword">while</span> (v != <span class="keyword">parents</span>[v]) {</span><br><span class="line">            <span class="comment">//遍历元素 每隔一个节点就指向自己的祖父节点 - 相当于将树的高度尽量降低</span></span><br><span class="line">            <span class="keyword">parents</span>[v] = <span class="keyword">parents</span>[<span class="keyword">parents</span>[v]];</span><br><span class="line">            v = <span class="keyword">parents</span>[v];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="UnionFind-QU-R-PS-基于rank的优化-路径分裂-Path-Spliting"><a href="#UnionFind-QU-R-PS-基于rank的优化-路径分裂-Path-Spliting" class="headerlink" title="UnionFind_QU_R_PS  - 基于rank的优化 - 路径分裂(Path Spliting)"></a>UnionFind_QU_R_PS  - 基于 rank 的优化 - 路径分裂 (Path Spliting)</h2><figure class="highlight aspectj"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFind_QU_R_PS</span> <span class="keyword">extends</span> <span class="title">UnionFind_QU_R</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnionFind_QU_R_PS</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(capacity);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> v)</span> </span>{ </span><br><span class="line">        rangeCheck(v);</span><br><span class="line">        <span class="keyword">while</span> (v != <span class="keyword">parents</span>[v]) {</span><br><span class="line">            <span class="keyword">int</span> p = <span class="keyword">parents</span>[v];</span><br><span class="line">            <span class="comment">// 每个节点都指向其祖父节点</span></span><br><span class="line">            <span class="keyword">parents</span>[v] = <span class="keyword">parents</span>[<span class="keyword">parents</span>[v]];</span><br><span class="line">            v = p;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>并查集</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>Doris</title>
    <url>/2021/09/11/104-doris/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/104.jpg"></p>
</span>

<span id="more"></span>

<figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>.暴力查找,双层循环</span><br><span class="line"><span class="attribute">2</span>.使用hash,整段hash.每个字母定义成 <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>数字.然后求和,比较总和.移动就减最前面的再加上后面的,计算总和</span><br><span class="line"><span class="attribute">3</span>.bm算法,好后缀和坏字符,两种中式使用,增加跳过的概率.直接定位到新的字符</span><br><span class="line"><span class="attribute">4</span>.kmp</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>Doris</category>
      </categories>
      <tags>
        <tag>Doris</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 Mysql</title>
    <url>/2021/05/26/11-%E5%AE%89%E8%A3%85Mysql/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/11.jpg"></p>
</span>

<span id="more"></span>

<h2 id="Windows下安装Mysql"><a href="#Windows下安装Mysql" class="headerlink" title="Windows下安装Mysql"></a>Windows 下安装 Mysql</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul>
<li><p>  选择对应 mysql 版本下载 <a href="http://mirrors.sohu.com/mysql/">Mysql</a></p>
</li>
<li><p>  搜索 zip 64 位的版本进行下载      </p>
</li>
</ul>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><pre><code>MYSQL_HOME D:\JJDK\mysql
</code></pre>
<h3 id="配置PATH"><a href="#配置PATH" class="headerlink" title="配置PATH"></a>配置 PATH</h3><pre><code>PATH %MYSQL_HOME%\bin
</code></pre>
<h3 id="初始化data"><a href="#初始化data" class="headerlink" title="初始化data"></a>初始化 data</h3><ul>
<li><p>  以管理员身份运行 cmd 进入 D:\JJDK\mysql\bin 下</p>
</li>
<li><p>执行命令</p>
  <figure class="highlight brainfuck"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">mysqld</span> --<span class="comment">initialize</span><span class="literal">-</span><span class="comment">insecure</span> --<span class="comment">user=mysql</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>  在 D:\JJDK\mysql 的 bin 同级目录生成 data 目录</p>
</li>
</ul>
<h3 id="启动MySQL"><a href="#启动MySQL" class="headerlink" title="启动MySQL"></a>启动 MySQL</h3><pre><code>mysqld
</code></pre>
<h3 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录 MySQL</h3><pre><code>mysql -u root -p
</code></pre>
<h3 id="查询密码"><a href="#查询密码" class="headerlink" title="查询密码"></a>查询密码</h3><pre><code>use mysql;
select host,user,authentication_string from mysql.user;
</code></pre>
<h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><pre><code>alter user 'root'@'localhost' identified by 'root'; #5.6
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root'; #8.0
flush privileges; 
</code></pre>
<h3 id="配置权限允许访问"><a href="#配置权限允许访问" class="headerlink" title="配置权限允许访问"></a>配置权限允许访问</h3><pre><code>1. update user set user.Host='%' where user.User='root';
2. grant all privileges on *.* to root@'%'  identified by '123456' 任意ip访问数据库 
</code></pre>
<h3 id="增加my-ini配置文件"><a href="#增加my-ini配置文件" class="headerlink" title="增加my.ini配置文件"></a>增加 my.ini 配置文件</h3><blockquote>
<p> 放在 mysql 安装目录下</p>
</blockquote>
<pre><code>[mysqld] 
# 设置mysql的安装目录，也就是刚才我们解压的目录
basedir=D:/JJDK/mysql
# 设置mysql数据库的数据的存放目录
# datadir=D:/JJDK/mysql/data
# 设置默认使用的端口
port=3306
# 允许最大连接数
max_connections=200
# 允许连接失败的次数。这是为了防止有人试图攻击数据库
max_connect_errors=10
# 服务端使用的字符集
character-set-server=utf8mb4
# 数据库字符集对应一些排序等规则使用的字符集
collation-server=utf8mb4_general_ci
# 创建新表时将使用的默认存储引擎
default-storage-engine=INNODB
# 默认使用“mysql_native_password”插件作为认证加密方式
# MySQL8.0默认认证加密方式为caching_sha2_password
default_authentication_plugin=mysql_native_password
#大小写不敏感
lower_case_table_names = 1

[mysql]
# 设置mysql客户端默认字符集
default-character-set=utf8mb4

[client]
default-character-set=utf8mb4
port=3306
</code></pre>
<h3 id="后台进程启动"><a href="#后台进程启动" class="headerlink" title="后台进程启动"></a>后台进程启动</h3><pre><code>D:/JJDK/mysql/bin/mysqld.exe --install Mysql --defaults-file=D:/JJDK/mysql/my.ini #新增进程
sc delete Mysql #删除进程
</code></pre>
<h2 id="Linux下安装Mysql"><a href="#Linux下安装Mysql" class="headerlink" title="Linux下安装Mysql"></a>Linux 下安装 Mysql</h2><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><ul>
<li>  选择对应 mysql 版本下载 <a href="https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.15-linux-glibc2.12-i686.tar">Mysql</a></li>
</ul>
<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre><code>yum -y search libaio
yum -y install libaio
yum -y install numactl
yum -y install libnuma
yum -y install ld-linux.so.2
yum -y install libaio.so.1
yum -y install libnuma.so.1
yum -y install libstdc++.so.6
yum -y install libtinfo.so.5
</code></pre>
<h3 id="创建mysql用户"><a href="#创建mysql用户" class="headerlink" title="创建mysql用户"></a>创建 mysql 用户</h3><pre><code>groupadd mysql
useradd -r -g mysql -s /usr/local/mysql mysql
</code></pre>
<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><pre><code>tar zxvf /root/mysql/mysql-8.0.15-linux-glibc2.12-i686.tar.gz
或者
tar -xvf /root/mysql/mysql-8.0.15-linux-glibc2.12-i686.tar
或者
tar -xvJf /root/mysql/mysql-8.0.15-linux-glibc2.12-i686.tar.xz
</code></pre>
<h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><pre><code>mv mysql-8.0.15-linux-glibc2.12-i686 mysql 
cp mysql-8.0.15-linux-glibc2.12-i686.tar.xz /usr/local/
</code></pre>
<h3 id="修改目录用户"><a href="#修改目录用户" class="headerlink" title="修改目录用户"></a>修改目录用户</h3><pre><code>cd /usr/local/mysql #进入/usr/local/mysql 目录
chown -R mysql:mysql ./
</code></pre>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><blockquote>
<p>  记住初始化密码，后面用于修改</p>
</blockquote>
<pre><code>./bin/mysqld  --initialize  --user=mysql  --basedir=/usr/local/mysql  --datadir=/usr/local/mysql/data --defaults-file=/etc/my.cnf
</code></pre>
<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><pre><code>cd support-files
./mysql.server start
</code></pre>
<h3 id="配置mysql环境"><a href="#配置mysql环境" class="headerlink" title="配置mysql环境"></a>配置 mysql 环境</h3><pre><code>vi /etc/profile
    export MYSQL_HOME=/usr/local/mysql
    export MYSQL_PATH=${MYSQL_HOME}/bin:${MYSQL_HOME}/lib
    export PATH=$PATH:/usr/local/mysql/bin
shutdown -r now 重启下服务器或者 source /etc/profile 均可使环境变量生效
</code></pre>
<h3 id="配置开机自启动"><a href="#配置开机自启动" class="headerlink" title="配置开机自启动"></a>配置开机自启动</h3><pre><code>cp /usr/local/mysql/support-files/mysql.server  /etc/init.d/mysql       #拷贝mysql.server 
chmod +x  /etc/init.d/mysql                                             #添加可执行权限。
chkconfig  --add mysql                                                  #注册启动服务
chkconfig  --list                                                       #查看是否添加成功
</code></pre>
<h3 id="修改密码-1"><a href="#修改密码-1" class="headerlink" title="修改密码"></a>修改密码</h3><pre><code>按照上面windows操作就行
</code></pre>
<h3 id="配置-etc-my-cnf"><a href="#配置-etc-my-cnf" class="headerlink" title="配置/etc/my.cnf"></a>配置 /etc/my.cnf</h3><pre><code>类似 my.ini
启动 ./bin/mysqld --user=mysql  --basedir=/usr/local/mysql  --datadir=/usr/local/mysql/data --defaults-file=/etc/my.cnf
</code></pre>
<p>#Docker 启动</p>
<pre><code>docker run --name mysql1 --env MYSQL_ROOT_HOST=172.17.%.% 
--env MYSQL_ROOT_PASSWORD=root -v $PWD/mysql_data:/var/lib/mysql -p 3333:3306 -d mysql/mysql-server:5.7
</code></pre>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>Windows</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透之 Ngrok</title>
    <url>/2021/05/28/13-Ngrok/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/13.jpg"></p>
</span>

<span id="more"></span>

<h1 id="ngrok简介"><a href="#ngrok简介" class="headerlink" title="ngrok简介"></a>ngrok 简介</h1><pre><code>ngrok 服务可以分配给你一个域名让你本地的web项目提供给外网访问，
特别适合向别人展示你本机的web demo 以及调试一些远程的API (比如微信公众号，企业号的开发)
说白了，就是可以把本地项目映射到公网上
</code></pre>
<h2 id="ngrok介绍"><a href="#ngrok介绍" class="headerlink" title="ngrok介绍"></a>ngrok 介绍</h2><ul>
<li><a href="https://hsk.oray.com/">花生壳</a> - 正在使用的</li>
<li><a href="http://ngrok.ciqiuwl.cn/">小米球 ngrok</a> - 推荐 </li>
<li><a href="http://ngrok.cc/">ngrok.cc</a></li>
<li><a href="https://ngrok.com/">ngrox</a></li>
<li><a href="https://www.zhexi.tech/price/?sdclkid=A52D152z152GArDib5o">泽西信科</a></li>
</ul>
]]></content>
      <categories>
        <category>Ngrok</category>
      </categories>
      <tags>
        <tag>Ngrok</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 续集</title>
    <url>/2021/05/28/12-Mysql%E7%BB%AD%E9%9B%86/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/12.jpg"></p>
</span>

<span id="more"></span>
<h1 id="jdbc-时差问题"><a href="#jdbc-时差问题" class="headerlink" title="jdbc 时差问题"></a>jdbc 时差问题</h1><pre><code>jdbc:mysql://127.0.0.1:3306/order?useTimezone=true&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8&amp;nullCatalogMeansCurrent=true&amp;useSSL=true
</code></pre>
<h1 id="设置时间默认值"><a href="#设置时间默认值" class="headerlink" title="设置时间默认值"></a>设置时间默认值</h1><pre><code>ALTER TABLE `matter_public_area`
MODIFY COLUMN `created_at`  datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间' ,
MODIFY COLUMN `updated_at`  datetime NULL DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间' ,
MODIFY COLUMN `is_deleted`  tinyint(1) NULL DEFAULT 0 COMMENT '是否删除';
</code></pre>
<h1 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h1><pre><code>SELECT FROM_UNIXTIME(date, '%Y-%c-%d %h:%i:%s' ) as post_date ,   
date_format(NOW(), '%Y-%c-%d %h:%i:%s' ) as post_date_gmt   
FROM `article`  where outkey = 'Y' 
</code></pre>
<h1 id="传入变量"><a href="#传入变量" class="headerlink" title="传入变量"></a>传入变量</h1><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> substring_index(substring_index(a.outIds, <span class="string">','</span>, b.id <span class="operator">+</span> <span class="number">1</span>) ,<span class="string">','</span>, <span class="number">-1</span>) <span class="keyword">as</span> outIds</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> "1,2,3,4,5,6,7,8,9,0,1,2,212,21,32,32,44,4" <span class="keyword">as</span> outIds) a <span class="keyword">join</span> matter_help_id b <span class="keyword">on</span> b.id <span class="operator">&lt;</span> LENGTH(a.outIds) <span class="operator">-</span> LENGTH(REPLACE(a.outIds,<span class="string">','</span>,<span class="string">''</span>)) <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> cent_order.`matter_help_id` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">TRUNCATE</span> cent_order.matter_help_id;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> initIndex;</span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> initIndex(<span class="keyword">in</span> row_num <span class="type">int</span>)</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line">	<span class="keyword">declare</span> id <span class="type">varchar</span>(<span class="number">32</span>);</span><br><span class="line">	<span class="keyword">declare</span> counter <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">set</span> <span class="variable">@pre</span>_sql <span class="operator">=</span> "insert into cent_order.matter_help_id(id) values";</span><br><span class="line">	<span class="keyword">set</span> <span class="variable">@exec</span>_sql <span class="operator">=</span> <span class="variable">@pre</span>_sql;</span><br><span class="line">	repeat</span><br><span class="line">		<span class="keyword">set</span> <span class="variable">@exec</span>_sql <span class="operator">=</span> concat(<span class="variable">@exec</span>_sql,"(",counter,"),");</span><br><span class="line">		<span class="keyword">set</span> counter<span class="operator">=</span>counter<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">		if counter mod <span class="number">10000</span> <span class="operator">=</span> <span class="number">0</span> <span class="keyword">or</span> counter <span class="operator">&gt;=</span> row_num <span class="keyword">then</span></span><br><span class="line">			<span class="keyword">set</span> <span class="variable">@exec</span>_sql <span class="operator">=</span> <span class="built_in">substring</span>(<span class="variable">@exec</span>_sql, <span class="number">1</span>, <span class="keyword">char_length</span>(<span class="variable">@exec</span>_sql)<span class="number">-1</span>);</span><br><span class="line">			<span class="keyword">prepare</span> stmt <span class="keyword">from</span> <span class="variable">@exec</span>_sql;</span><br><span class="line">			<span class="keyword">execute</span> stmt;</span><br><span class="line">			<span class="keyword">deallocate</span> <span class="keyword">prepare</span> stmt;</span><br><span class="line">			if counter <span class="operator">&lt;</span> row_num <span class="keyword">then</span></span><br><span class="line">				<span class="keyword">set</span> <span class="variable">@exec</span>_sql <span class="operator">=</span> <span class="variable">@pre</span>_sql;</span><br><span class="line">			<span class="keyword">end</span> if;</span><br><span class="line">		<span class="keyword">end</span> if;</span><br><span class="line">		until counter <span class="operator">&gt;=</span> row_num</span><br><span class="line">	<span class="keyword">end</span> repeat;</span><br><span class="line"><span class="keyword">end</span>$$</span><br><span class="line">DELIMITER ;</span><br><span class="line">#先整个<span class="number">10</span>万条 后面不够了再加 <span class="operator">-</span> 大概需要执行<span class="number">50</span>秒</span><br><span class="line"><span class="keyword">call</span> initIndex(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> initIndex;</span><br></pre></td></tr></tbody></table></figure>

<h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><pre><code>乐观锁 - 使用版本号控制 update shop set count =46 where count = 47 
悲观锁 - for update 
</code></pre>
<h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><h2 id="查找所有存储过程"><a href="#查找所有存储过程" class="headerlink" title="查找所有存储过程"></a>查找所有存储过程</h2><pre><code> show procedure status;
</code></pre>
<h2 id="查看单个"><a href="#查看单个" class="headerlink" title="查看单个"></a>查看单个</h2><pre><code>show create procedure xx;
</code></pre>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><pre><code>drop procedure xx;
</code></pre>
<h2 id="创建简单的储存过程"><a href="#创建简单的储存过程" class="headerlink" title="创建简单的储存过程"></a>创建简单的储存过程</h2><pre><code>//默认;变成$$结尾
//in表示输入
//out 表示输出
//调用用call
//变量是@开始
delimiter $$;
create procedure p4(in pid int,out name varchar(30))
begin
    select * from seckill where id = pid;
end
//创建结束开始调用
call p4(20009,@name);
select @name;
</code></pre>
<h2 id="复杂的存储过程"><a href="#复杂的存储过程" class="headerlink" title="复杂的存储过程"></a>复杂的存储过程</h2><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量:"></a>定义变量:</h3><pre><code> 语句中定义：    
    DECLARE insert_count int DEFAULT 0;//定义一个insert_count 标量为0，相当于类的成员变量
    set r_result = -1;让输出变量等于-1；
 语句外定义：
    set @r_result=-3;
</code></pre>
<h3 id="if判断语句："><a href="#if判断语句：" class="headerlink" title="if判断语句："></a>if 判断语句：</h3><pre><code>IF (insert_count = 0) THEN
  ROLLBACK;
  set r_result = -1;
ELSEIF(insert_count &lt; 0) THEN
  ROLLBACK;
  SET R_RESULT = -2;
ELSE
xxx
END IF;
</code></pre>
<h3 id="插入小技巧ignore-重复插入返回0；"><a href="#插入小技巧ignore-重复插入返回0；" class="headerlink" title="插入小技巧ignore 重复插入返回0；"></a>插入小技巧 ignore 重复插入返回 0；</h3><pre><code> insert ignore into success_killed (seckill_id,user_phone,create_time) values (v_seckill_id,v_phone,v_kill_time);
</code></pre>
<h3 id="统计插入正确的条数-并赋值给变量"><a href="#统计插入正确的条数-并赋值给变量" class="headerlink" title="统计插入正确的条数 并赋值给变量"></a>统计插入正确的条数 并赋值给变量</h3><pre><code>select row_count() into insert_count;    
</code></pre>
<h3 id="标签对应"><a href="#标签对应" class="headerlink" title="标签对应"></a>标签对应</h3><pre><code>begin-end
if - endif;
</code></pre>
<h2 id="秒杀执行存储过程"><a href="#秒杀执行存储过程" class="headerlink" title="秒杀执行存储过程"></a>秒杀执行存储过程</h2><pre><code>DELIMITER $$ -- console ; 转换为 $$
-- 定义存储过程
-- 参数: in 输入参数; out 输出参数
-- row_count():返回上一条修改类型sql(delete,insert,update)的影响行数
-- row_count: 0:未修改数据; &gt;0:表示修改的行数; &lt;0:sql错误/未执行修改sql
--seckill表示数据库名字，execute_seckill表示存储过程名

CREATE PROCEDURE `seckill`.`execute_seckill`
  (in v_seckill_id bigint,in v_phone bigint,
    in v_kill_time timestamp,out r_result int)
  BEGIN
    DECLARE insert_count int DEFAULT 0;
    START TRANSACTION;
    insert ignore into success_killed
      (seckill_id,user_phone,create_time)
      values (v_seckill_id,v_phone,v_kill_time);
    select row_count() into insert_count;
    IF (insert_count = 0) THEN
      ROLLBACK;
      set r_result = -1;
    ELSEIF(insert_count &lt; 0) THEN
      ROLLBACK;
      SET R_RESULT = -2;
    ELSE
      update seckill
      set number = number-1
      where seckill_id = v_seckill_id
        and end_time &gt; v_kill_time
        and start_time &lt; v_kill_time
        and number &gt; 0;
      select row_count() into insert_count;
      IF (insert_count = 0) THEN
        ROLLBACK;
        set r_result = 0;
      ELSEIF (insert_count &lt; 0) THEN
        ROLLBACK;
        set r_result = -2;
      ELSE
        COMMIT;
        set r_result = 1;
      END IF;
    END IF;
  END;
$$
-- 存储过程定义结束

DELIMITER ;
--
set @r_result=-3;
-- 执行存储过程
call execute_seckill(1003,13502178891,now(),@r_result);
-- 获取结果
select @r_result;
</code></pre>
<h2 id="存储过程总结"><a href="#存储过程总结" class="headerlink" title="存储过程总结"></a>存储过程总结</h2><ul>
<li>存储过程优化：事务行级锁持有的时间</li>
<li>不要过度依赖存储过程</li>
<li>简单的逻辑可以应用存储过程</li>
<li> QPS: 一个秒杀单 6000/qps</li>
</ul>
<h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><ul>
<li>秒杀数据库的瓶颈主要在于，网络延迟和 GC（垃圾回收机制）</li>
</ul>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongo 相关</title>
    <url>/2021/05/28/14-Mongo%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/14.jpg"></p>
</span>

<span id="more"></span>

<h1 id="Windows-安装"><a href="#Windows-安装" class="headerlink" title="Windows 安装"></a>Windows 安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul>
<li><p>  选择对应 mysql 版本下载 <a href="https://www.mongodb.com/">Mysql</a></p>
</li>
<li><p>  搜索 64 位的版本进行下载      </p>
</li>
</ul>
<h2 id="解压与创建"><a href="#解压与创建" class="headerlink" title="解压与创建"></a>解压与创建</h2><ul>
<li><p>随意创建自己喜欢的路径，D:\JJDK\mongo</p>
</li>
<li><p>在 D:\JJDK\mongo 下解压下载的 zip 文件</p>
</li>
<li><p>然后分别建立 db,log 两个文件夹，log 下创建 log.log</p>
</li>
</ul>
<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><ul>
<li><p>cd D:\JJDK\mongo\bin</p>
</li>
<li><p>mongod –dbpath D:\JJDK\mongodb\data –logpath D:\JJDK\mongodb\log\log.log –logappend</p>
</li>
</ul>
<h2 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h2><ul>
<li>mongo   <figure class="highlight stata"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> admin </span><br><span class="line"><span class="keyword">db</span>.createUser({ user: <span class="string">"root"</span>, <span class="keyword">pwd</span>: <span class="string">"root"</span>, roles: [</span><br><span class="line">    { role:<span class="string">"userAdminAnyDatabase"</span>, <span class="keyword">db</span>: <span class="string">"admin"</span> },</span><br><span class="line">    { role:<span class="string">"dbAdminAnyDatabase"</span>, <span class="keyword">db</span>: <span class="string">"admin"</span> },</span><br><span class="line">    { role:<span class="string">"readWriteAnyDatabase"</span>, <span class="keyword">db</span>: <span class="string">"admin"</span> }</span><br><span class="line">] </span><br><span class="line">})</span><br><span class="line"><span class="keyword">use</span> juooo</span><br><span class="line"><span class="keyword">db</span>.auth(<span class="string">"root"</span>,<span class="string">"root"</span>);</span><br><span class="line"><span class="keyword">db</span>.createUser({ user: <span class="string">"root"</span>, <span class="keyword">pwd</span>: <span class="string">"root"</span>, roles: [{ role: <span class="string">"dbOwner"</span>, <span class="keyword">db</span>: <span class="string">"juooo"</span> }] })</span><br></pre></td></tr></tbody></table></figure></li>
<li>  创建用户密码，创建 admin 和 juooo 库</li>
</ul>
<h2 id="以auth启动"><a href="#以auth启动" class="headerlink" title="以auth启动"></a>以 auth 启动</h2><pre><code>D:\JJDK\mongo\bin\mongod.exe --dbpath D:\JJDK\mongo\data --logpath D:\JJDK\mongo\log\log.log --logappend --auth --service
</code></pre>
<h2 id="后台进程启动"><a href="#后台进程启动" class="headerlink" title="后台进程启动"></a>后台进程启动</h2><pre><code>sc create MongoDB binPath= "D:\JJDK\mongo\bin\mongod.exe --dbpath D:\JJDK\mongo\data --logpath D:\JJDK\mongo\log\log.log --logappend --auth --service"
sc delete MongoDB
</code></pre>
<h2 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h2><pre><code>--port=27017 --fork
</code></pre>
<h1 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux 安装</h1><h2 id="下载解压"><a href="#下载解压" class="headerlink" title="下载解压"></a>下载解压</h2><pre><code>wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-4.2.5.tgz
tar -zxvf mongodb-linux-x86_64-rhel70-4.2.5.tgz
mv mongodb-linux-x86_64-rhel70-4.2.5/ /usr/local/mongodb

mkdir  -p  /usr/local/mongodb/data
mkdir  -p  /usr/local/mongodb/logs

ln -s /usr/local/mongodb/bin/mongod mongod
ln -s /usr/local/mongodb/bin/mongo 
</code></pre>
<h2 id="启动并创建数据库"><a href="#启动并创建数据库" class="headerlink" title="启动并创建数据库"></a>启动并创建数据库</h2><blockquote>
<p>  参照 windows 创建数据库命令</p>
</blockquote>
<pre><code>usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data --logpath=/usr/local/mongodb/logs/log.log
</code></pre>
<h2 id="权限启动"><a href="#权限启动" class="headerlink" title="权限启动"></a>权限启动</h2><pre><code>nohup /usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data --logpath=/usr/local/mongodb/logs/log.log --auth --port=27017 --fork
</code></pre>
<h2 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h2><blockquote>
<p>  新增 sh 脚本放在根目录的 shell 下面 mongod_start.sh</p>
</blockquote>
<pre><code>#!/bin/bash
# pkill -9 mongod;
/usr/local/mongodb/bin/mongod --shutdown --dbpath /usr/local/mongodb/data/;
nohup /usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data --logpath=/usr/local/mongodb/logs/log.log --auth --port=27017 --fork &gt;  /tmp/mongod.log 2&gt;&amp;1 &amp; 
</code></pre>
<blockquote>
<p>  设置权限</p>
</blockquote>
<pre><code>chmod 777 mongod_start.sh
vim /etc/rc.d/rc.local
    文件后面追加 sh /shell/mongod_start.sh
chmod +x /etc/rc.d/rc.local        
    
</code></pre>
<h1 id="权限介绍"><a href="#权限介绍" class="headerlink" title="权限介绍"></a>权限介绍</h1><ul>
<li><p>数据库用户角色（Database User Roles）</p>
</li>
<li><ul>
<li>read：授予 User 只读数据的权限</li>
</ul>
</li>
<li><ul>
<li> readWrite：授予 User 读写数据的权限</li>
</ul>
</li>
<li><p>数据库管理角色（Database Administration Roles）：</p>
</li>
<li><ul>
<li>dbAdmin：在当前 dB 中执行管理操作</li>
</ul>
</li>
<li><ul>
<li> dbOwner：在当前 DB 中执行任意操作</li>
</ul>
</li>
<li><ul>
<li> userAdmin：在当前 DB 中管理 User</li>
</ul>
</li>
<li><p> 备份和还原角色（Backup and Restoration Roles）：</p>
</li>
<li><ul>
<li>backup</li>
</ul>
</li>
<li><ul>
<li>restore</li>
</ul>
</li>
<li><p> 跨库角色（All-Database Roles）：</p>
</li>
<li><ul>
<li>readAnyDatabase：授予在所有数据库上读取数据的权限</li>
</ul>
</li>
<li><ul>
<li> readWriteAnyDatabase：授予在所有数据库上读写数据的权限</li>
</ul>
</li>
<li><ul>
<li> userAdminAnyDatabase：授予在所有数据库上管理 User 的权限</li>
</ul>
</li>
<li><ul>
<li> dbAdminAnyDatabase：授予管理所有数据库的权限</li>
</ul>
</li>
<li><p>集群管理角色（Cluster Administration Roles）：</p>
</li>
<li><ul>
<li>clusterAdmin：授予管理集群的最高权限</li>
</ul>
</li>
<li><ul>
<li> clusterManager：授予管理和监控集群的权限，A user with this role can access the config and local databases, which are used in     sharding and replication, respectively.</li>
</ul>
</li>
<li><ul>
<li>clusterMonitor：授予监控集群的权限，对监控工具具有 readonly 的权限</li>
</ul>
</li>
<li><ul>
<li> hostManager：管理 Server</li>
</ul>
</li>
</ul>
<h1 id="SpringBoot整合Mongo"><a href="#SpringBoot整合Mongo" class="headerlink" title="SpringBoot整合Mongo"></a>SpringBoot 整合 Mongo</h1><blockquote>
<p>  pom.xml</p>
</blockquote>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<blockquote>
<p>application.yml</p>
</blockquote>
<pre><code>spring.data.mongodb.uri: mongodb://root:root@localhost:27017/juooo
</code></pre>
<blockquote>
<p>查询操作见日志</p>
</blockquote>
<ul>
<li><a href="https://blog.csdn.net/u011161786/article/details/71512952">springboot 使用 mongo 查询</a></li>
</ul>
<h1 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h1><ul>
<li>如果启动改不了就删除 log 文件</li>
<li>看看权限问题</li>
</ul>
]]></content>
      <categories>
        <category>Mongo</category>
      </categories>
      <tags>
        <tag>Mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro 相关</title>
    <url>/2021/05/28/15-Shiro%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/15.jpg"></p>
</span>

<span id="more"></span>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul>
<li>Shiro 是一款权限校验框架，可自定义配置角色权限</li>
</ul>
<h1 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h1><ul>
<li>  SimpleAccountRealm  普通数组形式</li>
<li>  IniRealm            文件配置形式</li>
<li>  JdbcRealm           数据库配置</li>
<li>  自定义 extends AuthorizingRealm </li>
</ul>
<figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">public void test<span class="constructor">Acthentication()</span>{</span><br><span class="line">    <span class="comment">//创建SecurityManager shiro环境</span></span><br><span class="line">    DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> <span class="constructor">DefaultSecurityManager()</span>;</span><br><span class="line">    defaultSecurityManager.set<span class="constructor">Realm(<span class="params">simpleAccountRealm</span>)</span>; #上方的四个Realm</span><br><span class="line">    <span class="comment">//主体认证请求</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">SecurityUtils</span>.</span></span>set<span class="constructor">SecurityManager(<span class="params">defaultSecurityManager</span>)</span>;</span><br><span class="line">    Subject subject = <span class="module-access"><span class="module"><span class="identifier">SecurityUtils</span>.</span></span>get<span class="constructor">Subject()</span>;</span><br><span class="line">    UsernamePasswordToken token = <span class="keyword">new</span> <span class="constructor">UsernamePasswordToken(<span class="string">"mask"</span>,<span class="string">"123456"</span>)</span>;</span><br><span class="line">    subject.login(token);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"isfalse:"</span>+subject.is<span class="constructor">Authenticated()</span>);</span><br><span class="line">    subject.check<span class="constructor">Role(<span class="string">"admin"</span>)</span>;</span><br><span class="line">    <span class="comment">//subject.logout();</span></span><br><span class="line">    <span class="comment">//System.out.println("isfalse:"+subject.isAuthenticated());</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="整合spring"><a href="#整合spring" class="headerlink" title="整合spring"></a>整合 spring</h1><h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h2><pre><code> &lt;filter&gt;
    &lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;
    &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;
&lt;/filter&gt;

&lt;filter-mapping&gt;
    &lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
</code></pre>
<h2 id="spring-xml"><a href="#spring-xml" class="headerlink" title="spring.xml"></a>spring.xml</h2><pre><code>&lt;!--定义ShiroFilterFactoryBean--&gt; 
&lt;bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean"&gt;
    &lt;property name="securityManager" ref="securityManager"&gt;&lt;/property&gt;
    &lt;property name="loginUrl" value="login.html"&gt;&lt;/property&gt;
    &lt;property name="unauthorizedUrl" value="403.html"&gt;&lt;/property&gt;
    &lt;property name="filterChainDefinitions"&gt;
        &lt;value&gt;
            /login.html = anon
            /test = anon
            /test.do = anon
            /testRoles = roles["admin","admin1"]
            /testRoles1 = rolesOr["admin","admin1"]
            /subLogin = anon
            /* = authc
        &lt;/value&gt;
    &lt;/property&gt;
    &lt;property name="filters"&gt;
        &lt;map&gt;
            &lt;entry key="rolesOr" value-ref="rolesOrFilter" /&gt;
        &lt;/map&gt;
    &lt;/property&gt;
&lt;/bean&gt;
&lt;!--定义securityManager--&gt;
&lt;bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager"&gt;
    &lt;property name="realm" ref="realm"&gt;&lt;/property&gt;
&lt;/bean&gt;
&lt;!--自定义realm--&gt;
&lt;bean id="realm" class="natapp.liujinliang.realm.CustomRealm"&gt;
    &lt;property name="credentialsMatcher" ref="credentialsMatcher" &gt;&lt;/property&gt;
&lt;/bean&gt;
&lt;!--设置加密--&gt;
&lt;bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher"&gt;
    &lt;property name="hashAlgorithmName" value="md5" /&gt;
    &lt;property name="hashIterations" value="1" /&gt;
&lt;/bean&gt;

&lt;!-- 自定义filter  继承extends AuthorizationFilter --&gt;
&lt;bean id="rolesOrFilter" class="natapp.liujinliang.filter.RolesOrFilter" /&gt;
</code></pre>
<h2 id="RolesOrFilter类"><a href="#RolesOrFilter类" class="headerlink" title="RolesOrFilter类"></a>RolesOrFilter 类</h2><pre><code>public class RolesOrFilter extends AuthorizationFilter {
    @Override
    protected boolean isAccessAllowed(ServletRequest req,ServletResponse resp, Object object) throws Exception {
        Subject subject = getSubject(req, resp);
        String[] roles = (String[]) object;
        if (roles == null || roles.length == 0) {
            return true;
        }
        for (String role : roles) {
            if (subject.hasRole(role)) {
                return true;
            }
        }
        return false;
    }
}
</code></pre>
<h2 id="判断登录"><a href="#判断登录" class="headerlink" title="判断登录"></a>判断登录</h2><pre><code>public String subLogin(User user) {
    Subject subject = SecurityUtils.getSubject();
    UsernamePasswordToken token = new UsernamePasswordToken(user.getUsername(), user.getPassword());
    try {
        subject.login(token);
    } catch (Exception e) {
        return e.getMessage();
    }    
    // 编码方式判断是否具有管理员身份
    if (subject.hasRole("admin")) {
        return "有admin权限";
    }
    return "无admin权限";
}
</code></pre>
<h2 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h2><pre><code>@RequiresPermissions("xxxx")#要求权限
@RequiresRoles("admin")；#要求admin的角色
</code></pre>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre><code>        &lt;dependency&gt;
            &lt;groupId&gt;org.aspectj&lt;/groupId&gt;
            &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;
            &lt;version&gt;1.8.9&lt;/version&gt;
        &lt;/dependency&gt;
</code></pre>
<h3 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h3><pre><code>&lt;!-- 开启AoP --&gt;
&lt;aop:config proxy-target-class="true"/&gt;
&lt;!-- 保证 Shiro内部生命周期 --&gt;
&lt;bean class="org.apache.shiro.spring.LifecycleBeanPostProcessor"&gt;&lt;/bean&gt;
&lt;!-- 开启Shiro授权生效 --&gt;
&lt;bean id="" class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"&gt;&lt;/bean&gt;    
</code></pre>
<h2 id="shiro-过滤器"><a href="#shiro-过滤器" class="headerlink" title="shiro-过滤器"></a>shiro - 过滤器</h2><pre><code>    anno （不需要认证）, authBasic,authc（需要认证）, user（存在用户）,logout
    perms（具备权限）,roles（具备角色）,ssl,port
</code></pre>
<h2 id="redis实现session共享"><a href="#redis实现session共享" class="headerlink" title="redis实现session共享"></a>redis 实现 session 共享</h2><blockquote>
<p>序列化和反序列化</p>
</blockquote>
<pre><code>SerializationUtils.serialize();//序列化
SerializationUtils.deserialize();//反序列化
        
</code></pre>
<blockquote>
<p>集合工具类</p>
</blockquote>
<pre><code>CollectionUtils.isEmpty();    
        
</code></pre>
<blockquote>
<p>创建类 重写 extend AbstractSessionDao    (com.imooc.session.SessionDao)</p>
</blockquote>
<pre><code>#doCreate的时候记得要捆绑sessionId
    assignSessionId(sessionId,session);
#spring.xml
    &lt;bean class="org.apache.shiro.session.mgt.DefaultWebSessionManager" id="sessionManager"&gt;
        &lt;property name="sessionDao" ref="sessionDao"&gt;
    &lt;/bean&gt;
    &lt;bean class="com.imooc.session.SessionDao" id="sessionDao"/&gt;

    &lt;bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager"&gt;
        &lt;property name="realm" ref="realm"/&gt;
        &lt;property name="sessionManager" ref="sessionManager"/&gt;
    &lt;/bean&gt;    
    
</code></pre>
<h3 id="换成自定义sessionManager"><a href="#换成自定义sessionManager" class="headerlink" title="换成自定义sessionManager"></a>换成自定义 sessionManager</h3><blockquote>
<p>spring.xml</p>
</blockquote>
<pre><code>&lt;bean class="com.imooc.session.CustomSessionManager" id="sessionManager"&gt;
    &lt;property name="sessionDao" ref="sessionDao"&gt;
&lt;/bean&gt;
</code></pre>
<h3 id="访问多次redis改造"><a href="#访问多次redis改造" class="headerlink" title="访问多次redis改造"></a>访问多次 redis 改造</h3><blockquote>
<p>继承 DefaultWebSessionManager | 重写 retrieveSession | 存在 request 中</p>
</blockquote>
<pre><code>    ServlertRequest request =null;
    if(sessionKey instanceof WebSessionKey){
        request = ((WebsessionKKey)sessionKey).getServletRequest();     
    }
                    
</code></pre>
<h2 id="shiro缓存管理"><a href="#shiro缓存管理" class="headerlink" title="shiro缓存管理"></a>shiro 缓存管理</h2><blockquote>
<p>角色什么的存在 redis</p>
</blockquote>
<pre><code>CacheManager Cache
//返回cache实例
class RedisCacheManager implements CacheManager        
{
    return RedisCache();
}

//重写cahce实例
class RedisCache implement Cache&lt;K,V&gt;    {
    get
    put
    remove
    ....
}
</code></pre>
<h3 id="spring-xml-1"><a href="#spring-xml-1" class="headerlink" title="spring.xml"></a>spring.xml</h3><pre><code>&lt;bean class="com.imooc.cache.RedisCacheManager" id="cacheManager"/&gt;
        
&lt;bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager"&gt;
    &lt;property name="realm" ref="realm"/&gt;
    &lt;property name="sessionManager" ref="sessionManager"/&gt;
    &lt;property name="cacheManager" ref="cacheManager"/&gt;
&lt;/bean&gt;
        
</code></pre>
<h2 id="shiro记住我"><a href="#shiro记住我" class="headerlink" title="shiro记住我"></a>shiro 记住我</h2><blockquote>
<p>cookie | Spring.xml</p>
</blockquote>
<pre><code>&lt;bean class="org.apache.shiro.web.mgt.CooikeRememberManager" id="CooikeRememberManager"&gt;
    &lt;property name="cooike" ref="cooike"/&gt;
&lt;/bean&gt;
&lt;bean class="org.apache.shiro.web.servlet.SimpleCooike" id="cooike"&gt;
    &lt;constructor-arg value="rememberMe"/&gt;&lt;!--构造前台传的参数--&gt;
    &lt;property name="maxAge" value="30000S"/&gt;
&lt;/bean&gt;
&lt;!--注入到securityManager--&gt;
&lt;bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager"&gt;
    &lt;property name="realm" ref="realm"/&gt;
    &lt;property name="sessionManager" ref="sessionManager"/&gt;
    &lt;property name="cacheManager" ref="cacheManager"/&gt;
    &lt;property name="rememberManager" ref="CooikeRememberManager"/&gt;
&lt;/bean&gt;
</code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 启动方式</title>
    <url>/2021/05/28/16-SpringBoot%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/16.jpg"></p>
</span>

<span id="more"></span>

<h1 id="手动打包"><a href="#手动打包" class="headerlink" title="手动打包"></a>手动打包</h1><blockquote>
<p>jar 包默认</p>
</blockquote>
<pre><code>mvn clean package -Dmaven.test.skip=true
</code></pre>
<blockquote>
<p>运行 war 包</p>
</blockquote>
<ul>
<li>运行命令 </li>
<li><ul>
<li>mvn clean package -Dmaven.test.skip=true</li>
</ul>
</li>
<li> 拷贝 war 包至 web 服务器 tomcat 的 webapps 中</li>
<li>将 war 包名称修改为 ROOT.war</li>
<li> 启动 tomcat </li>
<li><ul>
<li>%TOMCAT_HOME%/bin/startup.bat</li>
</ul>
</li>
</ul>
<h1 id="idea-启动"><a href="#idea-启动" class="headerlink" title="idea 启动"></a>idea 启动</h1><ul>
<li><p>idea 直接启动入口文件</p>
</li>
<li><p>进入目录，输出 mvn spring-boot:run</p>
</li>
<li><p>进入目录:mvn -install </p>
</li>
<li><ul>
<li>进入 target 执行 java -jar xxx.jar -spring.profiles.active=dev;</li>
</ul>
</li>
</ul>
<h1 id="LINUX上tomcat启动"><a href="#LINUX上tomcat启动" class="headerlink" title="LINUX上tomcat启动"></a>LINUX 上 tomcat 启动</h1><h2 id="jar"><a href="#jar" class="headerlink" title="jar"></a>jar</h2><ul>
<li><p><a href="https://www.cnblogs.com/ysocean/p/6893446.html">以正常项目启动</a></p>
</li>
<li><p> java -jar XXX.jar</p>
</li>
<li><ul>
<li>这是最基本的 jar 包执行方式，但是当我们用 ctrl+c 中断或者关闭窗口时，程序也会中断执行。</li>
</ul>
</li>
</ul>
<h2 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h2><ul>
<li><p>java -jar XXX.jar &amp;</p>
</li>
<li><p>&amp; 代表在后台运行，使用 ctrl+c 不会中断程序的运行，但是关闭窗口会中断程序的运行。</p>
</li>
</ul>
<h2 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h2><ul>
<li><p>nohup java -jar XXX.jar &amp;</p>
</li>
<li><p>使用这种方式运行的程序日志会输出到当前目录下的 nohup.out 文件，使用 ctrl+c 中断或者关闭窗口都不会中断程序的执行。</p>
</li>
</ul>
<h2 id="gt"><a href="#gt" class="headerlink" title=">"></a>&gt;</h2><ul>
<li><p>nohup java -jar XXX.jar &gt;temp.out &amp;</p>
</li>
<li><p>temp.out 的意思是将日志输出重定向到 temp.out 文件，使用 ctrl+c 中断或者关闭窗口都不会中断程序的执行。</p>
</li>
</ul>
<h2 id="增加外部配置"><a href="#增加外部配置" class="headerlink" title="增加外部配置"></a>增加外部配置</h2><figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line">--spring.config.location=E:\config\application-order.yml</span><br></pre></td></tr></tbody></table></figure>







]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 整合整理</title>
    <url>/2021/05/28/17-SpringBoot%E6%95%B4%E5%90%88%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/17.jpg"></p>
</span>

<span id="more"></span>

<h1 id="静态文件配置项"><a href="#静态文件配置项" class="headerlink" title="静态文件配置项"></a>静态文件配置项</h1><pre><code>spring.mvc.static-path-pattern=/static/**
</code></pre>
<h1 id="jackson使用"><a href="#jackson使用" class="headerlink" title="jackson使用"></a>jackson 使用</h1><pre><code>实体类里面：
@JsonIgnore -字段忽略
@JsonFormat(pattern="yyyy-MM-dd hh:mm:ss a",locale="zh",timezone="GMT+8")//格式化时间
@JsonInclude(Include.NON_NULL)//有值的时候显示，没有值不显示
</code></pre>
<h1 id="spring-boot-热部署"><a href="#spring-boot-热部署" class="headerlink" title="spring-boot 热部署"></a>spring-boot 热部署</h1><ul>
<li>devtools 可以实现页面热部署</li>
<li><ul>
<li>即页面修改后会立即生效，这个可以直接在 application.properties 文件中配置 spring.thymeleaf.cache=false 来实现</li>
</ul>
</li>
<li>实现类文件热部署（类文件修改后不会立即生效），实现对属性文件的热部署。</li>
<li><ul>
<li>即 devtools 会监听 classpath 下的文件变动，并且会立即重启应用（发生在保存时机）</li>
</ul>
</li>
<li><ul>
<li>注意：因为其采用的虚拟机机制，该项重启是很快的</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>（1）base classloader （Base 类加载器）：加载不改变的 Class，例如：第三方提供的 jar 包</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>（2）restart classloader（Restart 类加载器）：加载正在开发的 Class</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li> 为什么重启很快，因为重启的时候只是加载了在开发的 Class，没有重新加载第三方的 jar 包。</li>
</ul>
</li>
</ul>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;
    &lt;!-- optional=true, 依赖不会传递, 该项目依赖devtools; 
        之后依赖boot项目的项目如果想要使用devtools, 需要重新引入 --&gt;
    &lt;optional&gt;true&lt;/optional&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="模板开启热部署"><a href="#模板开启热部署" class="headerlink" title="模板开启热部署"></a>模板开启热部署</h2><pre><code>spring.freemarker.cache=false
spring.thymeleaf.cache=true
</code></pre>
<h2 id="开启监听"><a href="#开启监听" class="headerlink" title="开启监听"></a>开启监听</h2><pre><code>spring.devtools.restart.enabled=true
</code></pre>
<h2 id="监听源"><a href="#监听源" class="headerlink" title="监听源"></a>监听源</h2><pre><code>spring.devtools.restart.additional-paths=src/main/java
</code></pre>
<h2 id="监听mybatis"><a href="#监听mybatis" class="headerlink" title="监听mybatis"></a>监听 mybatis</h2><pre><code>restart.include.mapper=/mapper-[\\w-\\.]+jar
restart.include.pagehelper=/pagehelper-[\\w-\\.]+jar
</code></pre>
<h2 id="排除某些文件"><a href="#排除某些文件" class="headerlink" title="排除某些文件"></a>排除某些文件</h2><pre><code>spring.devtools.restart.exclude=static/**,public/**
spring.devtools.restart.exclude=WEB-INF/**
</code></pre>
<h1 id="加载-properties文件"><a href="#加载-properties文件" class="headerlink" title="加载.properties文件"></a>加载.properties 文件</h1><pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;
    &lt;optional&gt;true&lt;/optional&gt;
&lt;/dependency&gt;

jdbc.properties
    mysql.jdbc.driver = "com.mysql.jdbc.driver"
    mysql.jdbc.url = "com.mysql.jdbc.driver"
    mysql.jdbc.user = "com.mysql.jdbc.driver"
    mysql.jdbc.password = "com.mysql.jdbc.driver"

@Configuration
@ConfigurationProperties(prefix="cmysql.jdbc")
@PropertySource(value="classpath:jdbc.properties")
public class Resource{
    private string driver
    private string url
    private string user
    private string password
}
</code></pre>
<h1 id="tomcat修改"><a href="#tomcat修改" class="headerlink" title="tomcat修改"></a>tomcat 修改</h1><pre><code>server.session-timeout=60
server.port=8088
server.error.path=/error
server.context-path=/IMooc
server.address=192.168.1.2
server.tomcat.uri-encoding=UTF-8
</code></pre>
<h1 id="加载freemarker模板引擎"><a href="#加载freemarker模板引擎" class="headerlink" title="加载freemarker模板引擎"></a>加载 freemarker 模板引擎</h1><pre><code>#加入依赖
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt;
&lt;/dependency&gt;
#开启指定根目录
spring.freemarker.template-loader-path=classpath:/templates
# 关闭缓存
spring.freemarker.cache=false
spring.freemarker.charset=UTF-8
spring.freemarker.check-template-location=true
spring.freemarker.content-type=text/html
spring.freemarker.expose-request-attributes=true
spring.freemarker.expose-session-attributes=true
spring.freemarker.request-context-attribute=request
spring.freemarker.suffix=.ftl
</code></pre>
<h1 id="加载-thymeleaf-模板"><a href="#加载-thymeleaf-模板" class="headerlink" title="加载 thymeleaf 模板"></a>加载 thymeleaf 模板</h1><pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;
&lt;/dependency&gt;
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML5
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.servlet.content-type=text/html
#开启/关闭缓存
spring.thymeleaf.cache=false
</code></pre>
<h1 id="thymeleaf-常用标签使用方法"><a href="#thymeleaf-常用标签使用方法" class="headerlink" title="thymeleaf 常用标签使用方法"></a>thymeleaf 常用标签使用方法</h1><pre><code>条件判断:th:if    th:unless 
循环：th:each     th:switch

#text与utext text 是原封不动显示，utext可以解析成html
#th:href = "@{http://www.baidu.com}"  
    th:href="@{/Controller/behavior(parentId=${menuBean.id},type=${type})}" 多参数以？的形式
    th:href="@{/menu/{type}/{parentId}/menusEdit.do(parentId=${menuBean.id},type=${type})}" 多参数以/xx/2/3/xx的形式
#th:src = "@{/static/js/test.js}"#需要指定静态文件位置
#form表单
    th:object和*{name} 等同于   ${user.name}
    th:adtion="@{/th/postfrom}" th:object="${user}" th:method="post"
    input  th:field="*{name}" #value
#if判断    
th:if="${user.age} == 18"等于
th:if="${user.age} gt 18"大于
th:if="${user.age} lt 18"小于
th:if="${user.age} ge 18"大等于
th:if="${user.age} le 18"小等于
#选择下拉框框
th:selected ="${user.age} eq 18" 
#th:each
    th:each="person:${userList}"
        th:text="${person.name}"
        th:text="${person.age}"
        th:text="${#data.format(user.birthday,"yyyy-MM-dd hh:mm:ss")}"
#th:switch
        th:switch="${user.name}"
            th:case="Lee"
            th:case="Lee"
            th:case="*"
#页面读取i18n配置文件数据
    #application.properties
        spring.messages.basename=i18n/messages
        spring.messages.cache-seconds=3600
        spring.messages.encoding=UTF-8
    /resources/i18n/messages.properties
        roles.manager=manager
        roles.superadmin=superadmin
    页面引用
        th:case="#{roles.manager}"
</code></pre>
<h1 id="springBoot配置全局异常捕获"><a href="#springBoot配置全局异常捕获" class="headerlink" title="springBoot配置全局异常捕获"></a>springBoot 配置全局异常捕获</h1><pre><code>1.加一个异常类
    @ControllerAdvice
2异常方法接收异常并且传入异常    
    @ExceptionHandler(value = Exception.class)
3.判断是不是ajax
    public static boolean isAjax(HttpServletRequest httpRequest){
        return  (httpRequest.getHeader("X-Requested-With") != null  
                    &amp;&amp; "XMLHttpRequest"
                        .equals( httpRequest.getHeader("X-Requested-With").toString()) );
    }    
    
</code></pre>
<h1 id="SpringBoot-整合mybatis"><a href="#SpringBoot-整合mybatis" class="headerlink" title="SpringBoot 整合mybatis"></a>SpringBoot 整合 mybatis</h1><pre><code>&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
    &lt;artifactId&gt;druid&lt;/artifactId&gt;
    &lt;version&gt;1.1.10&lt;/version&gt;
&lt;/dependency&gt; 
&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
    &lt;version&gt;5.1.44&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;
    &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;2.0.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;
    &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt; 1.2.5&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;1.1.10&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;
    &lt;version&gt;1.3.6&lt;/version&gt;
&lt;/dependency&gt;
############################################################
#
# 配置阿里数据源
#
############################################################
spring.datasource.url=jdbc:mysql://localhost:3306/leecx
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.druid.initial-size=1
spring.datasource.druid.min-idle=1
spring.datasource.druid.max-active=20
spring.datasource.druid.test-on-borrow=true
spring.datasource.druid.stat-view-servlet.allow=true
############################################################
#
# mybatis 配置
#
############################################################
# mybatis 配置
mybatis.type-aliases-package=com.imooc.pojo
mybatis.mapper-locations=classpath:mapper/*.xml
#通用mapper配置
mapper.mappers=com.imooc.utils.MyMapper
mapper.not-empty=false
mapper.identity=MYSQL
# 分页插件配置
pagehelper.helperDialect=mysql
pagehelper.reasonable=true
pagehelper.supportMethodsArguments=true
pagehelper.params=count=countSql
</code></pre>
<h1 id="使用gen自动生成代码"><a href="#使用gen自动生成代码" class="headerlink" title="使用gen自动生成代码"></a>使用 gen 自动生成代码</h1><pre><code>（1）创建generatorConfig.xml
    &lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;!DOCTYPE generatorConfiguration
            PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
            "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;
    &lt;generatorConfiguration&gt;
        &lt;context id="MysqlContext" targetRuntime="MyBatis3Simple" defaultModelType="flat"&gt;
            &lt;property name="beginningDelimiter" value="`"/&gt;
            &lt;property name="endingDelimiter" value="`"/&gt;

            &lt;plugin type="tk.mybatis.mapper.generator.MapperPlugin"&gt;
                &lt;property name="mappers" value="com.imooc.utils.MyMapper"/&gt;
            &lt;/plugin&gt;

            &lt;jdbcConnection driverClass="com.mysql.jdbc.Driver"
                            connectionURL="jdbc:mysql://localhost:3306/leecx"
                            userId="root"
                            password="root"&gt;
            &lt;/jdbcConnection&gt;

            &lt;!-- 对于生成的pojo所在包 --&gt;
            &lt;javaModelGenerator targetPackage="com.imooc.pojo" targetProject="src/main/java"/&gt;

            &lt;!-- 对于生成的mapper所在目录 --&gt;
            &lt;sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources"/&gt;

            &lt;!-- 配置mapper对应的java映射 --&gt;
            &lt;javaClientGenerator targetPackage="com.imooc.mapper" targetProject="src/main/java"
                                 type="XMLMAPPER"/&gt;

            &lt;table tableName="sys_user"&gt;&lt;/table&gt;
             
        &lt;/context&gt;
    &lt;/generatorConfiguration&gt;
（2） 使用mvn创建 创建插件-然后双击运行-
      使用代码：
        public void generator() throws Exception{
            List&lt;String&gt; warnings = new ArrayList&lt;String&gt;();
            boolean overwrite = true;
            //指定 逆向工程配置文件
            File configFile = new File("generatorConfig.xml"); 
            ConfigurationParser cp = new ConfigurationParser(warnings);
            Configuration config = cp.parseConfiguration(configFile);
            DefaultShellCallback callback = new DefaultShellCallback(overwrite);
            MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config,
                    callback, warnings);
            myBatisGenerator.generate(null);
        } 
        public static void main(String[] args) throws Exception {
            try {
                GeneratorDisplay generatorSqlmap = new GeneratorDisplay();
                generatorSqlmap.generator();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        
</code></pre>
<h1 id="pageHelper-使用方法"><a href="#pageHelper-使用方法" class="headerlink" title="pageHelper 使用方法"></a>pageHelper 使用方法</h1><pre><code>// 开始分页
PageHelper.startPage(page, pageSize);自动拦截并分页    
            
</code></pre>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><pre><code>1、增删改
@Transactional(propagation=Propagation.REQUIRED 
2、查
@Transactional(propagation=Propagation.SUPPORTS      
</code></pre>
<h1 id="引入redis"><a href="#引入redis" class="headerlink" title="引入redis"></a>引入 redis</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><pre><code># Redis\数据库索引，默认0
spring.redis.database=1
# Redis服务器地址
spring.redis.host=192.168.1.191
# Redis端口
spring.redis.port=6379
# Redis密码
spring.redis.password=
# 连接池最大连接数，-1表示无限制
spring.redis.pool.max-active=1000
# 连接池阻塞最大等待时间
spring.redis.pool.max-wait=-1
#最大空闲连接数
spring.redis.pool.max-idle=10
# 最小空闲连接数
spring.redis.pool.min-idle=2
# 连接超时时间（毫秒）
spring.redis.timeout=0
</code></pre>
<h2 id="引入类"><a href="#引入类" class="headerlink" title="引入类"></a>引入类</h2><pre><code>@Autowired
private StringRedisTemplate stringRedisTemplate;
#直接存字符串
stringRedisTemplate.opsForValue().set("imooc","范德萨范德萨");
#存json字符串
Map&lt;String,Object&gt; map = new HashMap&lt;String, Object&gt;();
map.put("id","1");
map.put("name","小明");
JSONObject s = JSONObject.fromObject(map);
stringRedisTemplate.opsForValue().set("json:user",s.toString());
String m = stringRedisTemplate.opsForValue().get("json:user");
JSONObject obj =JSONObject.fromObject(m);
System.out.println(obj.getInt("id"));
</code></pre>
<h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><pre><code>@Component
public class RedisOperator {
    @Autowired
    private StringRedisTemplate redisTemplate;
    // Key（键），简单的key-value操作
    /**
     * 实现命令：TTL key，以秒为单位，返回给定 key的剩余生存时间(TTL, time to live)。
     * 
     * @param key
     * @return
     */
    public long ttl(String key) {
        return redisTemplate.getExpire(key);
    }
    /**
     * 实现命令：expire 设置过期时间，单位秒
     * 
     * @param key
     * @return
     */
    public void expire(String key, long timeout) {
        redisTemplate.expire(key, timeout, TimeUnit.SECONDS);
    }
    /**
     * 实现命令：INCR key，增加key一次
     * 
     * @param key
     * @return
     */
    public long incr(String key, long delta) {
        return redisTemplate.opsForValue().increment(key, delta);
    }
    /**
     * 实现命令：KEYS pattern，查找所有符合给定模式 pattern的 key
     */
    public Set&lt;String&gt; keys(String pattern) {
        return redisTemplate.keys(pattern);
    }
    /**
     * 实现命令：DEL key，删除一个key
     * 
     * @param key
     */
    public void del(String key) {
        redisTemplate.delete(key);
    }
    // String（字符串）
    /**
     * 实现命令：SET key value，设置一个key-value（将字符串值 value关联到 key）
     * 
     * @param key
     * @param value
     */
    public void set(String key, String value) {
        redisTemplate.opsForValue().set(key, value);
    }
    /**
     * 实现命令：SET key value EX seconds，设置key-value和超时时间（秒）
     * 
     * @param key
     * @param value
     * @param timeout
     *            （以秒为单位）
     */
    public void set(String key, String value, long timeout) {
        redisTemplate.opsForValue().set(key, value, timeout, TimeUnit.SECONDS);
    }
    /**
     * 实现命令：GET key，返回 key所关联的字符串值。
     * 
     * @param key
     * @return value
     */
    public String get(String key) {
        return (String)redisTemplate.opsForValue().get(key);
    }
    // Hash（哈希表）
    /**
     * 实现命令：HSET key field value，将哈希表 key中的域 field的值设为 value
     * 
     * @param key
     * @param field
     * @param value
     */
    public void hset(String key, String field, Object value) {
        redisTemplate.opsForHash().put(key, field, value);
    }
    /**
     * 实现命令：HGET key field，返回哈希表 key中给定域 field的值
     * 
     * @param key
     * @param field
     * @return
     */
    public String hget(String key, String field) {
        return (String) redisTemplate.opsForHash().get(key, field);
    }
    /**
     * 实现命令：HDEL key field [field ...]，删除哈希表 key 中的一个或多个指定域，不存在的域将被忽略。
     * 
     * @param key
     * @param fields
     */
    public void hdel(String key, Object... fields) {
        redisTemplate.opsForHash().delete(key, fields);
    }
    /**
     * 实现命令：HGETALL key，返回哈希表 key中，所有的域和值。
     * 
     * @param key
     * @return
     */
    public Map&lt;Object, Object&gt; hgetall(String key) {
        return redisTemplate.opsForHash().entries(key);
    }
    // List（列表）
    /**
     * 实现命令：LPUSH key value，将一个值 value插入到列表 key的表头
     * 
     * @param key
     * @param value
     * @return 执行 LPUSH命令后，列表的长度。
     */
    public long lpush(String key, String value) {
        return redisTemplate.opsForList().leftPush(key, value);
    }
    /**
     * 实现命令：LPOP key，移除并返回列表 key的头元素。
     * 
     * @param key
     * @return 列表key的头元素。
     */
    public String lpop(String key) {
        return (String)redisTemplate.opsForList().leftPop(key);
    }
    /**
     * 实现命令：RPUSH key value，将一个值 value插入到列表 key的表尾(最右边)。
     * 
     * @param key
     * @param value
     * @return 执行 LPUSH命令后，列表的长度。
     */
    public long rpush(String key, String value) {
        return redisTemplate.opsForList().rightPush(key, value);
    }
}
</code></pre>
<h1 id="任务TASK"><a href="#任务TASK" class="headerlink" title="任务TASK"></a>任务 TASK</h1><pre><code>使用注解@EnableScheduling开启定时任务
    #放在springboot启动文件上面

定义@Component作为组件被容器扫描
    private static final SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
    
    @Scheduled(fixedRate = 3000)#定义每过3秒执行任务
    @Scheduled(cron = "4-40 * * * * ?")#corn表达式
    public void task(){
        System.out.println("现在的时间"+dataformat.format(new Date()));
    }
    
</code></pre>
<h1 id="spring执行异步任务"><a href="#spring执行异步任务" class="headerlink" title="spring执行异步任务"></a>spring 执行异步任务</h1><pre><code>使用注解@EnableAsync开启异步任务
    #放在springboot启动文件上面
@Async 注解在方法上。不注解就是同步任务
示例------
@Async
public Future&lt;Boolean&gt; doTask11() throws Exception {
    long start = System.currentTimeMillis();
    Thread.sleep(1000);
    long end = System.currentTimeMillis();
    System.out.println("任务1耗时:" + (end - start) + "毫秒");
    return new AsyncResult&lt;&gt;(true);
}    
</code></pre>
<h1 id="spring-boot-拦截器"><a href="#spring-boot-拦截器" class="headerlink" title="spring-boot 拦截器"></a>spring-boot 拦截器</h1><pre><code>使用注解@Configuration配置拦截器
继承WebMvcConfigurerAdapter
重写addInterceptors添加需要的拦截器地址

@Configuration
public class WebMvcConfigurer extends WebMvcConfigurerAdapter {
    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        /**
         * 拦截器按照顺序执行
         */
        registry.addInterceptor(new TwoInterceptor()).addPathPatterns("/two/**")
                                                     .addPathPatterns("/one/**");
        registry.addInterceptor(new OneInterceptor()).addPathPatterns("/one/**");
        
        super.addInterceptors(registry);
    }
}
OneInterceptor，TwoInterceptor 是实现 HandlerInterceptor 接口的里面的方法，实现具体的代码
</code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>springMvc 参数绑定</title>
    <url>/2021/05/28/18-SpringMVC%E5%8F%82%E6%95%B0%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/18.jpg"></p>
</span>

<span id="more"></span>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="多实体含有同属性"><a href="#多实体含有同属性" class="headerlink" title="多实体含有同属性"></a>多实体含有同属性</h2><blockquote>
<p> 比如都含有 name</p>
</blockquote>
<pre><code>http://localhost:8080/springmvc/object.do?user.name=Tom&amp;admin.name=Lucy&amp;age=10 
@InitBinder("user")
public void initUser(WebDataBinder binder){
    binder.setFieldDefaultPrefix("user.");
}
@InitBinder("admin")
public void initAdmin(WebDataBinder binder){
    binder.setFieldDefaultPrefix("admin.");
}
</code></pre>
<h2 id="List绑定"><a href="#List绑定" class="headerlink" title="List绑定"></a>List 绑定</h2><pre><code>不能直接使用
public void xx(List&lt;User&gt; user){

}
应该建一个数据收集类
public class UserListFrom(){
    private List&lt;User&gt; users
    get set 方法
}
#mvc绑定list
public void xx(UserListFrom user){

}
</code></pre>
<h2 id="Set-绑定"><a href="#Set-绑定" class="headerlink" title="Set 绑定"></a>Set 绑定</h2><pre><code>类需要定义Set的大小        
public class UserSetForm(){
    private Set&lt;User&gt; users
    private UserSetForm(){ //有几个就定义几个Set
        users = new LinkedHashSet();
        users.add(new User);
        users.add(new User);
    }
    get set 方法
}

#mvc绑定Set
public void xx(UserSetForm user){

}
</code></pre>
<h2 id="Map-绑定"><a href="#Map-绑定" class="headerlink" title="Map 绑定"></a>Map 绑定</h2><ul>
<li>同上</li>
</ul>
<h2 id="json绑定"><a href="#json绑定" class="headerlink" title="json绑定"></a>json 绑定</h2><ul>
<li>@RequestBody</li>
</ul>
<h2 id="xml绑定"><a href="#xml绑定" class="headerlink" title="xml绑定"></a>xml 绑定</h2><ul>
<li>需要 spring-oxm 依赖</li>
<li>控制器 @RequestBody   </li>
<li>实体类   </li>
<li><ul>
<li>根节点 @XmlRootElement (name=”user”)</li>
</ul>
</li>
<li><ul>
<li> 子节点 @XmlElement (name=”name”)    </li>
</ul>
</li>
<li><ul>
<li>子节点 @XmlElement (name=”age”)    </li>
</ul>
</li>
</ul>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><ul>
<li>resf 风格 @ - /hello/100/say </li>
</ul>
<figure class="highlight less"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">@RequestMapping</span>(value = <span class="string">"/{id}/say"</span>,method = RequestMethod.GET)</span><br><span class="line">public String say(<span class="variable">@PathVariable</span>(<span class="string">"id"</span>) int id ){</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">String</span><span class="selector-class">.valueOf</span>(id);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>普通传参 -    /hello/say?id=100</li>
</ul>
<figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">@<span class="constructor">RequestMapping(<span class="params">value</span> = <span class="string">"/say"</span>,<span class="params">method</span> = RequestMethod.GET)</span></span><br><span class="line">public String say(@<span class="constructor">RequestParam(<span class="params">value</span> = <span class="string">"id"</span>,<span class="params">required</span> = <span class="params">false</span> ,<span class="params">defaultValue</span> = <span class="string">"0"</span>)</span> <span class="built_in">int</span> id ){</span><br><span class="line">    return <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">id</span>)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<ul>
<li>请求 body</li>
</ul>
<figure class="highlight less"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">@PostMapping</span>(<span class="string">"/create"</span>)</span><br><span class="line">public ResultJson create(<span class="variable">@RequestBody</span> <span class="variable">@Validated</span> dto dto) {</span><br><span class="line">   </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>请求 RequestPart</li>
</ul>
<figure class="highlight less"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">@PostMapping</span>(<span class="string">"/create"</span>)</span><br><span class="line">public ResultJson create(<span class="variable">@RequestPart</span> <span class="variable">@Validated</span> dto dto) {</span><br><span class="line">   </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="返回参数绑定"><a href="#返回参数绑定" class="headerlink" title="返回参数绑定"></a>返回参数绑定</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><blockquote>
<p>只实例化一个 bean 对象（即每次请求都使用同一个 bean 对象），默认是 singleton</p>
</blockquote>
<pre><code>@Scope(value="singleton") 
</code></pre>
<h2 id="通过ModelAndView返回用户信息数据到页面"><a href="#通过ModelAndView返回用户信息数据到页面" class="headerlink" title="通过ModelAndView返回用户信息数据到页面"></a>通过 ModelAndView 返回用户信息数据到页面</h2><pre><code>/**
 * 方式一，通过ModelAndView返回用户信息数据到页面
 * @return
 */
@RequestMapping(value="/view/{userId}/use/ModelAndView", method=RequestMethod.GET)
private ModelAndView getUserInfo(@PathVariable("userId") Integer userId){
    User user = userService.getUserById(userId);
    return new ModelAndView("userinfo", "user", user);
}
/**
 * 方式二，通过Model返回用户信息数据到页面
 * @return
 */
@RequestMapping(value="/view/{userId}/use/Model", method=RequestMethod.GET)
private String getUserInfo(@PathVariable("userId") Integer userId, Model model){
    User user = userService.getUserById(userId);
    model.addAttribute("user", user);
    return "userinfo";
}
/**
 * 方式三，通过ModelMap返回用户信息数据到页面
 * @return
 */
@RequestMapping(value="/view/{userId}/use/ModelMap", method=RequestMethod.GET)
private String getUserInfo(@PathVariable("userId") Integer userId, ModelMap model){
    User user = userService.getUserById(userId);
    model.addAttribute("user", user);
    return "userinfo";
}

/**
 * 方式四，通过Map返回用户信息数据到页面
 * @return
 */
@RequestMapping(value="/view/{userId}/use/Map", method=RequestMethod.GET)
private String getUserInfo(@PathVariable("userId") Integer userId, Map&lt;String,Object&gt; model){
    User user = userService.getUserById(userId);
    model.put("user", user);
    return "userinfo";
}
/**
 * 方式五，通过@SessionAttributes将指定key的模型数据存到HttpSession，让页面可以获取
 * @return
 */
@RequestMapping(value="/view/{userId}/use/SessionAttributes", method=RequestMethod.GET)
private ModelAndView getUserInfo(@PathVariable("userId") Integer userId){
    User user = userService.getUserById(userId);
    return new ModelAndView("userinfo", "user", user);
}
/**
 * 方式六，通过@SessionAttributes将指定key的模型数据存到HttpSession，让页面可以获取
 * @return
 */
@RequestMapping(value="/view/{userId}/use/ModelAttribute", method=RequestMethod.GET)
private String getUserInfo(@PathVariable("userId") Integer userId){
    return "userinfo";
}
/**
 * 方式七，直接将数据存到HttpSession，让页面可以获取
 * @param userId
 * @param session
 * @return
 */
@RequestMapping(value="/view/{userId}/use/HttpSession", method=RequestMethod.GET)
private String getUserInfo(@PathVariable("userId") Integer userId, HttpSession session){
    User user = userService.getUserById(userId);
    session.setAttribute("user", user);
    return "userinfo";
}
/**
 * 方式八，直接将数据存到HttpServletRequest，让页面可以获取
 * @param userId
 * @param session
 * @return
 */
@RequestMapping(value="/view/{userId}/use/HttpServletRequest", method=RequestMethod.GET)
private String getUserInfo(@PathVariable("userId") Integer userId, HttpServletRequest request){
    User user = userService.getUserById(userId);
    request.setAttribute("user", user);
    return "userinfo";
}
</code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象类和接口的区别</title>
    <url>/2021/05/29/19-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/19.jpg"></p>
</span>

<span id="more"></span>

<h1 id="抽象类：（a-是-b的儿子-）"><a href="#抽象类：（a-是-b的儿子-）" class="headerlink" title="抽象类：（a 是 b的儿子 ）"></a>抽象类：（a 是 b 的儿子 ）</h1><pre><code>// 定义一个抽象类
abstract class People{
    private String name;  // 实例变量
    // 共有的 setter 和 getter 方法
    public void setName(String name){
        this.name = name;
    }
    public String getName(){
        return this.name;
    }
    // 抽象方法
    public abstract void work();
}
</code></pre>
<ul>
<li>（1）抽象类不能用 new 直接实例化； </li>
<li>（2）类中如果有一个或多个 abstract 方法，则该类必须声明为 abstract；</li>
<li>（3）抽象类中的方法不一定都是 abstract 方法，还可以定义其他方法，相当于父类直接直接使用； </li>
<li>（4）一个类中不含抽象方法，它也可以声明为抽象类</li>
<li>（5）抽象类中的抽象方法要被使用，必须由子类复写起所有的抽象方法后，对象调用子类对象。 </li>
<li>（6）如果子类只覆盖了部分抽象方法，那么该子类还是一个抽象类。</li>
</ul>
<h1 id="接口：（a-像-b的某个部分-）"><a href="#接口：（a-像-b的某个部分-）" class="headerlink" title="接口：（a 像 b的某个部分 ）"></a>接口：（a 像 b 的某个部分 ）</h1><pre><code>public interface CalInterface   {  
    final float PI=3.14159f;//定义用于表示圆周率的常量PI  
    float getArea(float r);//定义一个用于计算面积的方法getArea()  
    float getCircumference(float r);//定义一个用于计算周长的方法getCircumference()  
}
</code></pre>
<ul>
<li>（1）只声明方法和常量不定义具体实现内容</li>
<li>（2）具体方法由子接口实现</li>
<li>（3）子接口可以继承多个父接口</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 Java</title>
    <url>/2021/05/26/2-%E5%AE%89%E8%A3%85Java/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/2.jpg"></p>
</span>

<span id="more"></span>
<h2 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows 安装</h2><h3 id="下载Jdk8"><a href="#下载Jdk8" class="headerlink" title="下载Jdk8"></a>下载 Jdk8</h3><ul>
<li>  选择对应 jdk 版本下载（Tips：可在 Windows 下载完成后，通过 FTP 或者 SSH 到发送到 Linux 上）</li>
<li>  <a href="https://repo.huaweicloud.com/java/jdk/">JDK 下载</a></li>
</ul>
<h3 id="指定目录"><a href="#指定目录" class="headerlink" title="指定目录"></a>指定目录</h3><pre><code>D:\JJDK\java\
</code></pre>
<h3 id="安装jre"><a href="#安装jre" class="headerlink" title="安装jre"></a>安装 jre</h3><pre><code>创建目录安装：D:\JJDK\java\jre1.8.0_281  
</code></pre>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><pre><code>JAVA_HOME： D:\JJDK\java 
PATH:  %JAVA_HOME%\bin
CLASSPATH: .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar;
</code></pre>
<h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><pre><code>java -version
    
</code></pre>
<h2 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux 安装</h2><h3 id="下载Jdk8-1"><a href="#下载Jdk8-1" class="headerlink" title="下载Jdk8"></a>下载 Jdk8</h3><ul>
<li>选择对应 jdk 版本下载（Tips：可在 Windows 下载完成后，通过 FTP 或者 SSH 到发送到 Linux 上）</li>
<li><a href="https://repo.huaweicloud.com/java/jdk/">JDK 下载</a></li>
</ul>
<h3 id="登录Linux，切换到root用户"><a href="#登录Linux，切换到root用户" class="headerlink" title="登录Linux，切换到root用户"></a>登录 Linux，切换到 root 用户</h3><pre><code>su root 获取root用户权限，当前工作目录不变(需要root密码)

sudo -i 不需要root密码直接切换成root（需要当前用户密码）
</code></pre>
<h3 id="在usr目录下建立java安装目录"><a href="#在usr目录下建立java安装目录" class="headerlink" title="在usr目录下建立java安装目录"></a>在 usr 目录下建立 java 安装目录</h3><pre><code>cd /usr/local

mkdir java
</code></pre>
<h3 id="将jdk-8u60-linux-x64-tar-gz拷贝到java目录下"><a href="#将jdk-8u60-linux-x64-tar-gz拷贝到java目录下" class="headerlink" title="将jdk-8u60-linux-x64.tar.gz拷贝到java目录下"></a>将 jdk-8u60-linux-x64.tar.gz 拷贝到 java 目录下</h3><pre><code>cp /mnt/hgfs/linux/jdk-8u60-linux-x64.tar.gz /usr/local/java/
</code></pre>
<h3 id="解压jdk到当前目录"><a href="#解压jdk到当前目录" class="headerlink" title="解压jdk到当前目录"></a>解压 jdk 到当前目录</h3><pre><code>得到文件夹 jdk1.8.0_*　　(注意：下载不同版本的JDK目录名不同！)
tar -zxvf jdk-8u60-linux-x64.tar.gz
</code></pre>
<h3 id="安装完毕为他建立一个链接以节省目录长度"><a href="#安装完毕为他建立一个链接以节省目录长度" class="headerlink" title="安装完毕为他建立一个链接以节省目录长度"></a>安装完毕为他建立一个链接以节省目录长度</h3><pre><code>ln -s /usr/local/java/jdk1.8.0_60/ /usr/local/jdk
</code></pre>
<h3 id="编辑配置文件，配置环境变量"><a href="#编辑配置文件，配置环境变量" class="headerlink" title="编辑配置文件，配置环境变量"></a>编辑配置文件，配置环境变量</h3><pre><code>vim /etc/profile

    JAVA_HOME=/usr/local/jdk
    CLASSPATH=$JAVA_HOME/lib/
    PATH=$PATH:$JAVA_HOME/bin
    export PATH JAVA_HOME CLASSPATH
</code></pre>
<h3 id="重启机器或执行命令"><a href="#重启机器或执行命令" class="headerlink" title="重启机器或执行命令"></a>重启机器或执行命令</h3><pre><code>source /etc/profile

sudo shutdown -r now
</code></pre>
<h3 id="查看安装情况"><a href="#查看安装情况" class="headerlink" title="查看安装情况"></a>查看安装情况</h3><pre><code>java -version

java version "1.8.0_60"
Java(TM) SE Runtime Environment (build 1.8.0_60-b27)
Java HotSpot(TM) Client VM (build 25.60-b23, mixed mode)
</code></pre>
<h3 id="可能出现的错误信息"><a href="#可能出现的错误信息" class="headerlink" title="可能出现的错误信息"></a>可能出现的错误信息</h3><pre><code>bash: ./java: cannot execute binary file

出现这个错误的原因可能是在32位的操作系统上安装了64位的jdk，
1、查看jdk版本和Linux版本位数是否一致。
2、查看你安装的Ubuntu是32位还是64位系统
</code></pre>
<p>   <a href="http://www.cnblogs.com/zeze/p/5902124.html" title="点击此处">来源博客</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Timer 和 Quartz 定时任务</title>
    <url>/2021/05/29/20-Timer%E5%92%8CQuartz%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/20.jpg"></p>
</span>

<span id="more"></span>

<h1 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h1><h2 id="TimerTask"><a href="#TimerTask" class="headerlink" title="TimerTask"></a>TimerTask</h2><ul>
<li><p>1. 创建 myTimerTask 类 继承 TimerTask</p>
</li>
<li><ul>
<li>实现 run 方法（具体要实现的逻辑类）</li>
</ul>
</li>
</ul>
<ul>
<li>2. 新建文件 - 创建主函数 实现定时定频率调用 myTimerTask  <figure class="highlight haxe"><table><tbody><tr><td class="code"><pre><span class="line">main{</span><br><span class="line">    Timer timer = <span class="keyword">new</span> <span class="type">Timer</span>();</span><br><span class="line">    myTimerTask tak = <span class="keyword">new</span> <span class="type">myTimerTask</span>();</span><br><span class="line">    <span class="comment">//第一次执行时在2s后，之后每秒过一次</span></span><br><span class="line">    timer.schedule(tak ,<span class="number">2000</span>L,<span class="number">1000</span>L);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li>取消定时任务 (放在 myTimerTask 类里面取消，比如执行 2 次就取消，针对单体)</li>
<li><ul>
<li>Timer.cancel()</li>
</ul>
</li>
<li> 方法用于删除计时器中已取消的任务；返回移除的任务数</li>
<li><ul>
<li>   Timer.purge() </li>
</ul>
</li>
<li>方法用于返回任务最近实际已安排执行时间，返回值 long</li>
<li><ul>
<li><ul>
<li> TimerTask 中的 scheduledExecutionTime ()</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="schedule"><a href="#schedule" class="headerlink" title="schedule"></a>schedule</h2><ul>
<li>schedule 的四种用法</li>
<li><ul>
<li>时间等于或者超过时执行仅执行一次</li>
</ul>
</li>
<li><ul>
<li><ul>
<li> schedule(task ,time);</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li> 时间等于或者超过时执行一次，然后每过 period 再重复执行</li>
</ul>
</li>
<li><ul>
<li><ul>
<li> schedule(task ,time，period);</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li> 等待 delay 毫秒之后执行仅执行一次</li>
</ul>
</li>
<li><ul>
<li><ul>
<li> schedule(task ,delay);</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li> 等待 delay 毫秒之后执行一次，然后每过 period 再重复执行</li>
</ul>
</li>
<li><ul>
<li><ul>
<li> schedule(task ,delay，period);</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="scheduleAtFixedRate-的两种用法"><a href="#scheduleAtFixedRate-的两种用法" class="headerlink" title="scheduleAtFixedRate 的两种用法"></a>scheduleAtFixedRate 的两种用法</h2><ul>
<li>* 时间等于或者超过时执行一次，然后每过 period 再重复执行</li>
<li><ul>
<li><ul>
<li> scheduleAtFixedRate(task ,time，period);</li>
</ul>
</li>
</ul>
</li>
<li>* 等待 delay 毫秒之后执行一次，然后每过 period 再重复执行</li>
<li><ul>
<li><ul>
<li> scheduleAtFixedRate(task ,delay，period);</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="schedule-和-scheduleAtFixedRate的区别"><a href="#schedule-和-scheduleAtFixedRate的区别" class="headerlink" title="schedule 和 scheduleAtFixedRate的区别"></a>schedule 和 scheduleAtFixedRate 的区别</h2><ul>
<li>执行时间早于任务时间</li>
<li><ul>
<li> scheduleAtFixedRate 会执行多次追赶任务进度</li>
</ul>
</li>
<li><ul>
<li> schedule 到点执行</li>
</ul>
</li>
<li>执行时间超过任务时间</li>
<li><ul>
<li> schedule 要执行完了才去执行</li>
</ul>
</li>
<li><ul>
<li> scheduleAtFixedRate 按照时间执行，会存在并发</li>
</ul>
</li>
</ul>
<h2 id="Timer缺陷"><a href="#Timer缺陷" class="headerlink" title="Timer缺陷"></a>Timer 缺陷</h2><ul>
<li>管理并发任务不行（只有一个进程，不能并发）</li>
<li>抛异常时缺陷（终止所有任务）</li>
</ul>
<h1 id="Quartz"><a href="#Quartz" class="headerlink" title="Quartz"></a>Quartz</h1><blockquote>
<p>   Job 实现业务逻辑的接口类 就是定时的任务逻辑</p>
</blockquote>
<blockquote>
<p>   属性：name group jobClass jobDataMap </p>
</blockquote>
<h2 id="HelloJob-java-implements-Job"><a href="#HelloJob-java-implements-Job" class="headerlink" title="HelloJob.java - implements Job"></a>HelloJob.java - implements Job</h2><pre><code>public class HelloJob implements Job {
    public void execute(JobExecutionContext context)
            throws JobExecutionException {
        // 打印当前的执行时间，格式为2017-01-01 00:00:00
        Date date = new Date();
        SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        System.out.println("Current Exec Time Is : " + sf.format(date));
        System.out.println("Hello World");
    }
}
</code></pre>
<h2 id="HelloScheduler-java"><a href="#HelloScheduler-java" class="headerlink" title="HelloScheduler.java"></a>HelloScheduler.java</h2><pre><code>public class HelloScheduler {
    public static void main(String[] args) throws SchedulerException, InterruptedException {
        // 打印当前的时间，格式为2017-01-01 00:00:00
        Date date = new Date();
        SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        System.out.println("Current Time Is : " + sf.format(date));
        // 创建一个JobDetail实例，将该实例与HelloJob Class绑定
        JobDetail jobDetail = JobBuilder.newJob(HelloJob.class)
                .withIdentity("myJob", "group1").build();
        //创建触发器
        （1）Trigger trigger =  TriggerBuilder
                .newTrigger()
                .withIdentity("myTrigger", "group1")
                .startNow()
                .withSchedule(
                        SimpleScheduleBuilder.simpleSchedule().
                                withIntervalInSeconds(2).repeatForever()
                )
                .build();
    
        （2）CronTrigger trigger = CronTriggerBuilder
                .newTrigger()
                .withIdentity("myTrigger", "group1")
                .withSchedule(
                        //每秒执行一次
                        CronScheduleBuilder.cronSchedule("* * * * * ? *")        
                )
                .build();        
        // 创建Scheduler实例
        SchedulerFactory sfact = new StdSchedulerFactory();
        Scheduler scheduler = sfact.getScheduler();
        scheduler.start();
        scheduler.scheduleJob(jobDetail, trigger);
    }
}
</code></pre>
<h2 id="通过JobExecutionContext获取传参"><a href="#通过JobExecutionContext获取传参" class="headerlink" title="通过JobExecutionContext获取传参"></a>通过 JobExecutionContext 获取传参</h2><ul>
<li><p>jobdetail 和 trigger 传参 .usingJobData (“key”,”value”);</p>
</li>
<li><p>在 helleoJob 里面获取参数</p>
</li>
<li><ul>
<li><p>通过手动去获取</p>
<figure class="highlight mipsasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#获取JobDetail名字，分组和自定义参数</span></span><br><span class="line"><span class="keyword">JobKey </span>key = <span class="built_in">context</span>.getJobDetail().getKey();</span><br><span class="line">key.getName()<span class="comment">;key.getGroup();</span></span><br><span class="line"><span class="keyword">JobDataMap </span>datamap = <span class="built_in">context</span>.getJobDetail().getJobDataMap();</span><br><span class="line">String <span class="keyword">jobMsg </span>= dataMap.getString(<span class="string">"key"</span>);</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
</li>
<li><ul>
<li>获取 Triiger 名字，分组和自定义参数 <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">TriggerKey tkey = context.getTrigger.get<span class="constructor">Key()</span>;</span><br><span class="line">tkey.get<span class="constructor">Name()</span>,tkey.get<span class="constructor">Group()</span>;</span><br><span class="line">JobDataMap tdatamap = context.get<span class="constructor">Trigger()</span>.get<span class="constructor">JobDataMap()</span>;</span><br><span class="line">String tjobMsg = tdataMap.get<span class="constructor">String(<span class="string">"key"</span>)</span>;</span><br><span class="line"><span class="number">2.</span>#通过设置同名成员变量</span><br><span class="line">    设置set方法，直接就能获取传入的变量</span><br></pre></td></tr></tbody></table></figure>
<h2 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h2></li>
</ul>
</li>
</ul>
<h3 id="Trigger"><a href="#Trigger" class="headerlink" title="Trigger"></a>Trigger</h3><pre><code>.startAt
.endAt
在指定时间内执行一次作业任务
或者指定时间间隔执行多次任务
</code></pre>
<h3 id="scheduler"><a href="#scheduler" class="headerlink" title="scheduler"></a>scheduler</h3><pre><code>standby 任务挂起                
start 开启任务
shutdown(true|false) 关闭任务-true 等待关闭在置为shutdown false先置为关闭
isShutdown 是否被关闭
--删除任务
sched.pauseTrigger();// 停止触发器
sched.unscheduleJob();// 移除触发器
sched.deleteJob();// 删除任务
</code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>事务相关</title>
    <url>/2021/05/29/21-%E4%BA%8B%E5%8A%A1%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/21.jpg"></p>
</span>

<span id="more"></span>

<h2 id="dubbo-服务"><a href="#dubbo-服务" class="headerlink" title="dubbo 服务"></a>dubbo 服务</h2><blockquote>
<p>（zookeeper） 注册中心</p>
</blockquote>
<pre><code>消费者              发布者

1.发布者发布服务会通知消费者
2.消费者连接发布者的地址去得到数据
</code></pre>
<h2 id="分布式事务数据一致性"><a href="#分布式事务数据一致性" class="headerlink" title="分布式事务数据一致性"></a>分布式事务数据一致性</h2><ul>
<li>(1) 把事务 ABC 统一转成 D 的本地事务 - 把本来规划拆分好的业务，又耦合到了一起，业务职责不清晰，不利于维护。</li>
<li>(2) eBay 模式 - 是将需要分布式处理的任务通过消息日志的方式来异步执行</li>
</ul>
<h2 id="数据库事务机制"><a href="#数据库事务机制" class="headerlink" title="数据库事务机制"></a>数据库事务机制</h2><h3 id="查看全局和本地的隔离级别"><a href="#查看全局和本地的隔离级别" class="headerlink" title="查看全局和本地的隔离级别"></a>查看全局和本地的隔离级别</h3><pre><code>select @@GLOBAL.tx_isolation, @@tx_isolation;
</code></pre>
<h3 id="数据库隔离级别"><a href="#数据库隔离级别" class="headerlink" title="数据库隔离级别"></a>数据库隔离级别</h3><blockquote>
<p>（set SESSION TRANSACTION ISOLATION LEVEL XX ） </p>
</blockquote>
<ul>
<li>可重复读（REPEATABLE READ ）  </li>
</ul>
<ul>
<li><ul>
<li>事务隔离性可以重复读即使另外一边已经修改了。</li>
</ul>
</li>
</ul>
<ul>
<li>脏读    （ READ UNCOMMITTED）    </li>
</ul>
<ul>
<li><ul>
<li>在这边事务中可以读到另一边事务未提交的数据</li>
</ul>
</li>
</ul>
<ul>
<li> READ COMMITTED             </li>
</ul>
<ul>
<li><ul>
<li>读已经提交了的，这边读可能数据会不同</li>
</ul>
</li>
</ul>
<ul>
<li> SERIALIZABLE             </li>
</ul>
<ul>
<li><ul>
<li>线性读，事务依次读</li>
</ul>
</li>
</ul>
<h3 id="表锁-行锁"><a href="#表锁-行锁" class="headerlink" title="表锁/行锁"></a>表锁 / 行锁</h3><ul>
<li>等待上一个事务执行完成之后再查询结果，事务未完成一直锁住该条记录</li>
<li>使用 for update 如果不加条件会锁住整个表 加上条件只会锁住一条记录</li>
</ul>
<ul>
<li><ul>
<li> select * from xx where id =2 for update</li>
</ul>
</li>
</ul>
<h2 id="Spring事务管理"><a href="#Spring事务管理" class="headerlink" title="Spring事务管理"></a>Spring 事务管理</h2><h3 id="Spring事务抽象接口"><a href="#Spring事务抽象接口" class="headerlink" title="Spring事务抽象接口"></a>Spring 事务抽象接口</h3><ul>
<li>PlaformTransactionManager (事务管理器接口)    </li>
</ul>
<ul>
<li>TransactionDefinition (事务的定义 事务的属性 - 传播属性等等)</li>
<li>TransactionStatus (事务的运行状态)</li>
</ul>
<h3 id="TransactionDefinition的隔离机制"><a href="#TransactionDefinition的隔离机制" class="headerlink" title="TransactionDefinition的隔离机制"></a>TransactionDefinition 的隔离机制</h3><ul>
<li>TransactionDefinition.ISOLATION_DEFAULT             </li>
<li><ul>
<li>与数据库隔离级别一致</li>
</ul>
</li>
<li> TransactionDefinition.ISOLATION_READ_COMMITTED     </li>
<li><ul>
<li>事务可以读另一个提交事务的数据</li>
</ul>
</li>
<li> TransactionDefinition.ISOLATION_READ_UNCOMMITTED     </li>
<li><ul>
<li>事务可以读另一个事务未提交的数据（脏读）</li>
</ul>
</li>
<li>TransactionDefinition.ISOLATION_REPEATABLE_READ     </li>
<li><ul>
<li>事务读不到别的事务修改的数据（重复读）</li>
</ul>
</li>
<li>TransactionDefinition.ISOLATION_SERIALIZABLE         </li>
<li><ul>
<li>线性读 等待上一个完成才执行下一个</li>
</ul>
</li>
</ul>
<h3 id="TransactionDefinition-传播机制"><a href="#TransactionDefinition-传播机制" class="headerlink" title="TransactionDefinition    传播机制"></a>TransactionDefinition    传播机制</h3><blockquote>
<p>两个方法都有事务，相互调用 之间如何传播</p>
</blockquote>
<blockquote>
<p>A 事务  B 事务 相互调用</p>
</blockquote>
<blockquote>
<p>都是 B 设置传播机制    </p>
</blockquote>
<ul>
<li>PROPAGATION_REQUIRED(default) </li>
<li><ul>
<li>B 要求 A 有事务，没有就创建事务</li>
</ul>
</li>
<li> PROPAGATION_SUPPORTS         </li>
<li><ul>
<li>B 有事务，A 必须有，B 没有 A 乜没有</li>
</ul>
</li>
<li> PROPAGATION_MANDATORY         </li>
<li><ul>
<li> A 必须有事务</li>
</ul>
</li>
<li> PROPAGATION_REQUIRES_NEW     </li>
<li><ul>
<li>B 先暂停之前的事务，重新启事务</li>
</ul>
</li>
<li> PROPAGATION_NOT_SUPPORTED     </li>
<li><ul>
<li>B 的这个方法不在事务执行</li>
</ul>
</li>
<li> PROPAGATION_NEVER         </li>
<li><ul>
<li>B 不会在事务执行</li>
</ul>
</li>
<li> PROPAGATION_NESTEDED         </li>
<li><ul>
<li>JDBC3.0 才能使用 嵌套事务 </li>
</ul>
</li>
</ul>
<h2 id="JPA事务管理"><a href="#JPA事务管理" class="headerlink" title="JPA事务管理"></a>JPA 事务管理</h2><h3 id="代码方式"><a href="#代码方式" class="headerlink" title="代码方式"></a>代码方式</h3><pre><code>@Autowire 
PlaformTransactionManager txManager

DefaultTransactionDefinition def = new DefaultTransactionDefinition ();
def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
TransactionStatus.status = txManager.getTransaction(def);
try{
    ...业务代码
    txManager.commit(status);
}catch(){
    txManager.rollback(status);
}
</code></pre>
<h3 id="Transactional-声明式事务"><a href="#Transactional-声明式事务" class="headerlink" title="@Transactional 声明式事务"></a>@Transactional 声明式事务</h3><h2 id="JMS-session-事务管理-（activeMQ）"><a href="#JMS-session-事务管理-（activeMQ）" class="headerlink" title="JMS session 事务管理 （activeMQ）"></a>JMS session 事务管理 （activeMQ）</h2><blockquote>
<p>发生错误默认重试 7 次</p>
</blockquote>
<blockquote>
<p>listener 监听 事务是整个方法</p>
</blockquote>
<blockquote>
<p>直接发送 事务是单行。convertAndSend 内部起作用</p>
</blockquote>
<h3 id="JMS-transactionManager-管理事务"><a href="#JMS-transactionManager-管理事务" class="headerlink" title="JMS transactionManager 管理事务"></a>JMS transactionManager 管理事务</h3><h4 id="创建JmsConfig-java-–事务的配置项"><a href="#创建JmsConfig-java-–事务的配置项" class="headerlink" title="创建JmsConfig.java –事务的配置项"></a>创建 JmsConfig.java –事务的配置项</h4><pre><code>@EnableJms
@Configuration
public class JmsConfig {
    @Bean
    PlatformTransactionManager transactionManager(ConnectionFactory factory){
        return new JmsTransactionManager(factory);
    }
    @Bean
    JmsTemplate jmsTemplate(ConnectionFactory factory){
        JmsTemplate jmsTemplate =  new JmsTemplate();
        jmsTemplate.setConnectionFactory(factory);
        return  jmsTemplate;
    }
    @Bean
    JmsListenerContainerFactory&lt;?&gt; msgFactory(ConnectionFactory cf, PlatformTransactionManager transactionManager,DefaultJmsListenerContainerFactoryConfigurer configurer){
        DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();
        configurer.configure(factory,cf);
        factory.setReceiveTimeout(10000L);
        factory.setTransactionManager(transactionManager);
        return factory;
    }
}
</code></pre>
<h5 id="声明式事务（注解）"><a href="#声明式事务（注解）" class="headerlink" title="声明式事务（注解）"></a>声明式事务（注解）</h5><pre><code>@Transactional
@JmsListener(destination = "customer:msg1:new",containerFactory = "msgFactory")
</code></pre>
<h5 id="代码方式-使用事务-同样使用-msgFactory作为事务配置"><a href="#代码方式-使用事务-同样使用-msgFactory作为事务配置" class="headerlink" title="代码方式 - 使用事务 同样使用 msgFactory作为事务配置"></a>代码方式 - 使用事务 同样使用 msgFactory 作为事务配置</h5><pre><code>@Autowired
PlatformTransactionManager transactionManager;
TransactionDefinition tx = new DefaultTransactionDefinition();
TransactionStatus status = transactionManager.getTransaction(tx);
try{
    ...业务代码 
    transactionManager.commit(status);
}catch (Exception e){
    e.printStackTrace();
    transactionManager.rollback(status);
}
</code></pre>
<h2 id="Spring-本地事务和外部事物-与-JTA"><a href="#Spring-本地事务和外部事物-与-JTA" class="headerlink" title="Spring 本地事务和外部事物 与 JTA"></a>Spring 本地事务和外部事物 与 JTA</h2><blockquote>
<p>一个 java 服务访问多个数据源，保证数据一致性</p>
</blockquote>
<h3 id="XA规范的JAVA实现-JTA"><a href="#XA规范的JAVA实现-JTA" class="headerlink" title="XA规范的JAVA实现-JTA"></a>XA 规范的 JAVA 实现 - JTA</h3><ul>
<li><p>3 个接口</p>
</li>
<li><ul>
<li>TransactionManager</li>
</ul>
</li>
<li><ul>
<li>XAResource </li>
</ul>
</li>
<li><ul>
<li>XID</li>
</ul>
</li>
<li><p> 弊端</p>
</li>
<li><ul>
<li>两阶段提交</li>
</ul>
</li>
<li><ul>
<li>事务时间太长，锁数据时间太长</li>
</ul>
</li>
<li><ul>
<li>低性能，高吞吐量</li>
</ul>
</li>
<li><p>单个数据库 </p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jta-atomikos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>自动创建 JTA 的事务</p>
</li>
<li><p>两个事务在入口 @Transactional</p>
</li>
</ul>
<h2 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h2><h3 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h3><h4 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP 理论</h4><ul>
<li>C 一致性</li>
<li> A 可用性</li>
<li> P 分区容错性</li>
</ul>
<h4 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE 理论</h4><ul>
<li>基本可用（Basically Available）</li>
<li>软状态（Soft State）</li>
<li>最终一致性（Eventually Consistent）</li>
</ul>
<h4 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h4><ul>
<li>强一致性            </li>
<li>弱一致性</li>
<li><ul>
<li>一个服务一个服务去调用</li>
</ul>
</li>
<li>最终一致性</li>
<li><ul>
<li>人工啊，定时任务去扫描</li>
</ul>
</li>
</ul>
<h3 id="几种分布式系统"><a href="#几种分布式系统" class="headerlink" title="几种分布式系统"></a>几种分布式系统</h3><ul>
<li>多数据源</li>
<li>多服务</li>
<li> soa</li>
<li> 微服务</li>
</ul>
<h3 id="分布式系统考虑问题"><a href="#分布式系统考虑问题" class="headerlink" title="分布式系统考虑问题"></a>分布式系统考虑问题</h3><ul>
<li>服务分拆</li>
<li>数据分拆</li>
<li>计算拆分</li>
<li>服务状态以及异常处理</li>
</ul>
<h3 id="微服务架构组成"><a href="#微服务架构组成" class="headerlink" title="微服务架构组成"></a>微服务架构组成</h3><ul>
<li>服务发现与注册</li>
<li>服务网关与负载均衡</li>
<li>监控与熔断机制</li>
<li>配置、消息等    </li>
</ul>
<h3 id="Spring-Cloud-微服务架构"><a href="#Spring-Cloud-微服务架构" class="headerlink" title="Spring Cloud 微服务架构"></a>Spring Cloud 微服务架构</h3><ul>
<li>SpringCloud Netflix </li>
<li>SpringCloud Config</li>
<li>SpringCloud BUS</li>
</ul>
<h4 id="SpringCloud-Netflix"><a href="#SpringCloud-Netflix" class="headerlink" title="SpringCloud Netflix"></a>SpringCloud Netflix</h4><ul>
<li>服务注册中心：Eureka</li>
<li> 网关：ZUUL</li>
<li> 声明式 Rest 调用接口：Feign Client</li>
<li> 负载均衡：Ribbon</li>
<li> 监控、熔断组件：Hystrix 与 Hystrix Dashboard    </li>
</ul>
<h4 id="Spring-Cloud-Config-配置服务"><a href="#Spring-Cloud-Config-配置服务" class="headerlink" title="Spring Cloud Config 配置服务"></a>Spring Cloud Config 配置服务</h4><ul>
<li>配置：文件夹，GIT ，SVN，DB</li>
<li> 配置服务器</li>
<li>服务_&gt; 配置服务器_&gt; 配置</li>
</ul>
<h2 id="分布式事务实现方式"><a href="#分布式事务实现方式" class="headerlink" title="分布式事务实现方式"></a>分布式事务实现方式</h2><h3 id="XA与最后资源博弈"><a href="#XA与最后资源博弈" class="headerlink" title="XA与最后资源博弈"></a>XA 与最后资源博弈</h3><ul>
<li>JTA 可分成两段提交</li>
</ul>
<h3 id="共享资源"><a href="#共享资源" class="headerlink" title="共享资源"></a>共享资源</h3><ul>
<li>两个数据源共享一个底层资源</li>
<li> ActiveMQ 使用 DB 作为存储</li>
<li>使用 DB 上的 connection 控制事务提交</li>
<li>需要数据源支持</li>
</ul>
<h3 id="最大努力一次提交-MQ方式的实现"><a href="#最大努力一次提交-MQ方式的实现" class="headerlink" title="最大努力一次提交 MQ方式的实现"></a>最大努力一次提交 MQ 方式的实现</h3><ul>
<li>依次提交事务</li>
<li>可能出错</li>
<li>通过 AOP 或者 Listener 实现事务直接的同步</li>
</ul>
<h3 id="链式事务"><a href="#链式事务" class="headerlink" title="链式事务"></a>链式事务</h3><ul>
<li>定义事务链</li>
<li>多个事务在一个事务管理器依次次执行</li>
<li>将不同的数据源的 datasource 放进链式 source 里面执行</li>
</ul>
<h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><ul>
<li>强一致性事务：JTA（性能最差，只是用于单个服务内）Amokios</li>
<li> 弱、最终一致性事务：最大努力一次提交、链式事务（设计相应的错误处理机制）</li>
<li>MQ-DB: 最大努力一次提交 + 重试</li>
<li>多个 DB：链式事务管理</li>
<li>多个数据源：链式事务 / 或其他事务同步</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>总结相关</title>
    <url>/2021/05/29/22-%E6%80%BB%E7%BB%93%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/22.jpg"></p>
</span>

<span id="more"></span>
<h1 id="spring外部配置文件"><a href="#spring外部配置文件" class="headerlink" title="spring外部配置文件"></a>spring 外部配置文件</h1><pre><code>java -jar  springboot_test-0.0.1-SNAPSHOT.jar --spring.config.location=D:\application2.properties
</code></pre>
<h1 id="docker-mysql"><a href="#docker-mysql" class="headerlink" title="docker-mysql"></a>docker-mysql</h1><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> run --name mysql<span class="number">1</span> --env MYSQL_ROOT_HOST=<span class="number">172</span>.<span class="number">17</span>.%.% --env MYSQL_ROOT_PASSWORD=root -v $PWD/mysql_data:/var/lib/mysql -p <span class="number">3333</span>:<span class="number">3306</span> -d mysql/mysql-server:<span class="number">5</span>.<span class="number">7</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="取模算法"><a href="#取模算法" class="headerlink" title="取模算法"></a>取模算法</h1><figure class="highlight livecodeserver"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">a</span>+(b-<span class="keyword">a</span>)/<span class="number">2</span> == (<span class="keyword">a</span>+b)/<span class="number">2</span></span><br><span class="line"><span class="keyword">a</span>%b = <span class="keyword">a</span> - （<span class="keyword">a</span>/b）*b</span><br></pre></td></tr></tbody></table></figure>
<h1 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h1><figure class="highlight matlab"><table><tbody><tr><td class="code"><pre><span class="line">$ uname -r 查看linux版本号</span><br><span class="line"><span class="built_in">find</span> . -<span class="built_in">type</span> f -<span class="built_in">size</span> +<span class="number">100</span>M 查找大文件</span><br></pre></td></tr></tbody></table></figure>
<h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><ul>
<li>整页翻页 ctrl-f ctrl-b</li>
<li><ul>
<li>f 就是 forword b 就是 backward</li>
</ul>
</li>
<li> 翻半页</li>
<li><ul>
<li> ctrl-d ctlr-u</li>
</ul>
</li>
<li><ul>
<li>d=down u=up</li>
</ul>
</li>
<li> 滚一行</li>
<li><ul>
<li> ctrl-e ctrl-y</li>
</ul>
</li>
<li>zz 让光标所杂的行居屏幕中央</li>
<li> zt 让光标所杂的行居屏幕最上一行 t=top</li>
<li>zb 让光标所杂的行居屏幕最下一行 b=bottom</li>
</ul>
<h1 id="window查看端口"><a href="#window查看端口" class="headerlink" title="window查看端口"></a>window 查看端口</h1><figure class="highlight 1c"><table><tbody><tr><td class="code"><pre><span class="line">netstat -ano 			</span><br><span class="line">netstat -ano <span class="string">|findstr "</span>端口号<span class="string">"</span></span><br><span class="line">netstat -na<span class="string">|grep 7070 查找端口</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="Linux查找进程"><a href="#Linux查找进程" class="headerlink" title="Linux查找进程"></a>Linux 查找进程</h1><figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">losf -i:<span class="number">8080</span> 查看端口</span><br><span class="line"><span class="keyword">ps</span> -ef |<span class="keyword">grep</span> <span class="string">"linux"</span> 查找进程</span><br></pre></td></tr></tbody></table></figure>
<h1 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h1><pre><code>1. 前序：根节点 左子树 右子树
2. 中序: 左子树 根节点 右子树
3. 后序：左子树 右子树 根节点
</code></pre>
<h1 id="hashcode和equals"><a href="#hashcode和equals" class="headerlink" title="hashcode和equals"></a>hashcode 和 equals</h1><pre><code>1. equals 相等，hashcode必相等  效率低
2. hashcode相等，不一定相等，因为不安全
</code></pre>
<h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><p><img data-src="/images/%E7%BA%BF%E7%A8%8B6%E5%A4%A7%E8%BD%AC%E6%8D%A2%E7%8A%B6%E6%80%81.png"> </p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol start="3">
<li><p>java 的理解</p>
<ol>
<li>平台无关性 - 一次编译导出运行</li>
<li> GC - </li>
<li>语言特性 - 泛型 反射 lmnada</li>
<li> 面向对象</li>
<li>类库</li>
<li>异常处理</li>
</ol>
</li>
<li><p>反射</p>
<ol>
<li>动态获取类的属性和方法</li>
</ol>
</li>
<li><p> java 虚拟机    </p>
<ol>
<li>JVM 是内存虚拟机<ol>
<li> Class Loader : 加载 class 文件到内存</li>
<li> Runtime Data Area JVM 内存结构模型</li>
<li> Execution Engine 对命令解析</li>
<li> Native Interface 融合不同开发语言的原生库为 javasuoyong </li>
</ol>
</li>
<li>Class Loader<ol>
<li>BootStrapClassLoader :C++ 编写，加载核心库 java.*</li>
<li>ExtClassLoader:java 编写 加载扩展库 javax.*</li>
<li>AppClassLoader Java 编写  加载程序所在目录</li>
<li>自定义 ClassLoader Java 编写 定制化加载</li>
<li> findClass - defineClass (二进制数组流)</li>
</ol>
</li>
<li> 双亲委派机制<ol>
<li>自定义 ClassLoader 的父亲 AppClassLoader 的父亲是 ExtClassLoader:java 的父亲是 null</li>
<li> 避免多份同样字节码的加载</li>
</ol>
</li>
<li>类的加载方式<ol>
<li>隐式加载 new</li>
<li> 显式加载 loadClass forName</li>
</ol>
</li>
<li> 类的装载过程<ol>
<li>加载   生成字节码</li>
<li>链接   校验 - 准备 - 解析</li>
<li>初始化 分配静态空间等</li>
</ol>
</li>
<li> forName 得到的 class 是已经初始化完成，会执行静态化 static        </li>
<li>loadClass 是还没有链接的 只是一个字节码 - spring 延时加载</li>
</ol>
</li>
<li><p> JAVA 内存模型 RUNTIME DATA AREA </p>
<ol>
<li>线程私有：<ol>
<li>程序计数器<ol>
<li>当前线程所执行的字节码行号指示器逻辑</li>
<li>改变计数器的值来选取下一条需要执行的字节码指令</li>
<li>和线程是一对一的关系即线程私有</li>
<li>对 java 方法计数 如果是 Native 方法则计数器值为 UNdefine</li>
<li> 不会发生内存泄露</li>
</ol>
</li>
<li> java 虚拟机栈（Stack）- 大小是固定的<ol>
<li> java 方法执行的内存模型</li>
<li>包含多个栈帧</li>
<li>局部变量表和操作数栈<ol>
<li>包含方法执行过程中所有变量</li>
<li>入栈出栈复制交换产生消费变量</li>
<li>为什么递归会超过内存泄露？<ol>
<li>递归过深，栈帧超过深度    </li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li>本地方法栈 - 标注了 native</li>
</ol>
</li>
<li> 线程共享：<ol>
<li>MetaSpace 元空间 比 永久代 （PenGen）的优势<ol>
<li>字符串常量池存在永久代中，容易出现性能问题和内存溢出</li>
<li>类和方法的信息大小难以确定，给永久代的大小指定带来困难</li>
<li>永久代会为 GC 带来不必要的复杂性</li>
<li>方便 HotSpot 与其他 JVM 如 Jrockit 的集成</li>
</ol>
</li>
<li> java 堆（Heap）<ol>
<li>对象实例的分配区域</li>
<li> GC 管理的主要区域（GC 管理堆）</li>
</ol>
</li>
</ol>
</li>
<li>JVM 三大性能调忧参数 -Xms -Xmx -Xss 的含义<ol>
<li> java -Xms128m -Xmx128m -Xss256K -jar xxxx.jar</li>
<li>-Xss：规定了每个线程虚拟机栈（堆栈）的大小</li>
<li> -Xms: 堆的初始值</li>
<li> -Xmx: 堆能达到的最大值</li>
</ol>
</li>
<li>堆和栈有何区别？<ol>
<li>内存分配策略<ol>
<li>静态存储：编译是确定每个数据目标在运行时的存储空间需求</li>
<li>栈式存储：数据区需求在编译时未知，运行时模块入口前确定</li>
<li>堆式存储：编译时或运行时模块入口都无法确定。动态分配</li>
<li>联系：引用对象，数组时，栈里定义变量保存堆中目标首地址</li>
</ol>
</li>
<li>管理方式：栈自动释放 堆需要 GC</li>
<li> 空间大小：栈比堆小</li>
<li>碎片相关：栈产生的碎片小于堆</li>
<li>分配方式：栈支持静态和动态分配，而堆仅支持动态分配</li>
<li>效率：栈的效率比堆高</li>
</ol>
</li>
<li> intren 方法 - 常量池 如果有就返回，没有就创建<ol>
<li> jdk6 -    不能创建 - 如果有了就复制一个</li>
<li> jdk6+ - 不仅引用还可以在栈里面创建引用对象 如果有了就引用一个 <figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">String</span> str1 = <span class="string">"aaa"</span>;</span><br><span class="line">      <span class="keyword">String</span> str2 = <span class="string">"bbb"</span>;</span><br><span class="line">      <span class="keyword">String</span> str3 = <span class="string">"aaabbb"</span>;</span><br><span class="line">      <span class="keyword">String</span> str4 = str1 + str2;</span><br><span class="line">      <span class="keyword">String</span> str5 = <span class="string">"aaa"</span> + <span class="string">"bbb"</span>;</span><br><span class="line">      System.out.<span class="built_in">println</span>(str3 == str4); <span class="comment">// false</span></span><br><span class="line">      System.out.<span class="built_in">println</span>(str3 == str4.<span class="built_in">intern</span>()); <span class="comment">// true</span></span><br><span class="line">      System.out.<span class="built_in">println</span>(str3 == str5);<span class="comment">// true</span></span><br><span class="line">str1、str2、str3、str5都是存在于常量池，</span><br><span class="line">str4由于表达式右半边有引用类型，所以str4存在于堆内存，</span><br><span class="line">而str5表达式右边没有引用类型，是纯字符串常量，就存放在了常量池里面</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
</li>
</ol>
</li>
<li><p>GC 垃圾回收机制</p>
<ol>
<li>什么是垃圾？<ol>
<li>引用计数算法<ol>
<li>判断对象的引用数量<ol>
<li>通过判断对象的引用数量来决定对象是否可以被回收</li>
<li>每个对象实例都有一个引用计数器，被引用则 + 1 完成引用则 - 1</li>
<li> 每个引用计数为 0 的对象实例可以被当垃圾回收</li>
<li>优点：执行效率高，程序执行受影响较小</li>
<li>缺点：无法检测出循环引用的情况，导致内存泄露        </li>
</ol>
</li>
</ol>
</li>
<li>可达性分析算法<ol>
<li>通过判断对象的引用链是否可达来决定对象是否可以被回收</li>
<li>可以作为 GC ROOT 的对象<ol>
<li>虚拟机栈中引用的对象（栈帧中的本地变量表）</li>
<li>方法区中的常量引用的对象</li>
<li>方法区中的类静态属性引用对象</li>
<li>本地方法栈中 JNI（native 方法）的引用对象</li>
<li>活跃线程的引用对象</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li>垃圾回收算法<ol>
<li>标记 - 清除算法（Mark and Sweep）老年代<ol>
<li>标记：从根集合进行扫描，对存活的对象进行标记</li>
<li>清除：对堆内存从头到尾进行线性遍历，回收不可达对象内存</li>
<li>问题：碎片化</li>
</ol>
</li>
<li>复制算法（copying） - 年轻代<ol>
<li>分为对象面和空闲面</li>
<li>对象在对象面上创建</li>
<li>存活的对象被从对象面复制到空闲面</li>
<li>将对象面所有对象内存清除</li>
<li>解决碎片化问题 - 顺序分配内存，简单高效 - 适用于对象存活率低的场景</li>
</ol>
</li>
<li>标记 - 整理算法（Compacting）老年代<ol>
<li>标记 - 清除算法改进</li>
<li>避免内存的不连续行</li>
<li>不用设置两块内存互换</li>
<li>适用于存活率高的场景</li>
</ol>
</li>
<li>分代收集算法（Generational Collector）<ol>
<li>垃圾回收算法的组合拳</li>
<li>按照对象生命周期的不同划分区域以采用不同的垃圾回收算法</li>
<li>目的：提高 JVM 垃圾回收效率</li>
</ol>
</li>
<li> GC 分类<ol>
<li> minor GC 年轻代（早生熄灭）</li>
<li>full GC - Major GC 老年代     </li>
</ol>
</li>
<li>年轻代：8:1:1</li>
<li>Eden 区 </li>
<li>2 个 Survivor（存活）区</li>
<li>年轻代进入老年代<ol>
<li>大对象直接进入年老代</li>
<li>长期存活的对象将进入年老代</li>
<li>动态对象年龄判定 年龄大就进入老年代</li>
<li>空间分配担保</li>
</ol>
</li>
<li>常用调忧参数<ol>
<li> -XX：SurvivorRatio:Eden 和 Survivor 的比值，默认 8：1</li>
<li>-XX:NewRatio: 老年代和年轻代内存大小比例 大小有 - XMS 决定</li>
<li> -XX:MaxTenuringThreshold <br>对象从年轻代到老年代经过 GC 次数的最大瘸值</li>
</ol>
</li>
<li>触发 FULL GC<ol>
<li> 老年代空间不足</li>
<li>永久代空间不足</li>
<li> CMS GC 时出现 promotion failed,concurrent mode failure</li>
<li>minor gc 晋升到老年代的平均大小大于老年代剩余空间</li>
<li> systen.gc () - 提醒，不能绝对控制</li>
<li>使用 RMI 来进行 PRC 或管理 - </li>
</ol>
</li>
<li>Stop -the-World<ol>
<li>JVM 由于要执行 GC 而停止引用程序的执行</li>
<li>任何一种 GC 算法都会发生</li>
<li> GC 优化通过减少 Stop -the-World </li>
</ol>
</li>
<li>Safepoint<ol>
<li> 分析过程中对象引用关系不会发生变化的点</li>
<li>产生 Safepoint 的地方：方法调用 循环跳转 异常跳转 等</li>
<li>安全点数量得适中</li>
</ol>
</li>
<li> JVM 运行模式<ol>
<li> Server - 启动慢，稳定后 - 速度快</li>
<li> Client - 启动快</li>
</ol>
</li>
<li>年轻代收集器<ol>
<li> Serial 收集器（-XX:+UseSerialGC ，复制算法）<ol>
<li>单线程手机，进行垃圾收集时，必须暂停所有工作线程</li>
<li>简单高效，Client 模式下年轻代收集器</li>
</ol>
</li>
<li> ParNew 收集器（-XX:+UseParNewGC, 复制算法）<ol>
<li>多线程收集，其余的行为，特点和 Serial 收集器一样</li>
<li>单核执行效率不如 Serial, 在多核下执行才有优势</li>
</ol>
</li>
<li> Parallel Scavenge 收集器（-XX:+UseParallelGC ，复制算法）<ol>
<li>比起关注用户线程挺多时间，更关注系统的吞吐量</li>
<li>在多核下执行才有优势，Server 模式下默认的年轻代收集器</li>
</ol>
</li>
</ol>
</li>
<li>老年代收集器<ol>
<li> Serial Old 收集器 <br>（-XX:+UseSerialOldGC ，标记整理算法）<ol>
<li>单线程手机，进行垃圾收集时，必须暂停所有工作线程</li>
<li>简单高效，Client 模式下老年代收集器</li>
</ol>
</li>
<li> Parallel old 收集器（-XX:+UseParallelOldGC, 标记整理算法）<ol>
<li>多线程，吞吐量优先</li>
</ol>
</li>
<li> CMS 收集器 <br>（-XX:+UseConcMarkSweepGC, 标记清除算法）<ol>
<li>初始化标记：stop-the-world</li>
<li> 并发标记 - 并打追索标记，程序不会停顿</li>
<li>并发预清理：查找执行并发标记阶段从年轻代晋升到老年代的对象</li>
<li>重新标记：暂停虚拟机，扫描 CMS 堆中的剩余对象</li>
<li>并发清理：清理垃圾对象，程序不会停顿</li>
<li>并发重置，重置 CMS 收集器的数据接口</li>
</ol>
</li>
</ol>
</li>
<li> G1 收集器 <br>（-XX:+UseG1GC, 复制 + 标记整理算法）- 适用于年轻代和老年代<ol>
<li>特点：并发和并行 分代收集 空间整合 可预测的停顿</li>
<li>将整个 Java 堆内存划分成多个代销相等的 Region</li>
<li> 年轻代和老年代不再物理隔离</li>
</ol>
</li>
<li> finalize<ol>
<li> 当执行 system.gc 提醒系统垃圾回收的时候 会执行到 finalize 的方法</li>
<li>但是不是同步的。对象需要等待才能被赋值</li>
<li> finalize 垃圾收集器将对象从内存中清除出去之前做必要的清理工作</li>
</ol>
</li>
<li>强引用 软引用 弱引用 虚引用<ol>
<li>强引用 - JVM 停止运行时被终止<ol>
<li>最普遍的引用  new</li>
<li> 抛出 outofmemoryerror 终止程序乜不会回收具有强引用的对象</li>
<li>通过将对象设置为 null 来弱化引用，使其被回收</li>
</ol>
</li>
<li>软引用 - 内存空间不足时终止<ol>
<li>对象处在有用单非必须得状态</li>
<li>只有当内存空间不足时，GC 会回收该引用的对象的内存</li>
<li>可以用来实现高速缓存 <figure class="highlight processing"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"abc"</span>);</span><br><span class="line">SoftReference&lt;<span class="keyword">String</span>&gt; softRef = <span class="keyword">new</span> SoftReference&lt;<span class="keyword">String</span>&gt;(<span class="built_in">str</span>);</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
</li>
<li>弱引用 -GC 运行后终止<ol>
<li>非必须的对象，比软引用更弱一些</li>
<li> GC 时会被回收</li>
<li>被回收的概率乜不大，因为 GC 线程优先级比较低</li>
<li>适用于引用偶尔被使用且不影响垃圾收集的对象 <figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">String</span> str = <span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"abc"</span>);</span><br><span class="line"><span class="built_in">WeakReference</span>&lt;<span class="keyword">String</span>&gt; abcWeakRef = <span class="keyword">new</span> <span class="built_in">WeakReference</span>&lt;<span class="keyword">String</span>&gt;(str);</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
</li>
<li>虚引用 - 未知<ol>
<li>不会决定对象的生命周期</li>
<li>任何时候都可能被回收</li>
<li>跟踪对象被垃圾回收器回收的活动，起哨兵的作用</li>
<li>必须和引用队列 ReferenceQueue 联合使用 <figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">String</span> str = <span class="keyword">new</span> <span class="built_in"><span class="keyword">String</span></span>(<span class="string">"abc"</span>);</span><br><span class="line">ReferenceQueue queue = <span class="keyword">new</span> <span class="built_in">ReferenceQueue</span>();</span><br><span class="line">PhantomReference&lt;<span class="keyword">String</span>&gt; abcWeakRef = <span class="keyword">new</span> PhantomReference&lt;<span class="keyword">String</span>&gt; (str,queue);</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>进程是资源分配的最小单位  线程是 CPU 调度的最小单位</p>
<ol>
<li><p>进程有独立的地址空间</p>
</li>
<li><p>线程在进程里面</p>
</li>
<li><p>start 创建一个子线程去执行</p>
</li>
<li><p>run 是 main 的主线程</p>
</li>
<li><p>Thread 是类 实现了 Runable 的接口</p>
</li>
<li><p>Thread 多线程 </p>
<ol>
<li>继承 Thread，开启使用 start </li>
<li>runable 使用多线程 <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">myrunable impent 接口runable	</span><br><span class="line">Thred t1 = <span class="keyword">new</span> <span class="constructor">Thread(<span class="params">myrunable</span>)</span></span><br><span class="line">t1.start<span class="literal">()</span>;</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
</li>
<li><p>给 run 传参</p>
<ol>
<li>构造函数传参</li>
<li>成员变量传参</li>
<li>回调函数传参    </li>
</ol>
</li>
<li><p>如何实现处理线程的返回值</p>
<ol>
<li>c 主线程等待   <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>){</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>currentThread.sleep(<span class="number">100</span>);</span><br><span class="line">}	</span><br></pre></td></tr></tbody></table></figure></li>
<li>使用 Thread 类的 join () 阻塞当前线程以等待子线程处理完毕 <figure class="highlight abnf"><table><tbody><tr><td class="code"><pre><span class="line">t.join()<span class="comment">;</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>通过 Callable 接口实现，通过 FutureTask Or 线程池获取    </li>
</ol>
</li>
<li><p>Thread 状态    </p>
<ol>
<li>新建（new）创建后尚未启动的线程状态</li>
<li>运行（runable）包含 Runing 和 ready</li>
<li> 无限等待（waiting）：不会被分配 CPU 执行时间，需要显式被唤醒<ol>
<li>没有设置 Timeout 参数的 Object.wait () 方法</li>
<li>没有设置 Timeout 参数的 Thread.join () 方法</li>
<li> LockSupport.park () 方法</li>
</ol>
</li>
<li>限期等待（Timed waiting） 在一定时间后会由系统自动唤醒<ol>
<li> Thread.sleep () 方法</li>
<li>设置 Timeout 参数的 Object.wait () 方法</li>
<li>设置 Timeout 参数的 Thread.join () 方法</li>
<li> LockSupport.parkNanos () 方法</li>
<li> LockSupport.parkUntil () 方法</li>
</ol>
</li>
<li>阻塞（Blocked）等待获取排它锁 </li>
<li>结束（Terminated）已终止线程状态，线程已经结束执行</li>
</ol>
</li>
<li><p> sleep 和 wait 的区别</p>
<ol>
<li>sleep 是 Thread 的方法，wait 是 Object 类中定义的方法</li>
<li> sleep 方法可以在任何地方使用</li>
<li> wait 只能在 synchronized 方法或者块中使用</li>
<li>最本质的区别：<ol>
<li>Thread.sllep 只会让出 cpu, 不会导致行为的改变</li>
<li> Object.wait 不仅让出 CPU，还会释放已经占有的同步资源锁</li>
</ol>
</li>
</ol>
</li>
<li><p> lock.notify notifyall 通知    释放已经占有的同步资源锁    </p>
<ol>
<li>notifyall 通知所有的处于等待池的线程全部进入锁池去竞争获取锁的机会</li>
<li> notify 随机选取一个处于等待池的线程进入锁池去竞争获取锁的机会</li>
</ol>
</li>
<li><p> yield 当前线程暗示线程调度器愿意让出 CPU 的使用权  不会影响锁    </p>
</li>
<li><p>中断线程</p>
<ol>
<li>通过调用 interrupt (), 通知线程应该中断了。<ol>
<li>如果线程处于被阻塞状态，那么线程将立即退出被阻塞的状态，并抛出一个异常</li>
<li>如果线程处于正常活动状态，那么会将该线程中断标志设置为 true，<br> 被设置中断标志的将继续正常运行，不受影响</li>
</ol>
</li>
<li>需要被调用的线程配合中断<ol>
<li>在正常运行任务时，经常检查本线程的中断标志位，<br> 如果被设置了中断标志就自行停止线程 - 处理异常</li>
<li>如果线程处于正常活动状态，那么根据 true 来修改逻辑</li>
<li>使用 thread.interrupt () 通知该结束线程了。 <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>{</span><br><span class="line">    <span class="keyword">while</span>(!<span class="module-access"><span class="module"><span class="identifier">Thred</span>.</span></span>current<span class="constructor">Thread()</span>.is<span class="constructor">Interrupted()</span>){</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    。。。结束线程</span><br><span class="line">}catch(InterruptedException e){</span><br><span class="line">    。。结束线程</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>线程安全（synchronized）</p>
<ol>
<li>存在共享数据（临街资源）</li>
<li>存在多条线程共同操作这些数据</li>
<li>解决问题的根本方法<ol>
<li>同一时刻有且仅有一个线程在操作共享数据，<br>其他线程必须等到该线程处理完数据后再对共享数据进行操作</li>
</ol>
</li>
<li>互斥锁<ol>
<li>互斥性：在同一时间只允许一个线程持有某个对象锁</li>
<li>可见性    </li>
</ol>
</li>
<li>synchronized 所的都是对象，不是代码</li>
<li>获取对象锁： <br> - 不同对象的锁是异步的 -  同一个类的不同对象的对象锁互不干扰<ol>
<li>同步代码块 <figure class="highlight aspectj"><table><tbody><tr><td class="code"><pre><span class="line">（  syncchronized(<span class="keyword">this</span>),</span><br><span class="line">    <span class="keyword">synchronized</span>(类实例对象)，</span><br><span class="line">    <span class="keyword">synchronized</span>()锁是小括号中的实例对象</span><br><span class="line"> ）</span><br></pre></td></tr></tbody></table></figure></li>
<li>同步非静态方法<ol>
<li> sysnchronized method 锁是当前对象的实例对象</li>
</ol>
</li>
</ol>
</li>
<li>获取类锁 - 不管 new 多个类都是同步的<ol>
<li>同步代码块（synchronized (类.class)）, 锁是小括号中的类对象</li>
<li>同步静态方法（synchronized static method ） 锁是当前对象的类对象</li>
</ol>
</li>
<li>类锁和对象锁 互不干扰</li>
</ol>
</li>
<li><p>实现 synchronized </p>
<ol>
<li>java 对象头<ol>
<li> Mark world</li>
<li>Class Metadata Address</li>
</ol>
</li>
<li>Monitor</li>
</ol>
</li>
<li><p>ReentrantLock 重入锁 -  设置公平性等 1.5 之后引入</p>
<ol>
<li>位于 java.util.concurrent.locks 包</li>
<li>和 CountDownLatch/FutureTask/Semaphore 一样基于 AQS 实现</li>
<li>能够实现比 synchronized 更细的粒度控制，如控制公平性，设置成 true </li>
<li>调用 lock () 之后，必须调用 unlock () 解锁</li>
</ol>
</li>
<li><p> synchronized 和 ReentrantLock 区别</p>
<ol>
<li>ReentrantLock 将锁对象化<ol>
<li>判断是否有线程、或者某个特定的线程在排队等待获取锁</li>
<li>带超时的获取锁的尝试</li>
<li>感知到有没有成功获取锁</li>
</ol>
</li>
<li> synchronized 是关键字，reentrantLock 是类</li>
<li> reentrantlock 可以获取锁等待时间进行设置</li>
<li> reentrantlock 可以获取各种锁的信息</li>
<li> reentrantlock 可以灵活实现多路通知</li>
<li>机制：sync 操作 Mark Word LOCK 调用 Unsafe 类的 park () 方法        </li>
</ol>
</li>
<li><p>volitile</p>
<ol>
<li>只能定义在变量上 ，告诉系统变量可见性</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins 部署 Git 服务</title>
    <url>/2021/05/29/23-Jenkins%E9%83%A8%E7%BD%B2Git%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/23.jpg"></p>
</span>

<span id="more"></span>

<h1 id="安装jenkins"><a href="#安装jenkins" class="headerlink" title="安装jenkins"></a>安装 jenkins</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul>
<li><a href="https://www.jenkins.io/zh/download/">jenkins</a></li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>输入密码，创建用户，按照社区插件安装</li>
</ul>
<h2 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h2><ul>
<li>Publish Over Ssh </li>
<li>git </li>
<li>Localization: Chinese (Simplified)  - 汉化软件</li>
<li> PostBuildScript – 打包完成后执行 ssh</li>
<li>Pipeline Maven Integration   - 创建 maven 项目</li>
<li> Ssh </li>
</ul>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="Global-Tool-Configuration"><a href="#Global-Tool-Configuration" class="headerlink" title="Global Tool Configuration"></a>Global Tool Configuration</h2><ul>
<li><p>配置 Jdk</p>
</li>
<li><ul>
<li><img data-src="/images/jenkins/1.png"></li>
</ul>
</li>
<li><p>配置 git</p>
</li>
<li><ul>
<li><img data-src="/images/jenkins/2.png"></li>
</ul>
</li>
<li><p>配置 maven</p>
</li>
<li><ul>
<li><img data-src="/images/jenkins/3.png"></li>
</ul>
</li>
</ul>
<h2 id="Security-凭据"><a href="#Security-凭据" class="headerlink" title="Security - 凭据"></a>Security - 凭据</h2><blockquote>
<p>添加服务器账号信息、git 账号地址</p>
</blockquote>
<ul>
<li><ul>
<li><img data-src="/images/jenkins/4.png"></li>
</ul>
</li>
</ul>
<h2 id="系统配置-配置ssh"><a href="#系统配置-配置ssh" class="headerlink" title="系统配置 - 配置ssh"></a>系统配置 - 配置 ssh</h2><ul>
<li><img data-src="/images/jenkins/6.png"></li>
</ul>
<h2 id="系统配置-上传文件路径"><a href="#系统配置-上传文件路径" class="headerlink" title="系统配置 - 上传文件路径"></a>系统配置 - 上传文件路径</h2><ul>
<li><img data-src="/images/jenkins/5.png"></li>
</ul>
<h1 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><ul>
<li><img data-src="/images/jenkins/7.png"></li>
</ul>
<h2 id="指定git"><a href="#指定git" class="headerlink" title="指定git"></a>指定 git</h2><ul>
<li><img data-src="/images/jenkins/8.png"></li>
</ul>
<h2 id="打包命令"><a href="#打包命令" class="headerlink" title="打包命令"></a>打包命令</h2><blockquote>
<p>如果需要增加本地 jar 包，</p>
</blockquote>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">mvn install:install-file <span class="attribute">-Dfile</span>=alipay-sdk-java-3.0.0.jar <span class="attribute">-DgroupId</span>=com.aliyun <span class="attribute">-DartifactId</span>=alipay-sdk-java <span class="attribute">-Dversion</span>=3.0.0 <span class="attribute">-Dpackaging</span>=jar</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><img data-src="/images/jenkins/10.png"></li>
</ul>
<h2 id="上传到服务器"><a href="#上传到服务器" class="headerlink" title="上传到服务器"></a>上传到服务器</h2><blockquote>
<p>根据实际情况删减，这里做了配置外移打包</p>
</blockquote>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">target<span class="regexp">/lib/</span>**,target<span class="regexp">/resources/</span>**,target/*.jar</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><img data-src="/images/jenkins/15.png"></li>
</ul>
<h2 id="上传之后执行脚本"><a href="#上传之后执行脚本" class="headerlink" title="上传之后执行脚本"></a>上传之后执行脚本</h2><ul>
<li><img data-src="/images/jenkins/12.png"></li>
</ul>
<figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line">jenkens 执行SSH脚本错误 #加上<span class="keyword">source</span> <span class="regexp">/etc/</span>profile</span><br><span class="line"><span class="keyword">source</span> <span class="regexp">/etc/</span>profile</span><br><span class="line">BUILD_ID=DONTKILLME </span><br><span class="line">kill -<span class="number">9</span> $(ps -ef|<span class="keyword">grep</span> cent-order|<span class="keyword">grep</span> -v <span class="keyword">grep</span>|awk <span class="string">'{print $2}'</span>) </span><br><span class="line">nohup java -jar <span class="regexp">/home/u</span>ser<span class="regexp">/xx-0.0.1-SNAPSHOT.jar &gt;  /</span>home<span class="regexp">/user/</span>nohup.out <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p>jenkens  编码 GBK 的不可映射字符</p>
<blockquote>
<p>pom.xml</p>
</blockquote>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件拷贝时的编码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 编译时的编码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">maven.compiler.encoding</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>程序包 org.apache.commons.collections 不存在</p>
<blockquote>
<p>pom.xml 去掉</p>
</blockquote>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="最后删除空间打包内容"><a href="#最后删除空间打包内容" class="headerlink" title="最后删除空间打包内容"></a>最后删除空间打包内容</h1><ul>
<li><img data-src="/images/jenkins/13.png">  </li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Yapi 结合 Idea 使用</title>
    <url>/2021/05/29/24-Yapi%E7%BB%93%E5%90%88Idea%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/24.jpg"></p>
</span>

<span id="more"></span>
<h1 id="Yapi-与-swagger"><a href="#Yapi-与-swagger" class="headerlink" title="Yapi 与 swagger"></a>Yapi 与 swagger</h1><p><img data-src="/images/yapi/1.png"></p>
<h1 id="服务器安装部署Yapi"><a href="#服务器安装部署Yapi" class="headerlink" title="服务器安装部署Yapi"></a>服务器安装部署 Yapi</h1><blockquote>
<p>省略…</p>
</blockquote>
<h1 id="IDEA安装YapiUpload插件"><a href="#IDEA安装YapiUpload插件" class="headerlink" title="IDEA安装YapiUpload插件"></a>IDEA 安装 YapiUpload 插件</h1><ul>
<li><p>在 idea 中安装 YapiUpload 插件，在 marketplace 中搜索 YapiUpload</p>
</li>
<li><p><img data-src="/images/yapi/2.png"></p>
</li>
<li><p>确认安装成功</p>
</li>
<li><p><img data-src="/images/yapi/3.png"></p>
</li>
</ul>
<h1 id="配置Yapi地址信息"><a href="#配置Yapi地址信息" class="headerlink" title="配置Yapi地址信息"></a>配置 Yapi 地址信息</h1><ul>
<li><p>在项目中的.idea 文件中，找到 misc.xml 文件</p>
</li>
<li><p><img data-src="/images/yapi/4.png"></p>
</li>
<li><p>将项目在 Yapi 中的信息填写到其中</p>
</li>
<li><p><img data-src="/images/yapi/5.png"></p>
</li>
</ul>
<h1 id="浏览器安装cross-request插件"><a href="#浏览器安装cross-request插件" class="headerlink" title="浏览器安装cross-request插件"></a>浏览器安装 cross-request 插件</h1><ul>
<li><p><a href="/images/yapi/cross-request.zip">本地下载</a></p>
</li>
<li><p> cross-request 插件，赋予一个 html 页面跨域请求能力，浏览器必须安装该插件才可在 yapi 中调用各应用接口。（有提供安装包）</p>
</li>
<li><ul>
<li> 解压</li>
</ul>
</li>
<li><ul>
<li> 进入到 Chrome 的【扩展程序】页面，首先开启【开发者模式】，一定要先开启开发者模式</li>
</ul>
</li>
<li><ul>
<li> “加载已解压的扩展程序”，选择步骤 1 解压的文件夹，即可</li>
</ul>
</li>
</ul>
<h1 id="上传接口"><a href="#上传接口" class="headerlink" title="上传接口"></a>上传接口</h1><blockquote>
<p>结合注释，请配置注释模板</p>
</blockquote>
<ol>
<li>   选中单个方法，上传，则是单个接口上传至平台，多次上传同一个接口，只要接口全类名未做更改，则会更新平台已有接口信息</li>
<li>   Controller 层中直接右键上传，则是将该类下所有接口上传，平台中已有接口走更新逻辑</li>
<li>   关于代码风格，请务必按标准编码风格进行，入参出参需把注释标全了，保证上传的接口可读性，互惠互利 </li>
<li>   <a href="https://www.liangzl.com/get-article-detail-146070.html">IDE 配置参考链接</a></li>
<li>样例</li>
</ol>
<ul>
<li>控制层</li>
<li><ul>
<li><img data-src="/images/yapi/6.png"></li>
</ul>
</li>
<li>实体类</li>
<li><ul>
<li><img data-src="/images/yapi/7.png"></li>
</ul>
</li>
<li>结果</li>
<li><ul>
<li><img data-src="/images/yapi/8.png"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Yapi</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建 ftp</title>
    <url>/2021/05/29/25-%E6%90%AD%E5%BB%BAftp/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/25.jpg"></p>
</span>

<span id="more"></span>

<h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><h2 id="apache-ftpserver-1-1-1"><a href="#apache-ftpserver-1-1-1" class="headerlink" title="apache-ftpserver-1.1.1"></a>apache-ftpserver-1.1.1</h2><p> <a href="http://mina.apache.org/ftpserver-project/download_1.1.1.html">下载</a></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="配置用户"><a href="#配置用户" class="headerlink" title="配置用户"></a>配置用户</h3><ul>
<li><p>users.properties 创建两个访问账户</p>
  <figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Password is "admin"</span></span><br><span class="line"><span class="attr">ftpserver.user.admin.userpassword</span>=admin</span><br><span class="line"><span class="attr">ftpserver.user.admin.homedirectory</span>=E:/organic-ftp/</span><br><span class="line"><span class="attr">ftpserver.user.admin.enableflag</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">ftpserver.user.admin.writepermission</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">ftpserver.user.admin.maxloginnumber</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">ftpserver.user.admin.maxloginperip</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">ftpserver.user.admin.idletime</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">ftpserver.user.admin.uploadrate</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">ftpserver.user.admin.downloadrate</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ftpserver.user.anonymous.userpassword=root</span></span><br><span class="line"><span class="comment"># ftpserver.user.anonymous.homedirectory=E:/Jproject/spring-organic-food/organic-file/ftp/</span></span><br><span class="line"><span class="comment"># ftpserver.user.anonymous.enableflag=true</span></span><br><span class="line"><span class="comment"># ftpserver.user.anonymous.writepermission=false</span></span><br><span class="line"><span class="comment"># ftpserver.user.anonymous.maxloginnumber=20</span></span><br><span class="line"><span class="comment"># ftpserver.user.anonymous.maxloginperip=2</span></span><br><span class="line"><span class="comment"># ftpserver.user.anonymous.idletime=300</span></span><br><span class="line"><span class="comment"># ftpserver.user.anonymous.uploadrate=4800</span></span><br><span class="line"><span class="comment"># ftpserver.user.anonymous.downloadrate=4800</span></span><br><span class="line"><span class="comment">#密码 配置新的用户(用户名:hlf 密码:hlf)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ftpserver.user.hlf.userpassword</span>=hlf</span><br><span class="line"><span class="comment">#主目录</span></span><br><span class="line"><span class="attr">ftpserver.user.hlf.homedirectory</span>=E:/Jproject/spring-organic-food/organic-file/</span><br><span class="line"><span class="comment">#当前用户可用</span></span><br><span class="line"><span class="attr">ftpserver.user.hlf.enableflag</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment">#具有上传权限</span></span><br><span class="line"><span class="attr">ftpserver.user.hlf.writepermission</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment">#最大登陆用户数为20</span></span><br><span class="line"><span class="attr">ftpserver.user.hlf.maxloginnumber</span>=<span class="number">20</span></span><br><span class="line"><span class="comment">#同IP登陆用户数为2</span></span><br><span class="line"><span class="attr">ftpserver.user.hlf.maxloginperip</span>=<span class="number">2</span></span><br><span class="line"><span class="comment">#空闲时间为300秒</span></span><br><span class="line"><span class="attr">ftpserver.user.hlf.idletime</span>=<span class="number">300</span></span><br><span class="line"><span class="comment">#上传速率限制为480000字节每秒</span></span><br><span class="line"><span class="attr">ftpserver.user.hlf.uploadrate</span>=<span class="number">48000000</span></span><br><span class="line"><span class="comment">#下载速率限制为480000字节每秒</span></span><br><span class="line"><span class="attr">ftpserver.user.hlf.downloadrate</span>=<span class="number">48000000</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>ftpd-typical.xml</p>
  <figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span> <span class="attr">xmlns</span>=<span class="string">"http://mina.apache.org/ftpserver/spring/v1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://mina.apache.org/ftpserver/spring/v1 http://mina.apache.org/ftpserver/ftpserver-1.0.xsd	</span></span></span><br><span class="line"><span class="string"><span class="tag">       "</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"myServer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listeners</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nio-listener</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">port</span>=<span class="string">"2121"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ssl</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">keystore</span> <span class="attr">file</span>=<span class="string">"./res/ftpserver.jks"</span> <span class="attr">password</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ssl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">data-connection</span> <span class="attr">idle-timeout</span>=<span class="string">"60"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">active</span> <span class="attr">local-port</span>=<span class="string">"8901"</span> /&gt;</span><span class="comment">&lt;!--主动端口--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">passive</span> <span class="attr">ports</span>=<span class="string">"8901"</span> /&gt;</span><span class="comment">&lt;!--被动端口--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">data-connection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nio-listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listeners</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file-user-manager</span> <span class="attr">file</span>=<span class="string">"./res/conf/users.properties"</span> <span class="attr">encrypt-passwords</span>=<span class="string">"clear"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2>  <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">E:</span><br><span class="line">cd JJDK<span class="regexp">/apache-ftpserver-1.1.1/</span>bin</span><br><span class="line">ftpd.bat .<span class="regexp">/res/</span>conf/ftpd-typical.xml</span><br><span class="line">cmd</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="卸载vsftpd"><a href="#卸载vsftpd" class="headerlink" title="卸载vsftpd"></a>卸载 vsftpd</h2><pre><code>sudo yum remove vsftpd 
</code></pre>
<h2 id="安装vsftpd"><a href="#安装vsftpd" class="headerlink" title="安装vsftpd"></a>安装 vsftpd</h2><pre><code>sudo yum -y install vsftpd
</code></pre>
<h2 id="创建一个文件夹用来当作ftp得仓库"><a href="#创建一个文件夹用来当作ftp得仓库" class="headerlink" title="创建一个文件夹用来当作ftp得仓库"></a>创建一个文件夹用来当作 ftp 得仓库</h2><pre><code>cd /
sudo mkdir ftpfile
</code></pre>
<h2 id="创建一个用户-仅对文件夹有上传权限-又没有登陆权限"><a href="#创建一个用户-仅对文件夹有上传权限-又没有登陆权限" class="headerlink" title="创建一个用户,仅对文件夹有上传权限,又没有登陆权限"></a>创建一个用户，仅对文件夹有上传权限，又没有登陆权限</h2><pre><code>sudo useradd ftpuser -d /ftpfile/ -s /sbin/nologin
//赋值权限
sudo chown -R ftpuser.ftpuser /ftpfile/
//重置改用户的密码
sudo passwd ftpuser
</code></pre>
<h2 id="配置ftp服务器"><a href="#配置ftp服务器" class="headerlink" title="配置ftp服务器"></a>配置 ftp 服务器</h2><h3 id="配置ftp服务器器指向文件夹-以及配置用户"><a href="#配置ftp服务器器指向文件夹-以及配置用户" class="headerlink" title="配置ftp服务器器指向文件夹,以及配置用户"></a>配置 ftp 服务器器指向文件夹，以及配置用户</h3><blockquote>
<p>sudo vim /etc/vsftpd/vsftpd.conf</p>
</blockquote>
<pre><code>//放开  连接成功时的欢迎信息
ftpd_banner=Welcome to blah FTP service.
//新增仓库地址
local_root=/ftpfile
anon_root=/ftpfile
//新增行 设置使用时间
use_localtime=yes
//新增行 设置被动传输接口的范围
pasv_min_port=61000
pasv_max_port=62000
//修改行 匿名访问为NO
anonymous_enable=NO
//放开 
chroot_list_enable=YES
//放开
chroot_list_file=/etc/vsftpd/chroot_list
</code></pre>
<h3 id="创建配置用户的chroot-list文件"><a href="#创建配置用户的chroot-list文件" class="headerlink" title="创建配置用户的chroot_list文件"></a>创建配置用户的 chroot_list 文件</h3><pre><code>cd /etc/vsftpd/
sudo vim chroot_list
//增加内容  上面配置的用户的用户名
ftpuser
</code></pre>
<h3 id="重启vsftpd"><a href="#重启vsftpd" class="headerlink" title="重启vsftpd"></a>重启 vsftpd</h3><pre><code>sudo service vsftpd restart
</code></pre>
<h3 id="编辑防火墙"><a href="#编辑防火墙" class="headerlink" title="编辑防火墙"></a>编辑防火墙</h3><blockquote>
<p>sudo vim /etc/sysconfig/iptables</p>
</blockquote>
<pre><code>//新增行
#vsftpd
-A INPUT -p TCP --dport 61001:62000 -j ACCEPT
-A OUTPUT -p TCP --sport 61001:62000 -j ACCEPT
-A INPUT -p TCP --dport 20 -j ACCEPT
-A OUTPUT -p TCP --sport 20 -j ACCEPT
-A INPUT -p TCP --dport 21 -j ACCEPT
-A OUTPUT -p TCP --sport 21 -j ACCEPT
</code></pre>
<h3 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h3><pre><code>sudo service iptables restart
</code></pre>
<h3 id="重启vsftpd-1"><a href="#重启vsftpd-1" class="headerlink" title="重启vsftpd"></a>重启 vsftpd</h3><pre><code>sudo service vsftpd restart
</code></pre>
<h3 id="修改系统文件-以防匿名用户无法创建文件"><a href="#修改系统文件-以防匿名用户无法创建文件" class="headerlink" title="修改系统文件  以防匿名用户无法创建文件"></a>修改系统文件  以防匿名用户无法创建文件</h3><pre><code>sudo vim /etc/selinux/config 
//修改
SELINUX=disable
//刷新生效
sudo setenforce 0
</code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>ftp</tag>
      </tags>
  </entry>
  <entry>
    <title>配置 nginx</title>
    <url>/2021/05/29/26-%E9%85%8D%E7%BD%AEnginx/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/26.jpg"></p>
</span>

<span id="more"></span>

<h1 id="搭建下载"><a href="#搭建下载" class="headerlink" title="搭建下载"></a>搭建下载</h1><blockquote>
<p>省略。。。</p>
</blockquote>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><blockquote>
<p>nginx.conf</p>
</blockquote>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span>   E:/config/nginx_log/error.log;</span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> {</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> {</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">log_format</span> main escape=json <span class="string">'{"timestamp":"$time_iso8601","token":"$http_X_PD_AUTH_TOKEN","request_method":"$request_method","request_uri":"$request_uri","content_type":"$content_type","args":"$args","query_string":"$query_string","request_body":"$request_body","cookie":"$http_cookie","remote_addr":"$remote_addr","uri":"$uri","remote_user":"$remote_user","request":"$request","ups_status":"$upstream_status","http_host":"$http_host","status":"$status","request_length":"$request_length","body_bytes_sent":"$body_bytes_sent","http_referer":"$http_referer","http_user_agent":"$http_user_agent","request_time":"$request_time","http_x_forwarded_for":"$http_x_forwarded_for","upstream_addr":"$upstream_addr","upstream_response_time":"$upstream_response_time"}'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  E:/config/nginx_log/main.log;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">120s</span>;</span><br><span class="line">    <span class="attribute">keepalive_requests</span> <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">gzip</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> {</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">9999</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  <span class="number">127.0.0.1</span>;</span><br><span class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">        <span class="attribute">access_log</span>  E:/config/nginx_log/static.log ;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / {</span><br><span class="line">            <span class="attribute">alias</span>  E:/Jproject/webfFramework/code16sss-ShangChengMoBan-master/ShangChengMoBan/;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span>  <span class="number">404</span> <span class="number">403</span>           /50x.html;</span><br><span class="line">        <span class="attribute">error_page</span>  <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html {</span><br><span class="line">           <span class="attribute">alias</span>   E:/Jproject/spring-organic-product/organic-html/organic-error/<span class="number">500</span>.html;</span><br><span class="line">        }</span><br><span class="line">        <span class="attribute">location</span> = /<span class="number">404</span>.html {</span><br><span class="line">            <span class="attribute">alias</span>   E:/Jproject/spring-organic-product/organic-html/organic-error/<span class="number">404</span>.html;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="attribute">upstream</span> admin_server{</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:8081</span> weight=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">#server 127.0.0.1:8082 weight=1;</span></span><br><span class="line">        <span class="attribute">keepalive</span> <span class="number">500</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="section">server</span> {</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  <span class="number">127.0.0.1</span>;</span><br><span class="line">           </span><br><span class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">        <span class="attribute">access_log</span>  E:/config/nginx_log/admin.log ;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /system/ {</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://admin_server;</span><br><span class="line">        </span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host $host:$server_port;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> REMOTE-HOST $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            <span class="attribute">client_max_body_size</span>    <span class="number">2000m</span>;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">proxy_connect_timeout</span> <span class="number">3600</span>;</span><br><span class="line">            <span class="attribute">proxy_send_timeout</span> <span class="number">3600</span>;</span><br><span class="line">            <span class="attribute">proxy_read_timeout</span> <span class="number">3600</span>;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        }</span><br><span class="line">    </span><br><span class="line">        <span class="attribute">location</span> / {</span><br><span class="line">            <span class="attribute">alias</span>  E:/Jproject/spring-organic-product/organic-html/organic-system/;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span>  <span class="number">404</span> <span class="number">403</span>           /<span class="number">404</span>.html;</span><br><span class="line">        <span class="attribute">error_page</span>  <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html {</span><br><span class="line">           <span class="attribute">alias</span>   E:/Jproject/spring-organic-product/organic-html/organic-error/<span class="number">500</span>.html;</span><br><span class="line">        }</span><br><span class="line">        <span class="attribute">location</span> = /<span class="number">404</span>.html {</span><br><span class="line">            <span class="attribute">alias</span>   E:/Jproject/spring-organic-product/organic-html/organic-error/<span class="number">404</span>.html;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> {</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  static.mx.com;</span><br><span class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">        <span class="attribute">access_log</span>  E:/config/nginx_log/static.log ;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / {</span><br><span class="line">            <span class="attribute">alias</span>  E:/organic-ftp/;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span>  <span class="number">404</span> <span class="number">403</span>           /50x.html;</span><br><span class="line">        <span class="attribute">error_page</span>  <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html {</span><br><span class="line">           <span class="attribute">alias</span>   E:/Jproject/spring-organic-product/organic-html/organic-error/<span class="number">500</span>.html;</span><br><span class="line">        }</span><br><span class="line">        <span class="attribute">location</span> = /<span class="number">404</span>.html {</span><br><span class="line">            <span class="attribute">alias</span>   E:/Jproject/spring-organic-product/organic-html/organic-error/<span class="number">404</span>.html;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> {</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  admin.mx.com;</span><br><span class="line">           </span><br><span class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">        <span class="attribute">access_log</span>  E:/config/nginx_log/admin.log ;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /system/ {</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://admin_server;</span><br><span class="line">        </span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host $host:$server_port;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> REMOTE-HOST $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            <span class="attribute">client_max_body_size</span>    <span class="number">2000m</span>;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">proxy_connect_timeout</span> <span class="number">3600</span>;</span><br><span class="line">            <span class="attribute">proxy_send_timeout</span> <span class="number">3600</span>;</span><br><span class="line">            <span class="attribute">proxy_read_timeout</span> <span class="number">3600</span>;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        }</span><br><span class="line">    </span><br><span class="line">        <span class="attribute">location</span> / {</span><br><span class="line">            <span class="attribute">alias</span>  E:/Jproject/spring-organic-product/organic-html/organic-system/;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span>  <span class="number">404</span> <span class="number">403</span>           /<span class="number">404</span>.html;</span><br><span class="line">        <span class="attribute">error_page</span>  <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html {</span><br><span class="line">           <span class="attribute">alias</span>   E:/Jproject/spring-organic-product/organic-html/organic-error/<span class="number">500</span>.html;</span><br><span class="line">        }</span><br><span class="line">        <span class="attribute">location</span> = /<span class="number">404</span>.html {</span><br><span class="line">            <span class="attribute">alias</span>   E:/Jproject/spring-organic-product/organic-html/organic-error/<span class="number">404</span>.html;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">  <span class="attribute">upstream</span> app_server{</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:8081</span> weight=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">#server 127.0.0.1:8082 weight=1;</span></span><br><span class="line">        <span class="attribute">keepalive</span> <span class="number">500</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> {</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  www.mx.com;</span><br><span class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">access_log</span>  E:/config/nginx_log/www.log ;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /food/ {</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">           </span><br><span class="line">            <span class="attribute">proxy_pass</span> http://app_server;</span><br><span class="line">        </span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host $host:$server_port;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> REMOTE-HOST $remote_addr;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            <span class="attribute">client_max_body_size</span>    <span class="number">2000m</span>;</span><br><span class="line"></span><br><span class="line">            <span class="attribute">proxy_connect_timeout</span> <span class="number">3600</span>;</span><br><span class="line">            <span class="attribute">proxy_send_timeout</span> <span class="number">3600</span>;</span><br><span class="line">            <span class="attribute">proxy_read_timeout</span> <span class="number">3600</span>;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        }</span><br><span class="line">         <span class="attribute">location</span> / {</span><br><span class="line">            <span class="attribute">alias</span>  E:/Jproject/spring-organic-product/organic-html/organic-app/;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span>  <span class="number">404</span> <span class="number">403</span>           /<span class="number">404</span>.html;</span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html {</span><br><span class="line">           <span class="attribute">alias</span>   E:/Jproject/spring-organic-product/organic-html/organic-error/<span class="number">500</span>.html;</span><br><span class="line">        }</span><br><span class="line">        <span class="attribute">location</span> = /<span class="number">404</span>.html {</span><br><span class="line">            <span class="attribute">alias</span>   E:/Jproject/spring-organic-product/organic-html/organic-error/<span class="number">404</span>.html;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti6.0.0 安装脚手架</title>
    <url>/2021/05/31/27-Activiti6.0.0%E5%AE%89%E8%A3%85%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/27.jpg"></p>
</span>

<span id="more"></span>

<h1 id="下载activiti源码"><a href="#下载activiti源码" class="headerlink" title="下载activiti源码"></a>下载 activiti 源码</h1><ul>
<li><a href="https://github.com/Activiti/Activiti">git</a></li>
</ul>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul>
<li><p>脚手架就相当于是一个模板，若我们采用脚手架，则可以重用之前的代码快速开发。</p>
</li>
<li><p>在 Activiti 的目录结构（见下图）中，原本就是带有脚手架的，但默认不能使用，需要我们手动安装。</p>
</li>
</ul>
<h1 id="一、创建默认脚手架"><a href="#一、创建默认脚手架" class="headerlink" title="一、创建默认脚手架"></a>一、创建默认脚手架</h1><ol>
<li>切换分支</li>
</ol>
<ul>
<li>我们打开一个终端，然后切换新建的分支，若没有，则自己创建</li>
<li>切换分支：git checkout -b study6 activiti-6.0.0</li>
<li><img data-src="/images/activiti/archetype/2.png"></li>
</ul>
<ol start="2">
<li><p> 安装脚手架</p>
<ol>
<li>切换好分支后，进入 tooling/archetypes 目录，进行安装，提示安装成功。</li>
<li>mvn clean install</li>
<li><img data-src="/images/activiti/archetype/3.png"></li>
</ol>
</li>
<li><p> 以上已经成功安装了默认的脚手架</p>
</li>
</ol>
<h1 id="二、创建自定义脚手架"><a href="#二、创建自定义脚手架" class="headerlink" title="二、创建自定义脚手架"></a>二、创建自定义脚手架</h1><ol>
<li>拷贝脚手架</li>
</ol>
<ul>
<li>拷贝 activiti-archetype-unittest 目录，重命名为 activiti-archetype-unittest2，<br>并修改 pom.xml 中的内容为 activiti-archetype-unittest2</li>
<li><img data-src="/images/activiti/archetype/4.png"></li>
</ul>
<ol start="2">
<li><p> 修改 ACTIVITI-ARCHETYPE-UNITTEST2 内容</p>
<ol>
<li>在 archetype-resources/src 目录下<br>创建目录 man/java 和 main/resources（默认只有 test/java 和 test/resources 目录）  </li>
</ol>
<ul>
<li><img data-src="/images/activiti/archetype/5.png"></li>
</ul>
<ol start="2">
<li>将 Helloworld 项目中的内容拷贝过来</li>
</ol>
<ul>
<li><a href="/images/activiti/archetype/archetype.zip">源码下载</a></li>
<li> java 中的 DemoMain.java，并修改文件中的包名为 package ${package}; 并添加其他三个文件</li>
<li><img data-src="/images/activiti/archetype/6.png"></li>
</ul>
<ol start="3">
<li>修改 META-INF/maven/archetype-metadata.xml 文件的内容如下：</li>
</ol>
<ul>
<li>filetered 是否过滤，packaged 是否经过包结构过滤，两个都是 true; 之前的包结构占位符能够替换 <figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">archetype-descriptor</span> <span class="attr">name</span>=<span class="string">"activiti-archetype-unittest2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileSet</span> <span class="attr">filtered</span>=<span class="string">"true"</span> <span class="attr">packaged</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileSet</span> <span class="attr">filtered</span>=<span class="string">"false"</span> <span class="attr">packaged</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span>&gt;</span>activiti.cfg.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span>&gt;</span>logback.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span>&gt;</span>second_approve.bpmn20.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileSet</span> <span class="attr">filtered</span>=<span class="string">"true"</span> <span class="attr">packaged</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/test/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileSet</span> <span class="attr">filtered</span>=<span class="string">"true"</span> <span class="attr">packaged</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/test/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span>&gt;</span>my-process.bpmn20.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">archetype-descriptor</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<ol start="4">
<li>删除不用的文件</li>
</ol>
<ul>
<li>删除掉 test/resource 下的 activiti.cfg.xml 和 log4j.properties，因为我们采用 logback.xml。</li>
<li>删除时把 search in comments and strings 前面的钩去掉。</li>
</ul>
<ol start="5">
<li>安装自定义脚手架</li>
</ol>
<ul>
<li>进入到本地的 activiti-archetype-unittest2 目录中进行安装 <figure class="highlight elm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title">cd</span> activiti-arche<span class="keyword">type</span>-unittest2</span><br><span class="line"><span class="title">mvn</span> clean install</span><br></pre></td></tr></tbody></table></figure></li>
<li><img data-src="/images/activiti/archetype/7.png"></li>
</ul>
<ol start="6">
<li>添加脚手架</li>
</ol>
<ul>
<li><img data-src="/images/activiti/archetype/8.png"></li>
</ul>
<ol start="7">
<li>显示添加成功</li>
</ol>
<ul>
<li><img data-src="/images/activiti/archetype/10.png"></li>
</ul>
</li>
</ol>
<h1 id="三、使用脚手架"><a href="#三、使用脚手架" class="headerlink" title="三、使用脚手架"></a>三、使用脚手架</h1><ol>
<li>创建项目</li>
</ol>
<ul>
<li>重新建一个 maven 项目（建项目不用脚手架），</li>
<li>可以取名为 activiti6-samples，GroupId 可取 com.syc.activiti，ArtifactId 可取 activiti6-samples。</li>
<li>然后新建 module 模型，选择 Maven，并且从 archetype 创建，选择我们建好的 unittest2，模块名可取 config。</li>
</ul>
<ol start="2">
<li>导入依赖</li>
</ol>
<blockquote>
<p>在项目的 pom.xml 中修改 parent 为 springboot，因为 helloword 程序依赖的是 springboot。</p>
</blockquote>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.syc.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti6-samples<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>config<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span><span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>在 config 的 pom.xml 中添加 guava 依赖，不添加该依赖会报错，最好将原先的依赖全部导入</p>
</blockquote>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.syc.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>23.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.176<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<ol start="3">
<li>maven 项目不能忽略</li>
</ol>
<ul>
<li> Unignore Projects 后点击刷新</li>
<li><img data-src="/images/activiti/archetype/9.png"></li>
</ul>
<ol start="4">
<li><p>刷新项目后就是可运行状态</p>
</li>
<li><p>运行项目后提示警告：</p>
</li>
</ol>
<ul>
<li>WARNING: Illegal reflective access by org.apache.ibatis.reflection.Reflector (file:/D:/maven_repository/org/mybatis/mybatis/3.4.2/mybatis-3.4.2.jar) to method java.lang.Object.finalize() </li>
<li>该问题是 jdk 的版本过高，我们将 project structure 中的 jdk 设置回 1.8 即可。</li>
</ul>
<h1 id="本文源地址来源"><a href="#本文源地址来源" class="headerlink" title="本文源地址来源"></a>本文源地址来源</h1><ul>
<li><a href="https://www.freesion.com/article/9811943567/">灰信网</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot2.0 兼容 Activiti6.0.0</title>
    <url>/2021/06/01/28-Springboot2.0%E5%85%BC%E5%AE%B9Activiti6.0.0/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/28.jpg"></p>
</span>

<span id="more"></span>

<h1 id="下载activiti源码"><a href="#下载activiti源码" class="headerlink" title="下载activiti源码"></a>下载 activiti 源码</h1><ul>
<li><a href="https://github.com/Activiti/Activiti">git</a></li>
<li> 切换分支：git checkout -b study6 activiti-6.0.0</li>
</ul>
<h1 id="创建springboot-web项目"><a href="#创建springboot-web项目" class="headerlink" title="创建springboot-web项目"></a>创建 springboot-web 项目</h1><ul>
<li><p><img data-src="/images/activiti/spring/1.jpg"></p>
</li>
<li><p><img data-src="/images/activiti/spring/2.jpg"></p>
</li>
<li><p>增加监控 (pom.xml)</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-hateoas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>application.yml</p>
<figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">management<span class="selector-class">.endpoints</span><span class="selector-class">.jmx</span><span class="selector-class">.exposure</span>.include=<span class="string">'*'</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>引入 activiti</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--activiti心跳监控--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--activiti--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring-boot-starter-basic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="修改activiti6-0-0源码"><a href="#修改activiti6-0-0源码" class="headerlink" title="修改activiti6.0.0源码"></a>修改 activiti6.0.0 源码</h1></li>
<li><p>将 module 中的 activiti-spring-boot 添加为 maven 子模块</p>
</li>
<li><p>修改 activiti-spring-boot 的 pom.xml，修改 boot 版本 [2.0.0.RELEASE]</p>
</li>
<li><p><img data-src="/images/activiti/spring/3.png"></p>
</li>
<li><p>Reimport basic 项目</p>
</li>
</ul>
<h1 id="修改报错信息"><a href="#修改报错信息" class="headerlink" title="修改报错信息"></a>修改报错信息</h1><h2 id="ProcessEngineEndpoint"><a href="#ProcessEngineEndpoint" class="headerlink" title="ProcessEngineEndpoint"></a>ProcessEngineEndpoint</h2><ul>
<li>修改前</li>
<li><img data-src="/images/activiti/spring/4.jpg"></li>
<li>修改后</li>
<li><img data-src="/images/activiti/spring/5.jpg"></li>
</ul>
<h2 id="ProcessEngineMvcEndpoint"><a href="#ProcessEngineMvcEndpoint" class="headerlink" title="ProcessEngineMvcEndpoint"></a>ProcessEngineMvcEndpoint</h2><ul>
<li>修改前</li>
<li><img data-src="/images/activiti/spring/6.jpg"></li>
<li>修改后</li>
<li><img data-src="/images/activiti/spring/7.jpg"></li>
</ul>
<h2 id="EndpointAutoConfiguration"><a href="#EndpointAutoConfiguration" class="headerlink" title="EndpointAutoConfiguration"></a>EndpointAutoConfiguration</h2><ul>
<li>修改前</li>
<li><img data-src="/images/activiti/spring/8.jpg"></li>
<li>修改后</li>
<li><img data-src="/images/activiti/spring/9.jpg"></li>
</ul>
<h2 id="DataSourceProcessEngineAutoConfiguration"><a href="#DataSourceProcessEngineAutoConfiguration" class="headerlink" title="DataSourceProcessEngineAutoConfiguration"></a>DataSourceProcessEngineAutoConfiguration</h2><ul>
<li>修改前</li>
<li><img data-src="/images/activiti/spring/10.jpg"></li>
<li>修改后</li>
<li><img data-src="/images/activiti/spring/11.jpg"><h2 id="SecurityAutoConfiguration"><a href="#SecurityAutoConfiguration" class="headerlink" title="SecurityAutoConfiguration"></a> SecurityAutoConfiguration</h2></li>
<li> 修改前</li>
<li><img data-src="/images/activiti/spring/12.jpg"></li>
<li>修改后</li>
<li><img data-src="/images/activiti/spring/13.jpg"></li>
</ul>
<p>## 编译 打包</p>
<blockquote>
<p>mvn clean test-compile</p>
</blockquote>
<blockquote>
<p>修改发布版本</p>
</blockquote>
<ul>
<li><img data-src="/images/activiti/spring/14.jpg"></li>
</ul>
<blockquote>
<p>修改父工程对应版本</p>
</blockquote>
<ul>
<li><img data-src="/images/activiti/spring/15.jpg"></li>
</ul>
<blockquote>
<p>修改当前 pom 文件所有 activiti 相关的为 6.0.0</p>
</blockquote>
<ul>
<li><img data-src="/images/activiti/spring/16.jpg"></li>
</ul>
<blockquote>
<p>mvn clean install</p>
</blockquote>
<h1 id="引入项目activiti-6-0-0-boot2"><a href="#引入项目activiti-6-0-0-boot2" class="headerlink" title="引入项目activiti/6.0.0-boot2"></a>引入项目 activiti/6.0.0-boot2</h1><ul>
<li><p>pom.xml</p>
  <figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring-boot-starter-basic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0-boot2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Druid依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>添加数据库</p>
  <figure class="highlight dts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="symbol">spring:</span></span><br><span class="line"><span class="symbol">  datasource:</span></span><br><span class="line">    dirver-class-name: com.mysql.cj.jdbc.Driver'</span><br><span class="line"><span class="symbol">    url:</span> jdbc:mysql:<span class="comment">//127.0.0.1:3306/activiti6unit?useTimezone=true&amp;serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=true</span></span><br><span class="line"><span class="symbol">    username:</span> root</span><br><span class="line"><span class="symbol">    password:</span> root</span><br><span class="line">    <span class="meta">#druid连接池配置</span></span><br><span class="line"><span class="symbol">    type:</span> com.alibaba.druid.pool.DruidDataSource</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>增加 resource/processes 文件夹</p>
</li>
<li><ul>
<li>my-process.bpmn20.xml<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:bpmndi</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/DI"</span> <span class="attr">xmlns:omgdc</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DC"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:omgdi</span>=<span class="string">"http://www.omg.org/spec/DD/20100524/DI"</span> <span class="attr">typeLanguage</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">expressionLanguage</span>=<span class="string">"http://www.w3.org/1999/XPath"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.activiti.org/test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"my-process"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"someTask"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"someTask"</span> <span class="attr">name</span>=<span class="string">"Activiti is awesome!"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"someTask"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
</li>
<li><p>测试</p>
  <figure class="highlight typescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">contextLoads</span>(<span class="params"></span>)</span> {</span><br><span class="line">    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(<span class="string">"my-process"</span>);</span><br><span class="line">    logger.info(<span class="string">"'''''{}"</span>,processInstance);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h1 id="activiti检测"><a href="#activiti检测" class="headerlink" title="activiti检测"></a>activiti 检测</h1>  <figure class="highlight dts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="params">&lt;dependency&gt;</span></span><br><span class="line">    <span class="params">&lt;groupId&gt;</span>org.activiti<span class="params">&lt;/groupId&gt;</span></span><br><span class="line">    <span class="params">&lt;artifactId&gt;</span>activiti-spring-boot-starter-actuator<span class="params">&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="params">&lt;version&gt;</span><span class="number">6.0</span><span class="number">.0</span><span class="params">&lt;/version&gt;</span></span><br><span class="line"><span class="params">&lt;/dependency&gt;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">management:</span></span><br><span class="line"><span class="symbol">  endpoints:</span></span><br><span class="line"><span class="symbol">    web:</span></span><br><span class="line"><span class="symbol">      exposure:</span></span><br><span class="line"><span class="symbol">        include:</span> <span class="string">'*'</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p><a href="http://127.0.0.1:8080/actuator/activiti">http://127.0.0.1:8080/actuator/activiti</a></p>
</li>
<li><ul>
<li><img data-src="/images/activiti/spring/17.jpg"></li>
</ul>
</li>
</ul>
<h1 id="idea编辑bpmn文件"><a href="#idea编辑bpmn文件" class="headerlink" title="idea编辑bpmn文件"></a>idea 编辑 bpmn 文件</h1><ul>
<li>自带插件 Jboss jBPM</li>
<li><ul>
<li> 手写 xml 可提示节点名</li>
</ul>
</li>
<li>画图工具 actiBPM</li>
<li><ul>
<li> 可画图</li>
</ul>
</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>测试版本为 2.0.0-RELEASE!!!</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Activiti</tag>
      </tags>
  </entry>
  <entry>
    <title>BPMN</title>
    <url>/2021/06/02/29-BPMN/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/29.jpg"></p>
</span>

<span id="more"></span>

<h1 id="UserTask"><a href="#UserTask" class="headerlink" title="UserTask"></a>UserTask</h1><p><img data-src="/images/activiti/activiti7/userTask.jpg"></p>
<h1 id="bpmn元素"><a href="#bpmn元素" class="headerlink" title="bpmn元素"></a>bpmn 元素</h1><p><img data-src="/images/activiti/activiti7/1.jpg"></p>
<h1 id="流程组织元素图"><a href="#流程组织元素图" class="headerlink" title="流程组织元素图"></a>流程组织元素图</h1><p><img data-src="/images/activiti/activiti7/2.jpg"></p>
<h1 id="UEL"><a href="#UEL" class="headerlink" title="UEL"></a>UEL</h1><p><img data-src="/images/activiti/activiti7/UEL.jpg"></p>
<p><img data-src="/images/activiti/activiti7/UEL2.jpg"></p>
<h1 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h1><p><img data-src="/images/activiti/activiti7/3.jpg"></p>
<h2 id="并行网关"><a href="#并行网关" class="headerlink" title="并行网关"></a>并行网关</h2><blockquote>
<p>全部通过之后进行后续流程</p>
</blockquote>
<p><img data-src="/images/activiti/activiti7/5.jpg"></p>
<h2 id="排它网关"><a href="#排它网关" class="headerlink" title="排它网关"></a>排它网关</h2><blockquote>
<p>仅满足一个条件进入，未写条件默认走新建 bpmn 文件顺序执行</p>
</blockquote>
<blockquote>
<p>条件进入</p>
</blockquote>
<p><img data-src="/images/activiti/activiti7/6.jpg"></p>
<blockquote>
<p>审批不通过退回</p>
</blockquote>
<p><img data-src="/images/activiti/activiti7/7.jpg"></p>
<h2 id="包容网关"><a href="#包容网关" class="headerlink" title="包容网关"></a>包容网关</h2><blockquote>
<p>满足条件的审批人执行完毕流程就结束</p>
</blockquote>
<p><img data-src="/images/activiti/activiti7/8.jpg"></p>
<h1 id="动态表单"><a href="#动态表单" class="headerlink" title="动态表单"></a>动态表单</h1><p><img data-src="/images/activiti/activiti7/check.jpg"><br><img data-src="/images/activiti/activiti7/check_save.jpg"><br><img data-src="/images/activiti/activiti7/%E5%8A%A8%E6%80%81%E7%94%A8%E6%88%B7.jpg"></p>
<pre><code><figure class="highlight maxima"><table><tbody><tr><td class="code"><pre><span class="line">FormProperty_0nsq3on-<span class="symbol">_</span>!<span class="built_in">string</span>-<span class="symbol">_</span>!姓名-<span class="symbol">_</span>!请填写姓名-<span class="symbol">_</span>!f</span><br><span class="line">FormProperty_3elor37-<span class="symbol">_</span>!long-<span class="symbol">_</span>!年龄-<span class="symbol">_</span>!无-<span class="symbol">_</span>!s</span><br><span class="line"></span><br><span class="line">FormProperty_0nsq3on-<span class="symbol">_</span>!我是八戒-<span class="symbol">_</span>!f!<span class="symbol">_</span>!FormProperty_3elor37-<span class="symbol">_</span>!男-<span class="symbol">_</span>!f</span><br><span class="line"></span><br><span class="line">FormProperty_3ei84q8-<span class="symbol">_</span>!<span class="built_in">string</span>-<span class="symbol">_</span>!悟空写死姓名-<span class="symbol">_</span>!悟空写死姓名-<span class="symbol">_</span>!f</span><br><span class="line">FormProperty_21nbr6a-<span class="symbol">_</span>!<span class="built_in">string</span>-<span class="symbol">_</span>!性别A-<span class="symbol">_</span>!FormProperty_3elor37-<span class="symbol">_</span>!f</span><br></pre></td></tr></tbody></table></figure>
</code></pre>
<h1 id="高级事件"><a href="#高级事件" class="headerlink" title="高级事件"></a>高级事件</h1><p><img data-src="/images/activiti/activiti7/%E4%BA%8B%E4%BB%B6.jpg"></p>
<p><img data-src="/images/activiti/activiti7/%E4%BA%8B%E4%BB%B62.jpg"></p>
<p><img data-src="/images/activiti/activiti7/%E4%BB%BB%E5%8A%A1.jpg"></p>
<h2 id="任务监听器和执行监听器"><a href="#任务监听器和执行监听器" class="headerlink" title="任务监听器和执行监听器"></a>任务监听器和执行监听器</h2><blockquote>
<p>任务监听器能拿到任务相关的属性</p>
</blockquote>
<blockquote>
<blockquote>
<p>可以动态修改任务执行人，候选人等</p>
</blockquote>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TKlistener</span> <span class="keyword">implements</span> <span class="title">TaskListener</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(DelegateTask delegateTask)</span> </span>{</span><br><span class="line">        delegateTask.setAssignee(<span class="string">"xxx"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>执行监听器能拿到流程实例相关的属性</p>
</blockquote>
<blockquote>
<blockquote>
<p>常用于统计任务耗时</p>
</blockquote>
</blockquote>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PiListener</span> <span class="keyword">implements</span> <span class="title">ExecutionListener</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(DelegateExecution delegateExecution)</span> </span>{</span><br><span class="line">        delegateExecution.getProcessInstanceId();</span><br><span class="line">        delegateExecution.getProcessDefinitionId();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><img data-src="/images/activiti/activiti7/%E6%89%A7%E8%A1%8C%E7%9B%91%E5%90%AC%E5%99%A8.jpg"></p>
<p><img data-src="/images/activiti/activiti7/%E5%89%8D%E7%AB%AF%E5%8F%82%E6%95%B0.jpg"></p>
<h2 id="定时事件"><a href="#定时事件" class="headerlink" title="定时事件"></a>定时事件</h2><blockquote>
<p>指定日期开启流程实例</p>
</blockquote>
<blockquote>
<p>24 小时任务未办理短信提醒</p>
</blockquote>
<blockquote>
<p>3 天未审核则主管领导介入</p>
</blockquote>
<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p><img data-src="/images/activiti/activiti7/%E5%AE%9A%E6%97%B6%E4%BA%8B%E4%BB%B6%E7%B1%BB%E5%9E%8B.jpg"></p>
<h4 id="定时"><a href="#定时" class="headerlink" title="定时"></a>定时</h4><pre><code><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">2020</span>-<span class="number">02</span>-<span class="number">03</span> <span class="number">01</span>:<span class="number">22</span>:<span class="number">22</span></span><br></pre></td></tr></tbody></table></figure>
</code></pre>
<h4 id="持续规则"><a href="#持续规则" class="headerlink" title="持续规则"></a>持续规则</h4><p><img data-src="/images/activiti/activiti7/%E6%8C%81%E7%BB%AD.jpg"></p>
<h4 id="循环规则"><a href="#循环规则" class="headerlink" title="循环规则"></a>循环规则</h4><p><img data-src="/images/activiti/activiti7/%E5%BE%AA%E7%8E%AF.jpg"></p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p><img data-src="/images/activiti/activiti7/%E5%9C%BA%E6%99%AF.jpg"></p>
<h2 id="信号事件的捕获与抛出"><a href="#信号事件的捕获与抛出" class="headerlink" title="信号事件的捕获与抛出"></a>信号事件的捕获与抛出</h2><p><img data-src="/images/activiti/activiti7/%E6%8A%9B%E5%87%BA.jpg"></p>
<p><img data-src="/images/activiti/activiti7/%E4%BF%A1%E5%8F%B7%E4%BA%8B%E4%BB%B6.jpg"></p>
<p><img data-src="/images/activiti/activiti7/%E9%85%8D%E7%BD%AE%E4%BF%A1%E5%8F%B7.jpg"></p>
<p><img data-src="/images/activiti/activiti7/%E4%BB%A3%E7%A0%81%E8%A7%A6%E5%8F%91.jpg"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><p>边界事件：触发边界的流向</p>
</li>
<li><p>中间事件：阻塞之后触发下一个任务</p>
</li>
<li><p>边界非阻塞：既触发下一个，还是保留原来的待办任务</p>
</li>
</ul>
<h2 id="消息事件"><a href="#消息事件" class="headerlink" title="消息事件"></a>消息事件</h2><blockquote>
<p>跨实例触发</p>
</blockquote>
<blockquote>
<p>跨任务触发</p>
</blockquote>
<p><img data-src="/images/activiti/activiti7/%E5%8F%96%E5%9B%9E%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg"></p>
<p><img data-src="/images/activiti/activiti7/%E9%80%80%E5%9B%9E.jpg"></p>
<h2 id="错误事件"><a href="#错误事件" class="headerlink" title="错误事件"></a>错误事件</h2><p><img data-src="/images/activiti/activiti7/%E9%94%99%E8%AF%AF%E4%BA%8B%E4%BB%B6.jpg"></p>
<h2 id="补偿事件"><a href="#补偿事件" class="headerlink" title="补偿事件"></a>补偿事件</h2><p><img data-src="/images/activiti/activiti7/%E8%A1%A5%E5%81%BF%E4%BA%8B%E4%BB%B6.jpg"><br><img data-src="/images/activiti/activiti7/%E8%A1%A5%E5%81%BF%E4%BA%8B%E4%BB%B6%E7%89%B9%E7%82%B9.jpg"></p>
<h2 id="取消事件"><a href="#取消事件" class="headerlink" title="取消事件"></a>取消事件</h2><p><img data-src="/images/activiti/activiti7/%E5%8F%96%E6%B6%88%E4%BA%8B%E4%BB%B6.jpg"></p>
<h2 id="额外事件"><a href="#额外事件" class="headerlink" title="额外事件"></a>额外事件</h2><p><img data-src="/images/activiti/activiti7/%E9%A2%9D%E5%A4%96%E4%BA%8B%E4%BB%B6.jpg"></p>
<h1 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h1><h2 id="手工任务"><a href="#手工任务" class="headerlink" title="手工任务"></a>手工任务</h2><p><img data-src="/images/activiti/activiti7/%E6%89%8B%E5%B7%A5%E4%BB%BB%E5%8A%A1.jpg"></p>
<h2 id="脚本任务"><a href="#脚本任务" class="headerlink" title="脚本任务"></a>脚本任务</h2><p><img data-src="/images/activiti/activiti7/%E8%84%9A%E6%9C%AC%E4%BB%BB%E5%8A%A1.jpg"></p>
<h2 id="业务规则任务"><a href="#业务规则任务" class="headerlink" title="业务规则任务"></a>业务规则任务</h2><p><img data-src="/images/activiti/activiti7/%E4%B8%9A%E5%8A%A1%E8%A7%84%E5%88%99%E4%BB%BB%E5%8A%A1.jpg"></p>
<h2 id="接收任务"><a href="#接收任务" class="headerlink" title="接收任务"></a>接收任务</h2><p><img data-src="/images/activiti/activiti7/%E6%8E%A5%E6%94%B6%E4%BB%BB%E5%8A%A1.jpg"></p>
<h2 id="发送任务"><a href="#发送任务" class="headerlink" title="发送任务"></a>发送任务</h2><p><img data-src="/images/activiti/activiti7/%E5%8F%91%E9%80%81%E4%BB%BB%E5%8A%A1.jpg"></p>
<h2 id="服务任务"><a href="#服务任务" class="headerlink" title="服务任务"></a>服务任务</h2><p><img data-src="/images/activiti/activiti7/%E6%9C%8D%E5%8A%A1%E4%BB%BB%E5%8A%A1.jpg"></p>
<h3 id="服务任务使用"><a href="#服务任务使用" class="headerlink" title="服务任务使用"></a>服务任务使用</h3><p><img data-src="/images/activiti/activiti7/%E6%9C%8D%E5%8A%A1%E4%BB%BB%E5%8A%A1%E4%BD%BF%E7%94%A8.jpg"><br><img data-src="/images/activiti/activiti7/%E6%9C%8D%E5%8A%A1%E4%BB%BB%E5%8A%A1%E6%B3%A8%E6%84%8F.jpg"></p>
<h1 id="子流程"><a href="#子流程" class="headerlink" title="子流程"></a>子流程</h1><h2 id="嵌入子流程-同bpmn文件"><a href="#嵌入子流程-同bpmn文件" class="headerlink" title="嵌入子流程[同bpmn文件]"></a>嵌入子流程 [同 bpmn 文件]</h2><h2 id="调用子流程-不同bpmn文件"><a href="#调用子流程-不同bpmn文件" class="headerlink" title="调用子流程[不同bpmn文件]"></a>调用子流程 [不同 bpmn 文件]</h2><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img data-src="/images/activiti/activiti7/%E5%B5%8C%E5%A5%97%E5%AD%90%E4%BB%BB%E5%8A%A1.jpg"></p>
<h1 id="多实例任务-会签"><a href="#多实例任务-会签" class="headerlink" title="多实例任务 - 会签"></a>多实例任务 - 会签</h1><p><img data-src="/images/activiti/activiti7/%E5%A4%9A%E5%AE%9E%E4%BE%8B%E4%BB%BB%E5%8A%A1.jpg"></p>
<p><img data-src="/images/activiti/activiti7/%E5%A4%9A%E5%AE%9E%E4%BE%8B%E5%AE%8C%E6%88%90%E6%9D%A1%E4%BB%B6.jpg"></p>
<figure class="highlight makefile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">实例总数: nrOfInstances</span></span><br><span class="line"><span class="section">当前还没有完成的实例: nrOfActiveInstances</span></span><br><span class="line"><span class="section">已经完成的实例数:nrOfCompletedInstances</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p><img data-src="/images/activiti/activiti7/%E6%80%BB%E7%BB%93-%E8%A6%86%E7%9B%96.jpg"></p>
<p><img data-src="/images/activiti/activiti7/%E6%80%BB%E7%BB%93-%E5%AF%86%E7%A0%81.jpg"></p>
<p><img data-src="/images/activiti/activiti7/%E6%80%BB%E7%BB%93-%E7%BB%84.jpg"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>BPMN</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 相关</title>
    <url>/2021/05/26/3-Maven%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/3.jpg"></p>
</span>

<span id="more"></span>

<h3 id="maven安装"><a href="#maven安装" class="headerlink" title="maven安装"></a>maven 安装</h3><blockquote>
<p>  <a href="https://archive.apache.org/dist/maven/maven-3/">maven 下载</a></p>
<blockquote>
<p> 解压到指定目录即可</p>
</blockquote>
</blockquote>
<h3 id="修改仓库地址"><a href="#修改仓库地址" class="headerlink" title="修改仓库地址"></a>修改仓库地址</h3><pre><code>&lt;localRepository&gt;D:\JJDK\repository&lt;/localRepository&gt;
</code></pre>
<h3 id="修改阿里云镜像"><a href="#修改阿里云镜像" class="headerlink" title="修改阿里云镜像"></a>修改阿里云镜像</h3><pre><code>&lt;mirror&gt;
    &lt;id&gt;central&lt;/id&gt;
    &lt;name&gt;central&lt;/name&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;
    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;
    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;
&lt;/mirror&gt;

仓库网址： https://maven.aliyun.com/mvn/search
</code></pre>
<h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><pre><code>mvn -v 
</code></pre>
<h3 id="配置windows环境变量"><a href="#配置windows环境变量" class="headerlink" title="配置windows环境变量"></a>配置 windows 环境变量</h3><pre><code>MAVEN_HOME D:\JJDK\maven
</code></pre>
<h3 id="配置PATH"><a href="#配置PATH" class="headerlink" title="配置PATH"></a>配置 PATH</h3><pre><code>%MAVEN_HOME%\bin
</code></pre>
<h3 id="本地仓库强制更新"><a href="#本地仓库强制更新" class="headerlink" title="本地仓库强制更新"></a>本地仓库强制更新</h3><pre><code>mvn dependency:purge-local-repository
mvn -Dmaven.test.skip=true clean install -U
</code></pre>
<h3 id="本地跳过test打包"><a href="#本地跳过test打包" class="headerlink" title="本地跳过test打包"></a>本地跳过 test 打包</h3><pre><code>mvn -Dmaven.test.skip=true clean install
</code></pre>
<h3 id="基于脚手架创建项目"><a href="#基于脚手架创建项目" class="headerlink" title="基于脚手架创建项目"></a>基于脚手架创建项目</h3><pre><code>---java项目的
mvn archetype:generate -DgroupId=com.seckill -DartifactId=FirstApp or -DarchetypeArtifactId=maven -archetype-quickstart -DinteractiveMode=false

在上述情况下，一个新的Java项目命名 FourApp 而整个项目的目录结构会自动创建。

--java web项目
mvn archetype:generate -DgroupId=com.seckill -DartifactId=seckillApp -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false
</code></pre>
<h3 id="其余命令"><a href="#其余命令" class="headerlink" title="其余命令"></a>其余命令</h3><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#基于tomcat启动</span></span><br><span class="line">mvn tomcat7:<span class="builtin-name">run</span></span><br><span class="line"><span class="comment">#基于spring启动</span></span><br><span class="line">mvn spring-boot:<span class="builtin-name">run</span></span><br><span class="line"><span class="comment">#批量设置版本</span></span><br><span class="line">mvn versions:<span class="builtin-name">set</span> -DnewVersion = 6.0.0-boot2</span><br><span class="line"><span class="comment">#批量install</span></span><br><span class="line">mvn clean install source:jar -Dmaven.test.<span class="attribute">skip</span>=<span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 序列化</title>
    <url>/2021/06/03/30-Redis%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/30.jpg"></p>
</span>

<span id="more"></span>

<h1 id="RedisConfig"><a href="#RedisConfig" class="headerlink" title="RedisConfig"></a>RedisConfig</h1><pre><code><figure class="highlight dart"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.module.SimpleModule;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.<span class="built_in">DateTime</span>;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>{</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    public RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; redisTemplate(RedisConnectionFactory <span class="keyword">factory</span>) {</span><br><span class="line">        RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(<span class="keyword">factory</span>);</span><br><span class="line"></span><br><span class="line">        RedisSerializer&lt;<span class="built_in">String</span>&gt; redisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        <span class="comment">//key序列化方式</span></span><br><span class="line">        redisTemplate.setKeySerializer(redisSerializer);</span><br><span class="line"></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(<span class="built_in">Object</span>.<span class="keyword">class</span>);</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//属性</span></span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        <span class="comment">//处理时间</span></span><br><span class="line">        SimpleModule simpleModule = <span class="keyword">new</span> SimpleModule();</span><br><span class="line">        simpleModule.addSerializer(<span class="built_in">DateTime</span>.<span class="keyword">class</span>, <span class="keyword">new</span> JodaDateTimeJsonSerializer());</span><br><span class="line">        simpleModule.addDeserializer(<span class="built_in">DateTime</span>.<span class="keyword">class</span>, <span class="keyword">new</span> JodaDateTimeJsonDeSerializer());</span><br><span class="line">        objectMapper.registerModule(simpleModule);</span><br><span class="line">        <span class="comment">//注册objectMapper</span></span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line">        <span class="comment">//value序列化</span></span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//value hashmap序列化</span></span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</code></pre>
<h1 id="JodaDateTimeJsonSerializer"><a href="#JodaDateTimeJsonSerializer" class="headerlink" title="JodaDateTimeJsonSerializer"></a>JodaDateTimeJsonSerializer</h1><pre><code><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.<span class="type">JsonGenerator</span>;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="type">JsonSerializer</span>;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="type">SerializerProvider</span>;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.<span class="type">DateTime</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">JodaDateTimeJsonSerializer</span> <span class="keyword">extends</span> <span class="title">JsonSerializer&lt;DateTime&gt;</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void serialize(<span class="type">DateTime</span> date, <span class="type">JsonGenerator</span> jsonGenerator, <span class="type">SerializerProvider</span> serializerProvider) <span class="keyword">throws</span> <span class="type">IOException</span> {</span><br><span class="line">        jsonGenerator.writeString(date.toString(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</code></pre>
<h1 id="JodaDateTimeJsonDeSerializer"><a href="#JodaDateTimeJsonDeSerializer" class="headerlink" title="JodaDateTimeJsonDeSerializer"></a>JodaDateTimeJsonDeSerializer</h1><pre><code><figure class="highlight scala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.<span class="type">JsonParser</span>;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.<span class="type">JsonProcessingException</span>;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="type">DeserializationContext</span>;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="type">JsonDeserializer</span>;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.<span class="type">DateTime</span>;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.format.<span class="type">DateTimeFormat</span>;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.format.<span class="type">DateTimeFormatter</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">JodaDateTimeJsonDeSerializer</span> <span class="keyword">extends</span> <span class="title">JsonDeserializer&lt;DateTime&gt;</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">DateTime</span> deserialize(<span class="type">JsonParser</span> jsonParser, <span class="type">DeserializationContext</span> deserializationContext) <span class="keyword">throws</span> <span class="type">IOException</span>, <span class="type">JsonProcessingException</span> {</span><br><span class="line">        <span class="type">String</span> s = jsonParser.readValueAs(<span class="type">String</span>.<span class="keyword">class</span>);</span><br><span class="line">        <span class="type">DateTimeFormatter</span> dateTimeFormatter = <span class="type">DateTimeFormat</span>.forPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="type">DateTime</span>.parse(s,dateTimeFormatter);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringUtil</title>
    <url>/2021/06/03/32-SpringUtil/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/32.jpg"></p>
</span>

<span id="more"></span>

<h1 id="SpringUtil"><a href="#SpringUtil" class="headerlink" title="SpringUtil"></a>SpringUtil</h1><figure class="highlight typescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringUtil</span> <span class="title">implements</span> <span class="title">ApplicationContextAware</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> setApplicationContext(ApplicationContext applicationContext) throws BeansException {</span><br><span class="line">        <span class="keyword">if</span>(SpringUtil.applicationContext == <span class="literal">null</span>) {</span><br><span class="line">            SpringUtil.applicationContext = applicationContext;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取applicationContext</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="function"><span class="title">getApplicationContext</span>(<span class="params"></span>)</span> {</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过name获取 Bean.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">Object</span> <span class="function"><span class="title">getBean</span>(<span class="params"><span class="built_in">String</span> name</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(name);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过class获取Bean.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="function"><span class="title">getBean</span>(<span class="params">Class&lt;T&gt; clazz</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(clazz);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过name,以及Clazz返回指定的Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="function"><span class="title">getBean</span>(<span class="params"><span class="built_in">String</span> name,Class&lt;T&gt; clazz</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(name, clazz);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>JwtTokenFilter</title>
    <url>/2021/06/03/31-JwtTokenFilter/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/31.jpg"></p>
</span>

<span id="more"></span>

<h1 id="JwtTokenFilter"><a href="#JwtTokenFilter" class="headerlink" title="JwtTokenFilter"></a>JwtTokenFilter</h1><pre><code><figure class="highlight aspectj"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.organic.common.util.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> com.organic.common.util.RedisUtil;</span><br><span class="line"><span class="keyword">import</span> com.organic.common.util.ResultUtil;</span><br><span class="line"><span class="keyword">import</span> com.organic.common.util.SpringUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.RedisConnectionFailureException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MEIXIONG058</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-6-24</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenFilter</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] ss = <span class="keyword">new</span> String[]{<span class="string">"/image/qr"</span>, <span class="string">"/export"</span>,<span class="string">"/error"</span>,<span class="string">"/not"</span>};</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">run</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">for</span> (String s : ss) {</span><br><span class="line">            <span class="keyword">if</span> (request.getRequestURI().contains(s)) {</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        String authToken = request.getHeader(<span class="string">"AuthToken"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(authToken)) {</span><br><span class="line">            authToken = request.getParameter(<span class="string">"AuthToken"</span>);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(authToken)) {</span><br><span class="line">                <span class="function"><span class="keyword">return</span> <span class="title">context</span><span class="params">(response, <span class="string">"AuthToken is NULL "</span>, <span class="number">403</span>)</span></span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//通过新key去解密数据层</span></span><br><span class="line">        String userId;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            userId = JwtUtils.verifyTokenGetUserId(authToken);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.<span class="keyword">error</span>(e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> context(response, e.getMessage(), <span class="number">403</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            RedisUtil redisUtil = (RedisUtil) SpringUtil.getBean(<span class="string">"redisUtil"</span>);</span><br><span class="line">            String token = (String) redisUtil.get(<span class="string">"user:"</span> + userId);</span><br><span class="line">            <span class="keyword">if</span> (token == <span class="keyword">null</span>) {</span><br><span class="line">                <span class="function"><span class="keyword">return</span> <span class="title">context</span><span class="params">(response, <span class="string">"TOKEN已经过期"</span>, <span class="number">403</span>)</span></span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (!token.equals(authToken)) {</span><br><span class="line">                <span class="function"><span class="keyword">return</span> <span class="title">context</span><span class="params">(response, <span class="string">"TOKEN未匹配"</span>, <span class="number">403</span>)</span></span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//多加10分钟过期时间 - 删除用户需要重新清空redis</span></span><br><span class="line">            redisUtil.set(<span class="string">"user:"</span> + userId, authToken, <span class="number">3600</span>L);</span><br><span class="line">        } <span class="keyword">catch</span> (RedisConnectionFailureException e) {</span><br><span class="line">            <span class="function"><span class="keyword">return</span> <span class="title">context</span><span class="params">(response, <span class="string">"redis连接失败"</span>, <span class="number">403</span>)</span></span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">boolean</span> <span class="title">context</span><span class="params">(HttpServletResponse response, String resultInfo, <span class="keyword">int</span> statusCode)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        response.setCharacterEncoding(StandardCharsets.UTF_8.toString());</span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">        response.setStatus(<span class="number">200</span>);</span><br><span class="line">        response.getWriter().print(JSON.toJSONString(ResultUtil.<span class="keyword">error</span>(statusCode, resultInfo)));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="title">run</span><span class="params">(request, response, <span class="keyword">handler</span>)</span></span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>, Exception ex)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</code></pre>
<h1 id="JwtUtils"><a href="#JwtUtils" class="headerlink" title="JwtUtils"></a>JwtUtils</h1><pre><code><figure class="highlight typescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTCreator;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTVerifier;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.Claim;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> final <span class="keyword">static</span> <span class="built_in">String</span> SECRET = <span class="string">"sds3434ads@#@$@$fd33gf545gfg"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">String</span> <span class="function"><span class="title">createToken</span>(<span class="params"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; params</span>)</span> {</span><br><span class="line">        <span class="keyword">return</span> createToken(params, SECRET);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JWT 生成Token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>params 参数map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>secret 加密secret</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws <span class="variable">Exception</span></span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">String</span> <span class="function"><span class="title">createToken</span>(<span class="params"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; params, <span class="built_in">String</span> secret</span>)</span> {</span><br><span class="line">        <span class="built_in">Date</span> iatDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="comment">// header Map</span></span><br><span class="line">        <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"alg"</span>, <span class="string">"HS256"</span>);</span><br><span class="line">        map.put(<span class="string">"typ"</span>, <span class="string">"JWT"</span>);</span><br><span class="line">        JWTCreator.Builder builder = JWT.create().withHeader(map);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">String</span> key : params.keySet()) {</span><br><span class="line">            builder = builder.withClaim(key, params.get(key));</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">String</span> token = builder.withIssuedAt(iatDate).sign(Algorithm.HMAC256(secret));</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, Claim&gt; <span class="function"><span class="title">verifyToken</span>(<span class="params"><span class="built_in">String</span> token</span>)</span> {</span><br><span class="line">        <span class="keyword">return</span> verifyToken(token, SECRET);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">token</span></span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">secret</span></span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, Claim&gt; <span class="function"><span class="title">verifyToken</span>(<span class="params"><span class="built_in">String</span> token, <span class="built_in">String</span> secret</span>)</span> {</span><br><span class="line">        DecodedJWT jwt = <span class="literal">null</span>;</span><br><span class="line">        JWTVerifier verifier = JWT.require(Algorithm.HMAC256(secret)).build();</span><br><span class="line">        jwt = verifier.verify(token);</span><br><span class="line">        <span class="keyword">return</span> jwt.getClaims();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">String</span> <span class="function"><span class="title">verifyTokenGetUserId</span>(<span class="params"><span class="built_in">String</span> token</span>)</span> {</span><br><span class="line">        <span class="keyword">return</span> verifyTokenGetUserId(token, SECRET);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">token</span></span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">secret</span></span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">String</span> <span class="function"><span class="title">verifyTokenGetUserId</span>(<span class="params"><span class="built_in">String</span> token, <span class="built_in">String</span> secret</span>)</span> {</span><br><span class="line">        DecodedJWT jwt = <span class="literal">null</span>;</span><br><span class="line">        JWTVerifier verifier = JWT.require(Algorithm.HMAC256(secret)).build();</span><br><span class="line">        jwt = verifier.verify(token);</span><br><span class="line">        <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, Claim&gt; map = jwt.getClaims();</span><br><span class="line">        Claim claim = map.get(<span class="string">"userId"</span>);</span><br><span class="line">        <span class="keyword">return</span> claim.asString();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Jwt</tag>
      </tags>
  </entry>
  <entry>
    <title>Activti5</title>
    <url>/2021/06/04/33-Activti5/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/33.jpg"></p>
</span>

<span id="more"></span>

<h1 id="Activiti的25张表"><a href="#Activiti的25张表" class="headerlink" title="Activiti的25张表"></a>Activiti 的 25 张表</h1><ul>
<li><p>Activiti 的运行支持，必须要有 Activiti 的 25 张表，主要是在流程运行过程中，记录存储一些参与流程的用户主体，组，以及流程定义的存储，流程执行时候的一些信息，以及流程的历史信息等</p>
</li>
<li><p>我们先写一个小实例，来把 Activiti 的 25 张表自动生成出来；</p>
</li>
<li><p>我们先建一个 Maven 项目 ActivitiDemo1</p>
</li>
<li><p>pom.xml 里加上 Activiti 支持，以及 mysql 驱动包。</p>
  <figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.19.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.19.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-bpmn-model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.19.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>然后我们写一个测试方法，testCreateTable</p>
</li>
<li><p>并且在创建 db_activiti 数据库；</p>
</li>
<li><p>我们要先来获取流程引擎配置，然后来配置流程引擎，要配置驱动包，url，数据库用户名，密码；</p>
</li>
<li><p>还要设置 schema，这里的 schema 要设置成 update。这样可以自动更新</p>
</li>
<li><p>配置后，我们通过配置来获取流程引擎。创建实例的时候我们就可以自动生成需要的 25 张表。</p>
</li>
<li><p>代码：</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">package com.java1234.activiti.test;</span><br><span class="line"> </span><br><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.activiti.engine.ProcessEngineConfiguration;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"> </span><br><span class="line">public <span class="keyword">class</span> ActivitiTest01 {</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成25张Activiti表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void test<span class="constructor">CreateTable()</span> {</span><br><span class="line">        <span class="comment">// 引擎配置</span></span><br><span class="line">        ProcessEngineConfiguration pec=<span class="module-access"><span class="module"><span class="identifier">ProcessEngineConfiguration</span>.</span></span>create<span class="constructor">StandaloneProcessEngineConfiguration()</span>;</span><br><span class="line">        pec.set<span class="constructor">JdbcDriver(<span class="string">"com.mysql.jdbc.Driver"</span>)</span>;</span><br><span class="line">        pec.set<span class="constructor">JdbcUrl(<span class="string">"jdbc:mysql://localhost:3306/db_activiti"</span>)</span>;</span><br><span class="line">        pec.set<span class="constructor">JdbcUsername(<span class="string">"root"</span>)</span>;</span><br><span class="line">        pec.set<span class="constructor">JdbcPassword(<span class="string">"123456"</span>)</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * false 不能自动创建表</span></span><br><span class="line"><span class="comment">         * create-drop 先删除表再创建表</span></span><br><span class="line"><span class="comment">         * true 自动创建和更新表  </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        pec.set<span class="constructor">DatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE)</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 获取流程引擎对象</span></span><br><span class="line">        ProcessEngine processEngine=pec.build<span class="constructor">ProcessEngine()</span>;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>搞定</p>
  <figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">ACT_RE_*: <span class="string">'RE'</span>表示repository。 这个前缀的表包含了流程定义和流程静态资源 （图片，规则，等等）。</span><br><span class="line"></span><br><span class="line">ACT_RU_*: <span class="string">'RU'</span>表示<span class="keyword">runtime</span>。 这些运行时的表，包含流程实例，任务，变量，异步任务，等运行中的数据。</span><br><span class="line"></span><br><span class="line"> Activiti只在流程实例执行过程中保存这些数据， 在流程结束时就会删除这些记录。 这样运行时表可以一直很小速度很快。</span><br><span class="line"></span><br><span class="line">ACT_ID_*: <span class="string">'ID'</span>表示identity。 这些表包含身份信息，比如用户，组等等。</span><br><span class="line"></span><br><span class="line">ACT_HI_*: <span class="string">'HI'</span>表示<span class="keyword">history</span>。 这些表包含历史数据，比如历史流程实例， 变量，任务等等。</span><br><span class="line"></span><br><span class="line">ACT_GE_*: <span class="string">'GE'</span>表示general。通用数据， 用于不同场景下，如存放资源文件。</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="引入Activiti配置文件activiti-cfg-xml"><a href="#引入Activiti配置文件activiti-cfg-xml" class="headerlink" title="引入Activiti配置文件activiti.cfg.xml"></a>引入 Activiti 配置文件 activiti.cfg.xml</h1><ul>
<li><p>前面我们用代码实现了生成 25 张 activiti 表，今天我们用 Activiti 提供的 activiti.cfg.xml 配置文件来简化实现前面的功能；</p>
</li>
<li><p><a href="http://activiti.org/userguide/index.html#configuration">官方文档参考地址</a></p>
</li>
<li><p>我们先在 src/test/resources 下创建一个 xml 文件 名字是：activiti.cfg.xml</p>
</li>
<li><p>然后我们从官方文档贴下参考的 xml 代码：</p>
  <figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;bean <span class="built_in">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="built_in">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"jdbcUrl"</span> value=<span class="string">"jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000"</span> /&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"jdbcDriver"</span> value=<span class="string">"org.h2.Driver"</span> /&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"jdbcUsername"</span> value=<span class="string">"sa"</span> /&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"jdbcPassword"</span> value=<span class="string">""</span> /&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"databaseSchemaUpdate"</span> value=<span class="string">"true"</span> /&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"jobExecutorActivate"</span> value=<span class="string">"false"</span> /&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"asyncExecutorEnabled"</span> value=<span class="string">"true"</span> /&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"asyncExecutorActivate"</span> value=<span class="string">"false"</span> /&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"mailServerHost"</span> value=<span class="string">"mail.my-corp.com"</span> /&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"mailServerPort"</span> value=<span class="string">"5025"</span> /&gt;</span><br><span class="line">  &lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>这里的话，我们要根据我们的项目 修改 jdbcUrl jdbcDriver jdbcUsername jdbcPassword 当然还有下面的配置我们可以去掉一些 后面会降到这些配置的用途；</p>
</li>
<li><p>修改完后的 xml 如下：</p>
  <figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/db_activiti"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcDriver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUsername"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcPassword"</span> <span class="attr">value</span>=<span class="string">"123456"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>接下来我们就是要通过代码来读取配置文件，然后获取工作流引擎实例：</p>
</li>
<li><p>代码如下：</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用xml配置 简化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Test</span><br><span class="line">public void test<span class="constructor">CreateTableWithXml()</span>{</span><br><span class="line">    <span class="comment">// 引擎配置</span></span><br><span class="line">    ProcessEngineConfiguration pec=<span class="module-access"><span class="module"><span class="identifier">ProcessEngineConfiguration</span>.</span></span>create<span class="constructor">ProcessEngineConfigurationFromResource(<span class="string">"activiti.cfg.xml"</span>)</span>;</span><br><span class="line">    <span class="comment">// 获取流程引擎对象</span></span><br><span class="line">    ProcessEngine processEngine=pec.build<span class="constructor">ProcessEngine()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>然后我们测试的时候 先把前面 db_activiti 数据下的表 全部删除；然后运行上面的测试类，我们会发现 表自动生成了：</p>
</li>
<li><p>表依然是前面的 25 张表；</p>
</li>
<li><p>我们会发现，使用 xml 配置会简化很多东西。。</p>
</li>
</ul>
<h1 id="来源地址"><a href="#来源地址" class="headerlink" title="来源地址"></a>来源地址</h1><blockquote>
<p><a href="http://blog.java1234.com/blog/articles/77.html">java1234.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Activti5</tag>
      </tags>
  </entry>
  <entry>
    <title>Activti5-hello</title>
    <url>/2021/06/04/34-Activti5-hello/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/34.jpg"></p>
</span>

<span id="more"></span>

<h1 id="Activiti-Hello实现"><a href="#Activiti-Hello实现" class="headerlink" title="Activiti Hello实现"></a>Activiti Hello 实现</h1><ul>
<li><p>首先第一步，我们要操作流程，必须获取流程引擎实例；</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取默认的流程引擎实例 会自动读取activiti.cfg.xml文件 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> ProcessEngine processEngine=<span class="module-access"><span class="module"><span class="identifier">ProcessEngines</span>.</span></span>get<span class="constructor">DefaultProcessEngine()</span>;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>第二步，我们需要把前面我们绘制的流程定义图，部署下（底层是解析 XML，然后把数据存到数据库的表中去）；</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 部署流程定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Test</span><br><span class="line">public void deploy<span class="literal">()</span>{</span><br><span class="line">    <span class="comment">// 获取部署对象</span></span><br><span class="line">    Deployment deployment=processEngine.get<span class="constructor">RepositoryService()</span> <span class="comment">// 部署Service</span></span><br><span class="line">                 .create<span class="constructor">Deployment()</span>  <span class="comment">// 创建部署</span></span><br><span class="line">                 .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/helloWorld.bpmn"</span>)</span>  <span class="comment">// 加载资源文件</span></span><br><span class="line">                 .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/helloWorld.png"</span>)</span>   <span class="comment">// 加载资源文件</span></span><br><span class="line">                 .name(<span class="string">"HelloWorld流程"</span>)  <span class="comment">// 流程名称</span></span><br><span class="line">                 .deploy<span class="literal">()</span>; <span class="comment">// 部署</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署ID:"</span>+deployment.get<span class="constructor">Id()</span>);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署Name:"</span>+deployment.get<span class="constructor">Name()</span>);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>第三步：我们要启动流程实例，这样一个流程才开始；</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动流程实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Test</span><br><span class="line">public void start<span class="literal">()</span>{</span><br><span class="line">    <span class="comment">// 启动并获取流程实例</span></span><br><span class="line">    ProcessInstance processInstance=processEngine.get<span class="constructor">RuntimeService()</span> <span class="comment">// 运行时流程实例Service</span></span><br><span class="line">        .start<span class="constructor">ProcessInstanceByKey(<span class="string">"myFirstProcess"</span>)</span>; <span class="comment">// 流程定义表的KEY字段值</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+processInstance.get<span class="constructor">Id()</span>);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程定义ID:"</span>+processInstance.get<span class="constructor">ProcessDefinitionId()</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>第四步：启动流程后，我们流程会走到 helloWorld 节点，我们来查看下”java1234_小锋” 这个用户的任务；</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查看任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Test</span><br><span class="line">public void find<span class="constructor">Task()</span>{</span><br><span class="line">    <span class="comment">// 查询并且返回任务即可</span></span><br><span class="line">    List&lt;Task&gt; taskList=processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .create<span class="constructor">TaskQuery()</span>  <span class="comment">// 创建任务查询</span></span><br><span class="line">            .task<span class="constructor">Assignee(<span class="string">"java1234_小锋"</span>)</span> <span class="comment">// 指定某个人</span></span><br><span class="line">            .<span class="built_in">list</span><span class="literal">()</span>; </span><br><span class="line">    <span class="keyword">for</span>(Task task:taskList){</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务ID:"</span>+task.get<span class="constructor">Id()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务名称："</span>+task.get<span class="constructor">Name()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务创建时间："</span>+task.get<span class="constructor">CreateTime()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务委派人："</span>+task.get<span class="constructor">Assignee()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+task.get<span class="constructor">ProcessInstanceId()</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>第五步：我们来完成 helloWorld 节点任务，让流程走完；</p>
  <figure class="highlight typescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 完成任务</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">completeTask</span>(<span class="params"></span>)</span>{</span><br><span class="line">processEngine.getTaskService() <span class="comment">// 任务相关Service</span></span><br><span class="line">        .complete(<span class="string">"2504"</span>); <span class="comment">// 指定要完成的任务ID</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>这里有个很重要的概念，流程定义和流程实例的关系。大家可以把流程定义和流程实例的关系，理解成类和对象的关系；</p>
</li>
<li><p>流程定义就是一个模版，流程实例就是通过模版搞出来的具体的可用的东西。</p>
</li>
<li><p>然后我们来运行 deploy 方法，部署流程定义，这时候我们的流程定义表会发生一些变化；</p>
</li>
<li><ul>
<li>首先 act_re_deployment 流程定义部署表，插入了一条数据；</li>
</ul>
</li>
<li><ul>
<li>然后 act_re_prodef 流程定义表也会有插入一条数据；</li>
</ul>
</li>
<li><ul>
<li>这里有流程定义 id name key version 等重要信息；后面可以通过接口来获取这些数据；</li>
</ul>
</li>
<li><ul>
<li> 还有一个 act_ge_bytearray 表 用来存资源信息；</li>
</ul>
</li>
<li><ul>
<li>我们可以看到，把两个资源文件都存了  包括名称 以及文件内容；</li>
</ul>
</li>
<li><ul>
<li>以上是部署流程定义 数据库表里发生的事情；</li>
</ul>
</li>
</ul>
<ul>
<li><p>然后我们继续 ，下面来启动流程实例；</p>
</li>
<li><ul>
<li>运行 start 方法；</li>
</ul>
</li>
<li><ul>
<li>启动流程，数据库流程运行表也会发生相应的变化；</li>
</ul>
</li>
<li><ul>
<li>首先是运行时流程任务表：act_ru_task；插入了一条任务数据；</li>
</ul>
</li>
<li><ul>
<li>这个表很重要，ID_是任务 id 数据 2504 PROC_INST_ID_是流程实例 ID 2501 以及 Name 创建时间等；</li>
</ul>
</li>
<li><ul>
<li>接下来是 act_ru_execution 运行时流程执行表；</li>
</ul>
</li>
<li><ul>
<li>这里的话 存的流程执行相关信息；</li>
</ul>
</li>
<li><ul>
<li> 接下来是 act_ru_identitylink 是于执行主体相关信息表</li>
</ul>
</li>
<li><ul>
<li>当然我们这里是用具体的用户去执行的，group 组的概念</li>
</ul>
</li>
</ul>
<ul>
<li><p>流程实例启动完，接下来就到了 helloWorld 任务节点</p>
</li>
<li><ul>
<li>我们这时候可以来查看下”Java1234_小锋” 任务</li>
</ul>
</li>
<li><ul>
<li><p>运行 findTask 方法，控制台输出；</p>
<figure class="highlight avrasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="symbol">SLF4J:</span> Failed to load class <span class="string">"org.slf4j.impl.StaticLoggerBinder"</span>.</span><br><span class="line"><span class="symbol">SLF4J:</span> Defaulting to no-operation (<span class="keyword">NOP</span>) logger implementation</span><br><span class="line"><span class="symbol">SLF4J:</span> See http://www.slf4j<span class="meta">.org</span>/codes.html<span class="meta">#StaticLoggerBinder for further details.</span></span><br><span class="line">任务ID:<span class="number">2504</span></span><br><span class="line">任务名称：HelloWorld</span><br><span class="line">任务创建时间：Mon Apr <span class="number">11</span> <span class="number">13</span>:<span class="number">30</span>:<span class="number">41</span> CST <span class="number">2016</span></span><br><span class="line">任务委派人：java1234_小锋</span><br><span class="line">流程实例ID:<span class="number">2501</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
</li>
<li><ul>
<li>说明这个用户有任务可以执行；</li>
</ul>
</li>
<li><ul>
<li>我们继续走流程 执行 completeTask 方法；</li>
</ul>
</li>
<li><ul>
<li>执行完后，流程其实就已经走完了。</li>
</ul>
</li>
<li><ul>
<li>这时候我们再运行 findTask，啥都没有输入，已经没有任务了；</li>
</ul>
</li>
</ul>
<ul>
<li><p>OK 流程执行完，数据库表会发生什么变化呢？</p>
</li>
<li><ul>
<li>首先 ru 开头的运行时候所有表的数据都没了，因为现在流程都走完了。不需要那些数据了；</li>
</ul>
</li>
<li><ul>
<li>然后在 hi 开头的表里，存了不少数据，主要是用来归档查询用的；</li>
</ul>
</li>
<li><p>act_hi_taskinst 历史流程实例任务表加了一条任务数据；</p>
</li>
<li><p>act_hi_procinst 历史流程实例实例表加了一条流程实例相关信息的数据（包括开始时间，结束时间等等信息）；</p>
</li>
<li><p>act_hi_identitylink 历史流程实例参数者的表加了一条数据；</p>
</li>
<li><p>act_hi_actinst 历史活动节点表加了三条流程活动节点信息的数据（每个流程实例具体的执行活动节点的信息）；</p>
</li>
</ul>
<h1 id="Activiti流程定义部署之ZIP方式"><a href="#Activiti流程定义部署之ZIP方式" class="headerlink" title="Activiti流程定义部署之ZIP方式"></a>Activiti 流程定义部署之 ZIP 方式</h1><ul>
<li><p>前面的话，我们使用的是 classpath 加载资源文件方式来部署流程定义的，但是这种方式有局限性，只能适合小项目，固定写死的流程；</p>
</li>
<li><p>实际项目的话，需要来动态导入流程定义文件，通过把 bpmn 和 png 文件打包成 zip 压缩包，然后用户界面直接导入到系统，然后解析，部署流程定义；</p>
</li>
<li><p>Activiti 是支持这种方式的。今天我们来实现下这种方式；</p>
</li>
<li><p>首先第一步，把 bpmn 和 png 文件打成 zip 压缩包，放到 diagrams 文件夹下</p>
</li>
<li><p>之前使用方式</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.activiti.engine.ProcessEngines;</span><br><span class="line">import org.activiti.engine.repository.Deployment;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"> </span><br><span class="line">public <span class="keyword">class</span> ProcessDefinition {</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取默认的流程引擎实例 会自动读取activiti.cfg.xml文件 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ProcessEngine processEngine=<span class="module-access"><span class="module"><span class="identifier">ProcessEngines</span>.</span></span>get<span class="constructor">DefaultProcessEngine()</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 部署流程定义使用classpath方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void deploy<span class="constructor">WithClassPath()</span>{</span><br><span class="line">        <span class="comment">// 获取部署对象</span></span><br><span class="line">        Deployment deployment=processEngine.get<span class="constructor">RepositoryService()</span> <span class="comment">// 部署Service</span></span><br><span class="line">                     .create<span class="constructor">Deployment()</span>  <span class="comment">// 创建部署</span></span><br><span class="line">                     .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/helloWorld.bpmn"</span>)</span>  <span class="comment">// 加载资源文件</span></span><br><span class="line">                     .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/helloWorld.png"</span>)</span>   <span class="comment">// 加载资源文件</span></span><br><span class="line">                     .name(<span class="string">"HelloWorld流程"</span>)  <span class="comment">// 流程名称</span></span><br><span class="line">                     .deploy<span class="literal">()</span>; <span class="comment">// 部署</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署ID:"</span>+deployment.get<span class="constructor">Id()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署Name:"</span>+deployment.get<span class="constructor">Name()</span>);</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>下面我们用 zip 方式来实现，新建一个 deployWithZip 方法</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 部署流程定义使用zip方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Test</span><br><span class="line">public void deploy<span class="constructor">WithZip()</span>{</span><br><span class="line">    InputStream inputStream=this.get<span class="constructor">Class()</span>  <span class="comment">// 获取当前class对象</span></span><br><span class="line">                        .get<span class="constructor">ClassLoader()</span>   <span class="comment">// 获取类加载器</span></span><br><span class="line">                        .get<span class="constructor">ResourceAsStream(<span class="string">"diagrams/helloWorld.zip"</span>)</span>; <span class="comment">// 获取指定文件资源流</span></span><br><span class="line">    ZipInputStream zipInputStream=<span class="keyword">new</span> <span class="constructor">ZipInputStream(<span class="params">inputStream</span>)</span>; <span class="comment">// 实例化zip输入流对象</span></span><br><span class="line">    <span class="comment">// 获取部署对象</span></span><br><span class="line">    Deployment deployment=processEngine.get<span class="constructor">RepositoryService()</span> <span class="comment">// 部署Service</span></span><br><span class="line">                 .create<span class="constructor">Deployment()</span>  <span class="comment">// 创建部署</span></span><br><span class="line">                 .name(<span class="string">"HelloWorld流程2"</span>)  <span class="comment">// 流程名称</span></span><br><span class="line">                 .add<span class="constructor">ZipInputStream(<span class="params">zipInputStream</span>)</span>  <span class="comment">// 添加zip是输入流</span></span><br><span class="line">                 .deploy<span class="literal">()</span>; <span class="comment">// 部署</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署ID:"</span>+deployment.get<span class="constructor">Id()</span>);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署Name:"</span>+deployment.get<span class="constructor">Name()</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
  <figure class="highlight avrasm"><table><tbody><tr><td class="code"><pre><span class="line">我们运行这个测试类：</span><br><span class="line"></span><br><span class="line"><span class="symbol">SLF4J:</span> Failed to load class <span class="string">"org.slf4j.impl.StaticLoggerBinder"</span>.</span><br><span class="line"><span class="symbol">SLF4J:</span> Defaulting to no-operation (<span class="keyword">NOP</span>) logger implementation</span><br><span class="line"><span class="symbol">SLF4J:</span> See http://www.slf4j<span class="meta">.org</span>/codes.html<span class="meta">#StaticLoggerBinder for further details.</span></span><br><span class="line">流程部署ID:<span class="number">7501</span></span><br><span class="line">流程部署Name:HelloWorld流程<span class="number">2</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h1></li>
</ul>
<blockquote>
<p>部署流程定义设计到的表</p>
</blockquote>
<ul>
<li>act_re_deployment 部署流程表</li>
<li> act_re_procdef    流程定义表</li>
<li> act_ge_bytearray  资源文件表</li>
<li> act_ge_property   系统配置表</li>
</ul>
<blockquote>
<p>启动流程实例</p>
</blockquote>
<blockquote>
<blockquote>
<p>流程实例运行时</p>
</blockquote>
</blockquote>
<ul>
<li>act_ru_execution      部署流程表</li>
<li> act_ru_identitylink   身份联系表</li>
<li> act_ru_task           任务表</li>
<li> act_hi_actinst        历史 活动节点表</li>
<li> act_hi_identitylink   历史 身份联系表</li>
<li> act_hi_procinst       历史 流程实例表</li>
<li> act_hi_taskinst       历史 流程任务表</li>
</ul>
<blockquote>
<p>流程实例结束时</p>
</blockquote>
<ul>
<li>act_ru_execution      部署流程表 - 清空</li>
<li> act_ru_identitylink   身份联系表 - 清空</li>
<li> act_ru_task           任务表    - 清空</li>
<li> act_hi_actinst        历史 活动节点表 </li>
<li>act_hi_identitylink   历史 身份联系表</li>
<li> act_hi_procinst       历史 流程实例表 - 增加结束时间</li>
<li> act_hi_taskinst       历史 流程任务表</li>
</ul>
<h1 id="来源地址"><a href="#来源地址" class="headerlink" title="来源地址"></a>来源地址</h1><blockquote>
<p><a href="http://blog.java1234.com/blog/articles/82.html">java1234.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Activti5</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti5 流程定义查询</title>
    <url>/2021/06/04/35-Activiti5%E6%B5%81%E7%A8%8B%E5%AE%9A%E4%B9%89%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/35.jpg"></p>
</span>

<span id="more"></span>

<h1 id="流程定义查询"><a href="#流程定义查询" class="headerlink" title="流程定义查询"></a>流程定义查询</h1><ul>
<li><p>流程定义的查询，本质的话就是通过 Activiti 框架提供的 API 对 act_re_procdef 进行查询操作；</p>
</li>
<li><p>我们可以通过 API 把 act_re_procdef 表所有列的数据全部查询出来；以后开发系统的时候 管理员用户可以通过用户界面来维护这些数据；</p>
</li>
<li><p>Activiti 给我们提供非常丰富的 API，用来模拟 SQL 查询，包括通过某些字段查询，模糊查询，分页查询，排序等等；</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询流程定义 返回流程定义集合 ---对应act_re_procdef</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Test</span><br><span class="line">public void <span class="built_in">list</span><span class="literal">()</span>{</span><br><span class="line">    List&lt;ProcessDefinition&gt; pdList=processEngine.get<span class="constructor">RepositoryService()</span> <span class="comment">// 获取service类</span></span><br><span class="line">        .create<span class="constructor">ProcessDefinitionQuery()</span> <span class="comment">// 创建流程定义查询</span></span><br><span class="line">        .process<span class="constructor">DefinitionKey(<span class="string">"myFirstProcess"</span>)</span> <span class="comment">// 通过key查询</span></span><br><span class="line">        .<span class="built_in">list</span><span class="literal">()</span>; <span class="comment">// 返回一个集合</span></span><br><span class="line">    <span class="keyword">for</span>(ProcessDefinition pd:pdList){</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"ID_："</span>+pd.get<span class="constructor">Id()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"NAME_："</span>+pd.get<span class="constructor">Name()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"KEY_："</span>+pd.get<span class="constructor">Key()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"VERSION_："</span>+pd.get<span class="constructor">Version()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"==================="</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>这里我们通过流程定义的 KEY 查询返回一个集合。然后我们输入流程定义表的部分关键字段</p>
<figure class="highlight avrasm"><table><tbody><tr><td class="code"><pre><span class="line">运行输入：</span><br><span class="line"><span class="symbol">SLF4J:</span> Failed to load class <span class="string">"org.slf4j.impl.StaticLoggerBinder"</span>.</span><br><span class="line"><span class="symbol">SLF4J:</span> Defaulting to no-operation (<span class="keyword">NOP</span>) logger implementation</span><br><span class="line"><span class="symbol">SLF4J:</span> See http://www.slf4j<span class="meta">.org</span>/codes.html<span class="meta">#StaticLoggerBinder for further details.</span></span><br><span class="line">ID_：myFirstProcess:<span class="number">1</span>:<span class="number">4</span></span><br><span class="line">NAME_：My First process</span><br><span class="line">KEY_：myFirstProcess</span><br><span class="line">VERSION_：<span class="number">1</span></span><br><span class="line">===================</span><br><span class="line">ID_：myFirstProcess:<span class="number">2</span>:<span class="number">7504</span></span><br><span class="line">NAME_：My First process</span><br><span class="line">KEY_：myFirstProcess</span><br><span class="line">VERSION_：<span class="number">2</span></span><br><span class="line">===================</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>当然我们也可以通过流程定义 ID 来查询某个流程定义；单个返回结果；</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过ID查询当个流程定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Test</span><br><span class="line">public void get<span class="constructor">ById()</span>{</span><br><span class="line">    ProcessDefinition pd=processEngine.get<span class="constructor">RepositoryService()</span> <span class="comment">// 获取service类</span></span><br><span class="line">            .create<span class="constructor">ProcessDefinitionQuery()</span> <span class="comment">// 创建流程定义查询</span></span><br><span class="line">            .process<span class="constructor">DefinitionId(<span class="string">"myFirstProcess:1:4"</span>)</span> <span class="comment">// 通过id查询</span></span><br><span class="line">            .single<span class="constructor">Result()</span>; <span class="comment">// 查询返回当个结果</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"ID_："</span>+pd.get<span class="constructor">Id()</span>);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"NAME_："</span>+pd.get<span class="constructor">Name()</span>);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"KEY_："</span>+pd.get<span class="constructor">Key()</span>);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"VERSION_："</span>+pd.get<span class="constructor">Version()</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>这里我们主要用到 singleResult () 方法；</p>
  <figure class="highlight avrasm"><table><tbody><tr><td class="code"><pre><span class="line">运行结果：</span><br><span class="line"></span><br><span class="line"><span class="symbol">SLF4J:</span> Failed to load class <span class="string">"org.slf4j.impl.StaticLoggerBinder"</span>.</span><br><span class="line"><span class="symbol">SLF4J:</span> Defaulting to no-operation (<span class="keyword">NOP</span>) logger implementation</span><br><span class="line"><span class="symbol">SLF4J:</span> See http://www.slf4j<span class="meta">.org</span>/codes.html<span class="meta">#StaticLoggerBinder for further details.</span></span><br><span class="line">ID_：myFirstProcess:<span class="number">1</span>:<span class="number">4</span></span><br><span class="line">NAME_：My First process</span><br><span class="line">KEY_：myFirstProcess</span><br><span class="line">VERSION_：<span class="number">1</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>模拟条件查询，可以根据某些字段查询，以及 Like 模糊查询；</p>
</li>
<li><p>模拟 SQL 排序查询；</p>
</li>
<li><p>当然可以升序降序； .orderByProcessDefinitionKey ().desc ()  或者.acc ()；</p>
</li>
<li><p>还有 listPage 分页查询；</p>
</li>
</ul>
<h1 id="Activiti流程定义删除"><a href="#Activiti流程定义删除" class="headerlink" title="Activiti流程定义删除"></a>Activiti 流程定义删除</h1><ul>
<li><p>前面我们把流程定义添加 查询讲了，现在讲下流程定义的删除；</p>
</li>
<li><p>比如我们某个流程定义不需要，我们要删除它；这时候我们可以通过接口，通过流程定义部署 ID 来删除流程定义；</p>
  <figure class="highlight d"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除流程定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">delete</span>(){</span><br><span class="line">    processEngine.getRepositoryService()</span><br><span class="line">        .deleteDeployment(<span class="string">"12501"</span>); <span class="comment">// 流程部署ID</span></span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"delete OK！"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>上面那种有个问题，一般情况不会有问题，但是，假如这个流程定义的流程实例在运行活动中，未完结。</p>
</li>
<li><p>这时候我们执行上面的代码，会报错；</p>
</li>
<li><p>本质的话，就是数据库里的数据 有主外键关联，不能删除；</p>
</li>
</ul>
<ul>
<li><p>我们实际情况的，假如一个流程定义都不需要了。那那些活动的流程实例也直接了当的级联删除；</p>
</li>
<li><p>所以我们这里要搞级联删除</p>
</li>
<li><p>这时候 任何情况都能直接删除流程定义； 我们开发的时候就用这种；</p>
  <figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 级联删除 已经在使用的流程实例信息也会被级联删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> deleteCascade(){</span><br><span class="line">    processEngine.getRepositoryService()</span><br><span class="line">        .deleteDeployment("12501", <span class="keyword">true</span>); // 默认是<span class="keyword">false</span> <span class="keyword">true</span>就是级联删除</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println("delete cascade OK!");</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h1 id="Activiti获取流程定义图图片"><a href="#Activiti获取流程定义图图片" class="headerlink" title="Activiti获取流程定义图图片"></a>Activiti 获取流程定义图图片</h1></li>
<li><p>在开发流程管理系统的时候，一般在流程定义模块，我们都要求能够查看某个流程定义的流程图片，</p>
</li>
<li><p>对应的数据表 act_ge_bytearray 的 BYTES_字段；</p>
</li>
<li><p>Activiti 给我们提供了接口，可以返回一个资源文件输入流，然后我们可以得到一张图片，存到本地服务器，然后我们可以通过图片路径在网页上显示，</p>
</li>
<li><p>来实现管理员查询流程定义图片的功能；</p>
</li>
<li><p>可能你们的和我的流程部署 ID 资源名称不一样，写上对应的即可，然后运行方法。我们会在 D 盘发现一个图片，即流程定义图图片。</p>
</li>
<li><p>实际开发的时候，我们把图片存到项目路径下，然后名字的话，可以根据当前日期年月日时分秒来命名，然后得到路径后，在新的页面，或者是模态窗口里显示图片；</p>
  <figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line">我们代码里用到了apache的commons包里的FileUtils类，所以我们在下pom.xml里加下commons_io的依赖：</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过流程部署ID获取流程图图片</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">@Test</span><br><span class="line">public void get<span class="constructor">ImageById()</span>throws Exception{</span><br><span class="line">InputStream inputStream=processEngine.get<span class="constructor">RepositoryService()</span></span><br><span class="line">    .get<span class="constructor">ResourceAsStream(<span class="string">"10001"</span>, <span class="string">"helloWorld.png"</span>)</span>; <span class="comment">// 根据流程部署ID和资源名称获取输入流</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">FileUtils</span>.</span></span>copy<span class="constructor">InputStreamToFile(<span class="params">inputStream</span>, <span class="params">new</span> File(<span class="string">"D:/helloWorld.png"</span>)</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="Activiti流程定义“修改”"><a href="#Activiti流程定义“修改”" class="headerlink" title="Activiti流程定义“修改”"></a>Activiti 流程定义 “修改”</h1><ul>
<li>前面讲了流程定义的添加，查询，删除。至于这个修改；我们今天来讨论下；</li>
<li>首先说下结论，流程定义是不能修改的；</li>
<li>这里举例子，假如一个流程定义的流程实例在活动运行中。假如可以修改，</li>
<li>本来要流转到 A 这个节点，因为流程定义修改了，流转到 B 这个节点。就不符合当时这个流程实例的初衷了；</li>
<li>所以一般开发的话，不能修改流程定义，我们是通过增加版本号的方式。来实现 “修改” 的；</li>
<li>在设计流程图的时候，这里的 Id 对应到数据库里的就是那个 Key 值  只要 Id 相同。就算是同一个流程定义；</li>
<li>比如我们可以发布多次，Id 一样，到数据库表那边 Key 作为版本属性 值会增加；</li>
<li>我们一般启动流程实例的时候，我们用 Key 来启动。这样启动的时候 就是用的最新版本的流程定义来启动流程实例的；假如用流程定义 Id 来启动 很不推荐；</li>
<li>流程定义的 Id 值组成的话 是 key 值：版本号：流程部署 ID；</li>
</ul>
<p>#Activiti 查询最新版本的流程定义集合</p>
<ul>
<li><p>因为每个流程定义都可能会有好几个版本，所以有时候我们有这样的需求，查询出最新版本的流程定义的集合；</p>
</li>
<li><p>怎么来实现呢？ 我们一般的思路是这样的。</p>
</li>
<li><p>第一步：我们通过 Activiti 接口来获取根据流程定义 Version 升序排序的流程定义的集合；</p>
</li>
<li><p>第二步：定义一个有序的 Map， Map 的 key 就是我们流程定义的 Key，Map 的值就是流程定义对象；</p>
</li>
<li><p>第三步：我们遍历第一步的集合，put (key,value)  假如 Key 相同，后者会覆盖前者；</p>
</li>
<li><p>第四步：我们获取 Map 的 values。即我们需要的最新版本的流程定义的集合；</p>
</li>
<li><p>为了演示，我们搞一个 MySecondProcess 流程定义；</p>
</li>
<li><p>然后我们部署流程定义三次；</p>
</li>
<li><p>数据库表里对应的添加三条流程定义信息；</p>
</li>
<li><p>下面我们上代码。来实现我们要的功能；</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询最新版本的流程定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Test</span><br><span class="line">public void <span class="built_in">list</span><span class="constructor">LastVersion()</span>throws Exception{</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 获取流程定义集合，根据Key升序排序</span></span><br><span class="line">    List&lt;ProcessDefinition&gt; listAll=processEngine.get<span class="constructor">RepositoryService()</span> <span class="comment">// 获取service类</span></span><br><span class="line">            .create<span class="constructor">ProcessDefinitionQuery()</span> <span class="comment">// 创建流程定义查询</span></span><br><span class="line">            .order<span class="constructor">ByProcessDefinitionVersion()</span>.asc<span class="literal">()</span> <span class="comment">// 根据流程定义版本升序</span></span><br><span class="line">            .<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line">    <span class="comment">// 定义有序Map 相同的key 假如添加map的值 后面的值会覆盖前面相同key的值</span></span><br><span class="line">    Map&lt;String,ProcessDefinition&gt; map=<span class="keyword">new</span> LinkedHashMap&lt;String,ProcessDefinition&gt;<span class="literal">()</span>;</span><br><span class="line">    <span class="comment">// 遍历集合 根据key来覆盖前面的值 来保证最新的Key覆盖前面的所有老的Key的值 </span></span><br><span class="line">    <span class="keyword">for</span>(ProcessDefinition pd:listAll){</span><br><span class="line">        map.put(pd.get<span class="constructor">Key()</span>, pd);</span><br><span class="line">    }</span><br><span class="line">    List&lt;ProcessDefinition&gt; pdList=<span class="keyword">new</span> LinkedList&lt;ProcessDefinition&gt;(map.values<span class="literal">()</span>);</span><br><span class="line">    <span class="keyword">for</span>(ProcessDefinition pd:pdList){</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"ID_："</span>+pd.get<span class="constructor">Id()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"NAME_："</span>+pd.get<span class="constructor">Name()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"KEY_："</span>+pd.get<span class="constructor">Key()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"VERSION_："</span>+pd.get<span class="constructor">Version()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"==================="</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="Activiti删除Key相同的所有流程定义"><a href="#Activiti删除Key相同的所有流程定义" class="headerlink" title="Activiti删除Key相同的所有流程定义"></a>Activiti 删除 Key 相同的所有流程定义</h1><ul>
<li><p>有时候我们一个流程定义不需要的，包括所有版本，这时候我们在用户界面上一个一个删除太麻烦；</p>
</li>
<li><p>所有有时候我们又这样的需求，一下子把所有 Key 相同的流程定义全部删除；</p>
</li>
<li><p>我们的思路是这样的；</p>
</li>
<li><p>第一步：根据 Key 获取所有的流程定义；</p>
</li>
<li><p>第二步：遍历集合，获取每个流程定义的流程部署 Id</p>
</li>
<li><p>第三步：我们根据流程部署 Id 即可删除所有的流程定义；</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除所有Key相同的流程定义</span></span><br><span class="line"><span class="comment"> * @throws Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Test</span><br><span class="line">public void delete<span class="constructor">ByKey()</span>throws Exception{</span><br><span class="line">    List&lt;ProcessDefinition&gt; pdList=processEngine.get<span class="constructor">RepositoryService()</span>  <span class="comment">// 获取service类</span></span><br><span class="line">            .create<span class="constructor">ProcessDefinitionQuery()</span> <span class="comment">// 创建流程定义查询</span></span><br><span class="line">            .process<span class="constructor">DefinitionKey(<span class="string">"mySecondProcess"</span>)</span> <span class="comment">// 根据Key查询</span></span><br><span class="line">            .<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line">    <span class="keyword">for</span>(ProcessDefinition pd:pdList){  <span class="comment">// 遍历集合 获取流程定义的每个部署Id，根据这个id来删除所有流程定义</span></span><br><span class="line">        processEngine.get<span class="constructor">RepositoryService()</span></span><br><span class="line">        .delete<span class="constructor">Deployment(<span class="params">pd</span>.<span class="params">getDeploymentId</span>()</span>, <span class="literal">true</span>); </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<p>#Activiti 查询流程实例状态</p>
<ul>
<li><p>在开发中，我们有时候需要查看下某个流程实例的状态，运行中 Or 执行结束 ？</p>
</li>
<li><p>这时候我们可以用流程实例 Id 去运行时执行表去查，假如能查到数据，说明流程实例还是运行，假如没查到，就说明这个流程实例已经运行结束了；</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询流程状态（正在执行 or 已经执行结束）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Test</span><br><span class="line">public void process<span class="constructor">State()</span>{</span><br><span class="line">    ProcessInstance pi=processEngine.get<span class="constructor">RuntimeService()</span> <span class="comment">// 获取运行时Service</span></span><br><span class="line">        .create<span class="constructor">ProcessInstanceQuery()</span> <span class="comment">// 创建流程实例查询</span></span><br><span class="line">        .process<span class="constructor">InstanceId(<span class="string">"22501"</span>)</span> <span class="comment">// 用流程实例ID查询</span></span><br><span class="line">        .single<span class="constructor">Result()</span>;</span><br><span class="line">    <span class="keyword">if</span>(pi!=null){</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程正在执行！"</span>);</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程已经执行结束！"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="Activiti-历史任务查询"><a href="#Activiti-历史任务查询" class="headerlink" title="Activiti 历史任务查询"></a>Activiti 历史任务查询</h1><ul>
<li><p>实际工作流项目中，有一个功能叫做 历史任务查询。</p>
</li>
<li><p>我们其实查询的是历史任务实例表；</p>
</li>
<li><p>当然这个表的话，不管是已经完结的任务 还是正在执行的任务，都会记录下这个表里。Activiti 给我们提供了一个接口 finished；</p>
</li>
<li><p>加了之后 就是查询已经完结的任务； 同理还有一个接口 unfinished 顾名思义，就是查询未完结的任务；当然这两个都不加，就是把所有任务都查询出来；</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 历史任务查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Test</span><br><span class="line">public void history<span class="constructor">TaskList()</span>{</span><br><span class="line">    List&lt;HistoricTaskInstance&gt; <span class="built_in">list</span>=processEngine.get<span class="constructor">HistoryService()</span> <span class="comment">// 历史任务Service</span></span><br><span class="line">            .create<span class="constructor">HistoricTaskInstanceQuery()</span> <span class="comment">// 创建历史任务实例查询</span></span><br><span class="line">            .task<span class="constructor">Assignee(<span class="string">"java1234_小锋"</span>)</span> <span class="comment">// 指定办理人</span></span><br><span class="line">            .finished<span class="literal">()</span> <span class="comment">// 查询已经完成的任务  </span></span><br><span class="line">            .<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line">    <span class="keyword">for</span>(HistoricTaskInstance hti:<span class="built_in">list</span>){</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务ID:"</span>+hti.get<span class="constructor">Id()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+hti.get<span class="constructor">ProcessInstanceId()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"班里人："</span>+hti.get<span class="constructor">Assignee()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"创建时间："</span>+hti.get<span class="constructor">CreateTime()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"结束时间："</span>+hti.get<span class="constructor">EndTime()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"==========================="</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Activiti-查询历史流程实例"><a href="#Activiti-查询历史流程实例" class="headerlink" title="Activiti 查询历史流程实例"></a>Activiti 查询历史流程实例</h1></li>
<li><p>开发中 有时候我们也需要通过流程实例 ID 来查询历史流程实例。</p>
</li>
<li><p>其实本质就是查询历史流程实例表；</p>
</li>
<li><p>这里有一点说下 这个表的 id 和流程实例 id 始终是一样的。所以 Activiti 没有提供获取流程实例 id 的接口；</p>
</li>
<li><p>因为直接 getId () 获取的值和流程实例 Id 是一样的；</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询历史流程实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Test</span><br><span class="line">public void get<span class="constructor">HistoryProcessInstance()</span>{</span><br><span class="line">    HistoricProcessInstance hpi= processEngine.get<span class="constructor">HistoryService()</span> <span class="comment">// 历史任务Service</span></span><br><span class="line">        .create<span class="constructor">HistoricProcessInstanceQuery()</span> <span class="comment">// 创建历史流程实例查询</span></span><br><span class="line">        .process<span class="constructor">InstanceId(<span class="string">"2501"</span>)</span> <span class="comment">// 指定流程实例ID</span></span><br><span class="line">        .single<span class="constructor">Result()</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+hpi.get<span class="constructor">Id()</span>);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"创建时间："</span>+hpi.get<span class="constructor">StartTime()</span>);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"结束时间："</span>+hpi.get<span class="constructor">EndTime()</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Activiti历史活动查询"><a href="#Activiti历史活动查询" class="headerlink" title="Activiti历史活动查询"></a>Activiti 历史活动查询</h1></li>
<li><p>在流程系统开发中，我们有这样一种需求，</p>
</li>
<li><p>当流程实例完成后，我们要查下流程活动具体的执行情况，比如这个流程实例什么时候开始的，什么时候结束的，</p>
</li>
<li><p>以及中间具体的执行步骤，这时候，我们需要查询历史流程活动执行表，act_hi_actinst<br>  <img data-src="/images/activiti/activiti5/d.jpg"></p>
</li>
<li><p>比如上面这个流程；</p>
</li>
<li><p>Activiti 提供了丰富的接口让我们查询历史活动，上代码：</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 历史活动查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Test</span><br><span class="line">public void history<span class="constructor">ActInstanceList()</span>{</span><br><span class="line">    List&lt;HistoricActivityInstance&gt; <span class="built_in">list</span>=processEngine.get<span class="constructor">HistoryService()</span> <span class="comment">// 历史任务Service</span></span><br><span class="line">            .create<span class="constructor">HistoricActivityInstanceQuery()</span> <span class="comment">// 创建历史活动实例查询</span></span><br><span class="line">            .process<span class="constructor">InstanceId(<span class="string">"27501"</span>)</span> <span class="comment">// 指定流程实例id</span></span><br><span class="line">            .finished<span class="literal">()</span> <span class="comment">// 查询已经完成的任务  </span></span><br><span class="line">            .<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line">    <span class="keyword">for</span>(HistoricActivityInstance hai:<span class="built_in">list</span>){</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务ID:"</span>+hai.get<span class="constructor">Id()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+hai.get<span class="constructor">ProcessInstanceId()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"活动名称："</span>+hai.get<span class="constructor">ActivityName()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"办理人："</span>+hai.get<span class="constructor">Assignee()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"开始时间："</span>+hai.get<span class="constructor">StartTime()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"结束时间："</span>+hai.get<span class="constructor">EndTime()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"==========================="</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
  <figure class="highlight asciidoc"><table><tbody><tr><td class="code"><pre><span class="line">执行结果：</span><br><span class="line"></span><br><span class="line">任务ID:27502</span><br><span class="line"></span><br><span class="line">流程实例ID:27501</span><br><span class="line"></span><br><span class="line">活动名称：Start</span><br><span class="line"></span><br><span class="line">办理人：null</span><br><span class="line"></span><br><span class="line">开始时间：Thu Jun 30 10:13:20 CST 2016</span><br><span class="line"></span><br><span class="line">结束时间：Thu Jun 30 10:13:20 CST 2016</span><br><span class="line"></span><br><span class="line">===========================</span><br><span class="line"></span><br><span class="line">任务ID:27503</span><br><span class="line"></span><br><span class="line">流程实例ID:27501</span><br><span class="line"></span><br><span class="line">活动名称：学生请假申请</span><br><span class="line"></span><br><span class="line">办理人：张三</span><br><span class="line"></span><br><span class="line">开始时间：Thu Jun 30 10:13:20 CST 2016</span><br><span class="line"></span><br><span class="line">结束时间：Thu Jun 30 10:16:13 CST 2016</span><br><span class="line"></span><br><span class="line">===========================</span><br><span class="line"></span><br><span class="line">任务ID:30001</span><br><span class="line"></span><br><span class="line">流程实例ID:27501</span><br><span class="line"></span><br><span class="line">活动名称：班长审批</span><br><span class="line"></span><br><span class="line">办理人：李四</span><br><span class="line"></span><br><span class="line">开始时间：Thu Jun 30 10:16:13 CST 2016</span><br><span class="line"></span><br><span class="line">结束时间：Thu Jun 30 10:16:36 CST 2016</span><br><span class="line"></span><br><span class="line">===========================</span><br><span class="line"></span><br><span class="line">任务ID:32501</span><br><span class="line"></span><br><span class="line">流程实例ID:27501</span><br><span class="line"></span><br><span class="line">活动名称：班主任审批</span><br><span class="line"></span><br><span class="line">办理人：王五</span><br><span class="line"></span><br><span class="line">开始时间：Thu Jun 30 10:16:36 CST 2016</span><br><span class="line"></span><br><span class="line">结束时间：Thu Jun 30 10:16:57 CST 2016</span><br><span class="line"></span><br><span class="line">===========================</span><br><span class="line"></span><br><span class="line">任务ID:35001</span><br><span class="line"></span><br><span class="line">流程实例ID:27501</span><br><span class="line"></span><br><span class="line">活动名称：End</span><br><span class="line"></span><br><span class="line">办理人：null</span><br><span class="line"></span><br><span class="line">开始时间：Thu Jun 30 10:16:57 CST 2016</span><br><span class="line"></span><br><span class="line">结束时间：Thu Jun 30 10:16:57 CST 2016</span><br><span class="line"></span><br><span class="line">===========================</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="来源地址"><a href="#来源地址" class="headerlink" title="来源地址"></a>来源地址</h1><blockquote>
<p><a href="http://blog.java1234.com/blog/articles/84.html">java1234.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Activti5</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti5 流程变量</title>
    <url>/2021/06/04/36-Activiti5%E6%B5%81%E7%A8%8B%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/36.jpg"></p>
</span>

<span id="more"></span>

<h1 id="流程变量"><a href="#流程变量" class="headerlink" title="流程变量"></a>流程变量</h1><ul>
<li><p>在流程实例运行过程中，难免要记录或者保存一些数据，然后运行到某个节点的时候，取数据查看，或者是后面学到流程分支的时候 判断流程走向，都要用到一些数据存储。</p>
</li>
<li><p>这里就引入了一个新的概念，流程变量，顾名思义，就是流程中用来存储数据的变量；</p>
</li>
<li><p>Activiti 中基本支持所有的基本数据类型作为流程变量，以及支持序列化对象，所以也可以存一个对象；当然实际开发的话，还是要建立一些业务表，来存储业务数据；简单的数据，可以存到到流程变量，比较方便；</p>
</li>
<li><p>根据一个流程定义可以启动很多流程实例，每个流程实例里的流程变量都是独立的，互不影响，这个概念要分清楚；</p>
</li>
<li><p>下面我来通过一些实例，来学习下流程变量，以及 Activiti 给我们提供的接口；</p>
</li>
<li><p>首先我来画一个新的流程定义：<br>  <img data-src="/images/activiti/activiti5/a.jpg"></p>
</li>
<li><p>一个学生请假流程，流程定义的 Id，Name 大家自己取下名字，以及 “提交请假申请”，“辅导员审批” 任务节点的办理人大家自己随便搞个即可；</p>
</li>
<li><p>接下来新建一个 ProcessVariableTest.java 测试类：</p>
</li>
<li><p>我们把前面写的代码 copy 过来改改：</p>
</li>
<li><p>首先是 deploy 流程部署方法：</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.activiti.engine.ProcessEngines;</span><br><span class="line">import org.activiti.engine.repository.Deployment;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"> </span><br><span class="line">public <span class="keyword">class</span> ProcessVariableTest {</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取默认的流程引擎实例 会自动读取activiti.cfg.xml文件 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ProcessEngine processEngine=<span class="module-access"><span class="module"><span class="identifier">ProcessEngines</span>.</span></span>get<span class="constructor">DefaultProcessEngine()</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 部署流程定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void deploy<span class="literal">()</span>{</span><br><span class="line">        <span class="comment">// 获取部署对象</span></span><br><span class="line">        Deployment deployment=processEngine.get<span class="constructor">RepositoryService()</span> <span class="comment">// 部署Service</span></span><br><span class="line">                     .create<span class="constructor">Deployment()</span>  <span class="comment">// 创建部署</span></span><br><span class="line">                     .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/StudentLeaveProcess.bpmn"</span>)</span>  <span class="comment">// 加载资源文件</span></span><br><span class="line">                     .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/StudentLeaveProcess.png"</span>)</span>   <span class="comment">// 加载资源文件</span></span><br><span class="line">                     .name(<span class="string">"学生请假流程"</span>)  <span class="comment">// 流程名称</span></span><br><span class="line">                     .deploy<span class="literal">()</span>; <span class="comment">// 部署</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署ID:"</span>+deployment.get<span class="constructor">Id()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署Name:"</span>+deployment.get<span class="constructor">Name()</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动流程实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Test</span><br><span class="line">public void start<span class="literal">()</span>{</span><br><span class="line">    <span class="comment">// 启动并获取流程实例</span></span><br><span class="line">    ProcessInstance processInstance=processEngine.get<span class="constructor">RuntimeService()</span> <span class="comment">// 运行时流程实例Service</span></span><br><span class="line">        .start<span class="constructor">ProcessInstanceByKey(<span class="string">"studentLeaveProcess"</span>)</span>; <span class="comment">// 流程定义表的KEY字段值</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+processInstance.get<span class="constructor">Id()</span>);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程定义ID:"</span>+processInstance.get<span class="constructor">ProcessDefinitionId()</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>然后我们运行 start 方法 ，启动流程实例，这样一个新的流程实例就产生并且开始运行了。</p>
</li>
<li><p>这时候到了 “学生请假提交” 任务节点，这时候我们可以添加一些流程变量，比如请假日期，请假天数，请假原因，当然这里为了演示 Activiti 还支持序列化对象，</p>
</li>
<li><p>我们这里再加一个请假的学生对象信息；</p>
</li>
<li><p>所以我们建一个实现了序列化接口的实体类 Student:</p>
  <figure class="highlight typescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="title">implements</span>  <span class="title">Serializable</span></span>{</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final long serialVersionUID = 1L;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> name;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> Integer <span class="function"><span class="title">getId</span>(<span class="params"></span>)</span> {</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setId</span>(<span class="params">Integer id</span>)</span> {</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> {</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">setName</span>(<span class="params"><span class="built_in">String</span> name</span>)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> long <span class="function"><span class="title">getSerialversionuid</span>(<span class="params"></span>)</span> {</span><br><span class="line">        <span class="keyword">return</span> serialVersionUID;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置流程变量以及值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Test</span><br><span class="line">public void set<span class="constructor">VariablesValues()</span>{</span><br><span class="line">    TaskService taskService=processEngine.get<span class="constructor">TaskService()</span>; <span class="comment">// 任务Service</span></span><br><span class="line">    String taskId=<span class="string">"2504"</span>; <span class="comment">// 任务id</span></span><br><span class="line">    taskService.set<span class="constructor">VariableLocal(<span class="params">taskId</span>, <span class="string">"days"</span>, 2)</span>; <span class="comment">// 存Integer类型</span></span><br><span class="line">    taskService.set<span class="constructor">Variable(<span class="params">taskId</span>, <span class="string">"date"</span>, <span class="params">new</span> Date()</span>); <span class="comment">// 存日期类型</span></span><br><span class="line">    taskService.set<span class="constructor">Variable(<span class="params">taskId</span>, <span class="string">"reason"</span>, <span class="string">"发烧"</span>)</span>; <span class="comment">// 存字符串</span></span><br><span class="line">    Student student=<span class="keyword">new</span> <span class="constructor">Student()</span>;</span><br><span class="line">    student.set<span class="constructor">Id(1)</span>;</span><br><span class="line">    student.set<span class="constructor">Name(<span class="string">"张三"</span>)</span>;</span><br><span class="line">    taskService.set<span class="constructor">Variable(<span class="params">taskId</span>, <span class="string">"student"</span>, <span class="params">student</span>)</span>;  <span class="comment">// 存序列化对象</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>这里我们来说明下，首先要设置流程变量，我们需要获取 Service，这里的话，TaskService 可以设置变量，RuntimeService 也可以设置流程变量。</p>
</li>
<li><p>假如节点不是任务节点的时候，我们只能用 RuntimeService。接口和方法和 TaskService 一样的；</p>
</li>
<li><p>这里我们设置了 请假日期，请假天数，请假理由，请假对象。当然这里 set 变量的时候 需要一个任务 ID，大家可以从任务表里去找；</p>
</li>
<li><p>后面的变量都是 key:value 形式，这里的 key 当然也可以用中文，设置的时候也可以一次性设置多个变量，都有重载方法的；大家自行研究下；</p>
</li>
<li><p>我们执行下这个方法，会对应的把数据库查询到对应的流程变量表中，当然那个对象序列的话，特殊点，存到了字节文件表里去了；</p>
</li>
<li><p>当然这里还要讲一个概念，就是全局流程实例变量和任务节点本地变量；</p>
</li>
<li><p>setVariableLocal 和 setVariable  前者仅仅在某个任务节点有作用 后者在整个流程实例都有效；</p>
</li>
<li><p>一般开发用后者即可。后面我们可以演示下效果；</p>
  <figure class="highlight typescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 完成任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">completeTask</span>(<span class="params"></span>)</span>{</span><br><span class="line">    processEngine.getTaskService() <span class="comment">// 任务相关Service</span></span><br><span class="line">            .complete(<span class="string">"2504"</span>); <span class="comment">// 指定要完成的任务ID</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>我们执行 completeTask 即可；这样我们的执行到了 “辅导员审批” 任务节点；</p>
</li>
<li><p>我们可以来获取 “学生请假提交” 任务节点设置的流程变量值；</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取流程变量以及值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Test</span><br><span class="line">public void get<span class="constructor">VariablesValue()</span>{</span><br><span class="line">    TaskService taskService=processEngine.get<span class="constructor">TaskService()</span>; <span class="comment">// 任务Service</span></span><br><span class="line">    String taskId=<span class="string">"7502"</span>; <span class="comment">// 任务id</span></span><br><span class="line">    Integer days=(Integer) taskService.get<span class="constructor">Variable(<span class="params">taskId</span>, <span class="string">"days"</span>)</span>;</span><br><span class="line">    Date date=(Date) taskService.get<span class="constructor">Variable(<span class="params">taskId</span>, <span class="string">"date"</span>)</span>;</span><br><span class="line">    String reason=(String) taskService.get<span class="constructor">Variable(<span class="params">taskId</span>, <span class="string">"reason"</span>)</span>;</span><br><span class="line">    Student student=(Student) taskService.get<span class="constructor">Variable(<span class="params">taskId</span>, <span class="string">"student"</span>)</span>;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"请假天数："</span>+days);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"请假日期："</span>+date);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"请假原因："</span>+reason);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"请假对象："</span>+student.get<span class="constructor">Id()</span>+<span class="string">","</span>+student.get<span class="constructor">Name()</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>这里的任务 Id 是新的，我们可以去运行时任务表里去找；</p>
</li>
<li><p>我们运行下，结果如下：</p>
  <figure class="highlight avrasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="symbol">SLF4J:</span> Failed to load class <span class="string">"org.slf4j.impl.StaticLoggerBinder"</span>.</span><br><span class="line"><span class="symbol">SLF4J:</span> Defaulting to no-operation (<span class="keyword">NOP</span>) logger implementation</span><br><span class="line"><span class="symbol">SLF4J:</span> See http://www.slf4j<span class="meta">.org</span>/codes.html<span class="meta">#StaticLoggerBinder for further details.</span></span><br><span class="line">请假天数：null</span><br><span class="line">请假日期：Tue Apr <span class="number">26</span> <span class="number">13</span>:<span class="number">32</span>:<span class="number">22</span> CST <span class="number">2016</span></span><br><span class="line">请假原因：发烧</span><br><span class="line">请假对象：<span class="number">1</span>,张三</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>我们发现，天数没取到，原因上面讲了，是任务节点本地变量，只有在前面那个节点作用域内有效，所以在这个节点是取不到的；</p>
</li>
<li><p>其他的数据都取到了，包括对象；</p>
</li>
<li><p>OK 我们先把流程走完，继续执行 completeTask 方法 ，当然任务 ID 现在变成了 7502, 你们的改成对应的即可；</p>
</li>
<li><p>OK。这样流程是完了，这里关于流程变量，我们还可以在启动流程的时候设置，<br>  <img data-src="/images/activiti/activiti5/b.jpg"></p>
</li>
<li><p>完成当前任务，流向下一个节点的时候，也可以设置流程变量：<br>  <img data-src="/images/activiti/activiti5/a.png"></p>
</li>
<li><p>当然流程变量不能什么数据都放里面，有些复杂的，大块数据，我们要自己定义业务表</p>
</li>
</ul>
<h1 id="来源地址"><a href="#来源地址" class="headerlink" title="来源地址"></a>来源地址</h1><blockquote>
<p><a href="http://blog.java1234.com/blog/articles/84.html">java1234.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Activti5</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti5 之连线</title>
    <url>/2021/06/04/37-Activiti5%E4%B9%8B%E8%BF%9E%E7%BA%BF/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/37.jpg"></p>
</span>

<span id="more"></span>

<h1 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h1><p><img data-src="/images/activiti/activiti5/e.jpg"></p>
<ul>
<li>为了演示连线的大多数功能，我们重新绘制流程定义图，我们的业务改成，当是一般情况的请假审批，班长审批就行，假如是特殊，重要情况的请假</li>
<li>审批，我们需要让班主任也审批下。 所以在班长审批的时候，就会有分支；</li>
<li>这里连线是有名称的，即 name 属性；<br><img data-src="/images/activiti/activiti5/f.jpg"></li>
<li>流程实例具体执行的时候 我们要通过设置流程变量的值 来具体执行某个线路，这个时候，我们还得设置连线的执行表达式：<br><img data-src="/images/activiti/activiti5/g.jpg"></li>
<li>这个表达式类似 el 表达式；</li>
<li>我们现在新建 LineTest 测试类：</li>
<li>核心代码，是 completeTask2 执行到班长审批的时候，我们通过设置流程变量，来执行具体的流程走向；  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.activiti.engine.ProcessEngines;</span><br><span class="line">import org.activiti.engine.repository.Deployment;</span><br><span class="line">import org.activiti.engine.runtime.ProcessInstance;</span><br><span class="line">import org.activiti.engine.task.Task;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">public <span class="keyword">class</span> LineTest {</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取默认流程引擎实例，会自动读取activiti.cfg.xml文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ProcessEngine processEngine=<span class="module-access"><span class="module"><span class="identifier">ProcessEngines</span>.</span></span>get<span class="constructor">DefaultProcessEngine()</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 部署流程定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void deploy<span class="literal">()</span>{</span><br><span class="line">        Deployment deployment=processEngine.get<span class="constructor">RepositoryService()</span> <span class="comment">// 获取部署相关Service</span></span><br><span class="line">                .create<span class="constructor">Deployment()</span> <span class="comment">// 创建部署</span></span><br><span class="line">                .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/StudentLeaveProcess2.bpmn"</span>)</span> <span class="comment">// 加载资源文件</span></span><br><span class="line">                .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/StudentLeaveProcess2.png"</span>)</span> <span class="comment">// 加载资源文件</span></span><br><span class="line">                .name(<span class="string">"学生请假流程2"</span>) <span class="comment">// 流程名称</span></span><br><span class="line">                .deploy<span class="literal">()</span>; <span class="comment">// 部署</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署ID:"</span>+deployment.get<span class="constructor">Id()</span>); </span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署Name:"</span>+deployment.get<span class="constructor">Name()</span>);</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动流程实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void start<span class="literal">()</span>{</span><br><span class="line">        ProcessInstance pi=processEngine.get<span class="constructor">RuntimeService()</span> <span class="comment">// 运行时Service</span></span><br><span class="line">            .start<span class="constructor">ProcessInstanceByKey(<span class="string">"studentLevaeProcess2"</span>)</span>; <span class="comment">// 流程定义表的KEY字段值</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+pi.get<span class="constructor">Id()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程定义ID:"</span>+pi.get<span class="constructor">ProcessDefinitionId()</span>); </span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void find<span class="constructor">Task()</span>{</span><br><span class="line">        List&lt;Task&gt; taskList=processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .create<span class="constructor">TaskQuery()</span> <span class="comment">// 创建任务查询</span></span><br><span class="line">            .task<span class="constructor">Assignee(<span class="string">"李四"</span>)</span> <span class="comment">// 指定某个人</span></span><br><span class="line">            .<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">for</span>(Task task:taskList){</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务ID:"</span>+task.get<span class="constructor">Id()</span>); </span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务名称:"</span>+task.get<span class="constructor">Name()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务创建时间:"</span>+task.get<span class="constructor">CreateTime()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务委派人:"</span>+task.get<span class="constructor">Assignee()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+task.get<span class="constructor">ProcessInstanceId()</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void complete<span class="constructor">Task()</span>{</span><br><span class="line">        processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .complete(<span class="string">"137504"</span>);</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    @Test</span><br><span class="line">    public void complete<span class="constructor">Task2()</span>{</span><br><span class="line"> </span><br><span class="line">        Map&lt;String, Object&gt; variables=<span class="keyword">new</span> HashMap&lt;String,Object&gt;<span class="literal">()</span>;</span><br><span class="line">        variables.put(<span class="string">"msg"</span>, <span class="string">"一般情况"</span>);</span><br><span class="line">        processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .complete(<span class="string">"140002"</span>, variables); <span class="comment">//完成任务的时候，设置流程变量</span></span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="来源地址"><a href="#来源地址" class="headerlink" title="来源地址"></a>来源地址</h1><blockquote>
<p><a href="http://blog.java1234.com/blog/articles/84.html">java1234.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Activti5</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti5 之排它网关</title>
    <url>/2021/06/04/38-Activiti5%E4%B9%8B%E6%8E%92%E5%AE%83%E7%BD%91%E5%85%B3/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/38.jpg"></p>
</span>

<span id="more"></span>

<h1 id="Activiti之排他网关"><a href="#Activiti之排他网关" class="headerlink" title="Activiti之排他网关"></a>Activiti 之排他网关</h1><ul>
<li><p>所谓排他网关 顾名思义 执行到该网关，根据条件只能走一条执行线路；</p>
</li>
<li><p>在右侧 palette 中 的 Gateway 有个 ExclusiveGateway 即为默认网关；<br><img data-src="/images/activiti/activiti5/1.jpg"></p>
</li>
<li><p>我们绘制新的流程定义图标：<br><img data-src="/images/activiti/activiti5/2.jpg"></p>
</li>
<li><p>这里我们规定  根据请假天数，来具体让谁来审批</p>
  <figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">请假天数小于3天，班长审批；</span><br><span class="line">请假天数小于7天，大于等于3天，班主任审批；</span><br><span class="line">请假天数大于等于7天，校长审批；</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>这里我们依然用表达式来实现；<br><img data-src="/images/activiti/activiti5/3.jpg"></p>
</li>
<li><p>班长审批连线表达式；<br><img data-src="/images/activiti/activiti5/4.jpg"></p>
</li>
<li><p>班主任审批连线表达式；</p>
</li>
<li><p>至于校长审批，我们不需要再设置表达式了，排他网关可以指定默认的执行线路；</p>
</li>
<li><p>我们找到校长审批的 id；<br><img data-src="/images/activiti/activiti5/5.jpg"></p>
</li>
<li><p>是 flow11；</p>
</li>
<li><p>然后我们选中 排他网关，设置默认执行的线路；<br><img data-src="/images/activiti/activiti5/6.jpg"></p>
</li>
<li><p>我们给下执行代码：</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"> </span><br><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.activiti.engine.ProcessEngines;</span><br><span class="line">import org.activiti.engine.repository.Deployment;</span><br><span class="line">import org.activiti.engine.runtime.ProcessInstance;</span><br><span class="line">import org.activiti.engine.task.Task;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"> </span><br><span class="line">public <span class="keyword">class</span> ExclusiveGatewayTest {</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取默认流程引擎实例，会自动读取activiti.cfg.xml文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ProcessEngine processEngine=<span class="module-access"><span class="module"><span class="identifier">ProcessEngines</span>.</span></span>get<span class="constructor">DefaultProcessEngine()</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 部署流程定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void deploy<span class="literal">()</span>{</span><br><span class="line">        Deployment deployment=processEngine.get<span class="constructor">RepositoryService()</span> <span class="comment">// 获取部署相关Service</span></span><br><span class="line">                .create<span class="constructor">Deployment()</span> <span class="comment">// 创建部署</span></span><br><span class="line">                .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/StudentLeaveProcess3.bpmn"</span>)</span> <span class="comment">// 加载资源文件</span></span><br><span class="line">                .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/StudentLeaveProcess3.png"</span>)</span> <span class="comment">// 加载资源文件</span></span><br><span class="line">                .name(<span class="string">"学生请假流程3"</span>) <span class="comment">// 流程名称</span></span><br><span class="line">                .deploy<span class="literal">()</span>; <span class="comment">// 部署</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署ID:"</span>+deployment.get<span class="constructor">Id()</span>); </span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署Name:"</span>+deployment.get<span class="constructor">Name()</span>);</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动流程实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void start<span class="literal">()</span>{</span><br><span class="line">        ProcessInstance pi=processEngine.get<span class="constructor">RuntimeService()</span> <span class="comment">// 运行时Service</span></span><br><span class="line">            .start<span class="constructor">ProcessInstanceByKey(<span class="string">"studentLevaeProcess3"</span>)</span>; <span class="comment">// 流程定义表的KEY字段值</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+pi.get<span class="constructor">Id()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程定义ID:"</span>+pi.get<span class="constructor">ProcessDefinitionId()</span>); </span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void find<span class="constructor">Task()</span>{</span><br><span class="line">        List&lt;Task&gt; taskList=processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .create<span class="constructor">TaskQuery()</span> <span class="comment">// 创建任务查询</span></span><br><span class="line">            .task<span class="constructor">Assignee(<span class="string">"赵六"</span>)</span> <span class="comment">// 指定某个人</span></span><br><span class="line">            .<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">for</span>(Task task:taskList){</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务ID:"</span>+task.get<span class="constructor">Id()</span>); </span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务名称:"</span>+task.get<span class="constructor">Name()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务创建时间:"</span>+task.get<span class="constructor">CreateTime()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务委派人:"</span>+task.get<span class="constructor">Assignee()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+task.get<span class="constructor">ProcessInstanceId()</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void complete<span class="constructor">Task()</span>{</span><br><span class="line">        processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .complete(<span class="string">"237504"</span>);</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    @Test</span><br><span class="line">    public void complete<span class="constructor">Task2()</span>{</span><br><span class="line"> </span><br><span class="line">        Map&lt;String, Object&gt; variables=<span class="keyword">new</span> HashMap&lt;String,Object&gt;<span class="literal">()</span>;</span><br><span class="line">        variables.put(<span class="string">"days"</span>, <span class="number">8</span>);</span><br><span class="line">        processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .complete(<span class="string">"235004"</span>, variables); <span class="comment">//完成任务的时候，设置流程变量</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="来源地址"><a href="#来源地址" class="headerlink" title="来源地址"></a>来源地址</h1><blockquote>
<p><a href="http://blog.java1234.com/blog/articles/84.html">java1234.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Activti5</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti5 之并行网关</title>
    <url>/2021/06/04/39-Activiti5%E4%B9%8B%E5%B9%B6%E8%A1%8C%E7%BD%91%E5%85%B3/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/39.jpg"></p>
</span>

<span id="more"></span>

<h1 id="Activiti之排他网关"><a href="#Activiti之排他网关" class="headerlink" title="Activiti之排他网关"></a>Activiti 之排他网关</h1><ul>
<li>所谓排他网关 顾名思义 执行到该网关，会有多条线路同时并行执行，当都执行完才继续执行后面的；</li>
<li>我们先上图：<br><img data-src="/images/activiti/activiti5/7.jpg"></li>
<li>右侧 ParallelGateway 就是并行网关；</li>
<li>我们修改后的业务是  学生请假审批提交，班长和班主任审批，当他们都审批完 才最终让校长审批。</li>
<li>测试代码：  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">import java.util.List;</span><br><span class="line"> </span><br><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.activiti.engine.ProcessEngines;</span><br><span class="line">import org.activiti.engine.repository.Deployment;</span><br><span class="line">import org.activiti.engine.runtime.ProcessInstance;</span><br><span class="line">import org.activiti.engine.task.Task;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"> </span><br><span class="line">public <span class="keyword">class</span> ParallelGatewayTest {</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取默认流程引擎实例，会自动读取activiti.cfg.xml文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ProcessEngine processEngine=<span class="module-access"><span class="module"><span class="identifier">ProcessEngines</span>.</span></span>get<span class="constructor">DefaultProcessEngine()</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 部署流程定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void deploy<span class="literal">()</span>{</span><br><span class="line">        Deployment deployment=processEngine.get<span class="constructor">RepositoryService()</span> <span class="comment">// 获取部署相关Service</span></span><br><span class="line">                .create<span class="constructor">Deployment()</span> <span class="comment">// 创建部署</span></span><br><span class="line">                .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/StudentLeaveProcess4.bpmn"</span>)</span> <span class="comment">// 加载资源文件</span></span><br><span class="line">                .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/StudentLeaveProcess4.png"</span>)</span> <span class="comment">// 加载资源文件</span></span><br><span class="line">                .name(<span class="string">"学生请假流程4"</span>) <span class="comment">// 流程名称</span></span><br><span class="line">                .deploy<span class="literal">()</span>; <span class="comment">// 部署</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署ID:"</span>+deployment.get<span class="constructor">Id()</span>); </span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署Name:"</span>+deployment.get<span class="constructor">Name()</span>);</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动流程实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void start<span class="literal">()</span>{</span><br><span class="line">        ProcessInstance pi=processEngine.get<span class="constructor">RuntimeService()</span> <span class="comment">// 运行时Service</span></span><br><span class="line">            .start<span class="constructor">ProcessInstanceByKey(<span class="string">"studentLevaeProcess4"</span>)</span>; <span class="comment">// 流程定义表的KEY字段值</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+pi.get<span class="constructor">Id()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程定义ID:"</span>+pi.get<span class="constructor">ProcessDefinitionId()</span>); </span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void find<span class="constructor">Task()</span>{</span><br><span class="line">        List&lt;Task&gt; taskList=processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .create<span class="constructor">TaskQuery()</span> <span class="comment">// 创建任务查询</span></span><br><span class="line">            .task<span class="constructor">Assignee(<span class="string">"张三"</span>)</span> <span class="comment">// 指定某个人</span></span><br><span class="line">            .<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">for</span>(Task task:taskList){</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务ID:"</span>+task.get<span class="constructor">Id()</span>); </span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务名称:"</span>+task.get<span class="constructor">Name()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务创建时间:"</span>+task.get<span class="constructor">CreateTime()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务委派人:"</span>+task.get<span class="constructor">Assignee()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+task.get<span class="constructor">ProcessInstanceId()</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void complete<span class="constructor">Task()</span>{</span><br><span class="line">        processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .complete(<span class="string">"265003"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="来源地址"><a href="#来源地址" class="headerlink" title="来源地址"></a>来源地址</h1><blockquote>
<p><a href="http://blog.java1234.com/blog/articles/84.html">java1234.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Activti5</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows-Bat 脚本</title>
    <url>/2021/05/25/4-Windows-Bat%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/4.jpg"></p>
</span>

<span id="more"></span>
<h1 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h1><pre><code>将快捷方式放入 C:\Users\xxx\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup [开始菜单&gt;程序&gt;启动]中
</code></pre>
<h1 id="Kill端口"><a href="#Kill端口" class="headerlink" title="Kill端口"></a>Kill 端口</h1><pre><code>@echo off
setlocal enabledelayedexpansion
set /p port=write port:
for /f "tokens=1-5" %%a in ('netstat -ano ^| find ":%port%"') do (
    if "%%e%" == "" (
        set pid=%%d
    ) else (
        set pid=%%e
    )
    echo !pid!
    taskkill /f /pid !pid!
)
#pause
exit
</code></pre>
<h1 id="Hexo批处理"><a href="#Hexo批处理" class="headerlink" title="Hexo批处理"></a>Hexo 批处理</h1><pre><code>@echo off 
if "%1" == "h" goto begin 
mshta vbscript:createobject("wscript.shell").run("%~nx0 h",0)(window.close)&amp;&amp;exit 
:begin
E:
cd E:\Jgit-project\hexo-site
call hexo clean
call hexo g
call hexo s
eg: call命令 可以调用另外一个bat脚本
</code></pre>
<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><pre><code>tasklist|findstr /i "nginx.exe"
d:
cd JJDK/nginx
nginx.exe -c D:\JJDK\nginx\conf\nginx.conf
pause
exit
/b

#第二种
taskkill /f /t /im nginx.exe
E:
cd /JJDK/nginx-1.19.8
nginx.exe -c E:\JJDK\nginx-1.19.8\conf\nginx.conf
cmd

#后台运行
@echo off 
if "%1" == "h" goto begin 
mshta vbscript:createobject("wscript.shell").run("%~nx0 h",0)(window.close)&amp;&amp;exit 
:begin 

tasklist|findstr /i "nginx.exe"
taskkill /f /t /im nginx.exe
d:
cd JJDK/nginx
nginx.exe -c D:\JJDK\nginx\conf\nginx.conf
cmd
pause
exit
/b
</code></pre>
<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><pre><code>d:
cd JJDK/redis
eg:脚本启动
    #redis-server.exe ./redis.windows.conf
eg：安装服务
    redis-server --service-install redis.windows-service.conf --loglevel verbose
    #sc delete Redis
    
</code></pre>
<h1 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h1><pre><code>@echo off
%1(start /min cmd.exe /c %0 :$exit)
cd E:/JJDK/kafka
.\bin\windows\kafka-server-start.bat  .\config\server.properties
pause
</code></pre>
<h1 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h1><pre><code>@echo off
%1(start /min cmd.exe /c %0 :$exit)
cd E:/JJDK/zookeeper-3.3.4/bin
zkServer.cmd
pause
</code></pre>
<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><pre><code>E:
cd /JJDK/mysql/bin
mysqld.exe --defaults-file=E:\JJDK\mysql\my.ini --console
cmd
</code></pre>
<h1 id="mysql-1"><a href="#mysql-1" class="headerlink" title="mysql"></a>mysql</h1><pre><code>E:
cd /JJDK/mysql/bin
mysqld.exe --defaults-file=E:\JJDK\mysql\my.ini --console
cmd
</code></pre>
<h1 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h1><pre><code>E:
cd JJDK/apache-ftpserver-1.1.1/bin
ftpd.bat ./res/conf/ftpd-typical.xml
cmd
</code></pre>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title>Jquery 请求拦截</title>
    <url>/2021/05/25/4.0-Jquery%E8%AF%B7%E6%B1%82%E6%8B%A6%E6%88%AA/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/4.jpg"></p>
</span>

<span id="more"></span>

<h1 id="拦截JS组件"><a href="#拦截JS组件" class="headerlink" title="拦截JS组件"></a>拦截 JS 组件</h1><h2 id="hook-js"><a href="#hook-js" class="headerlink" title="hook.js"></a>hook.js</h2><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">t,e</span>)</span>{<span class="keyword">for</span>(<span class="keyword">var</span> n <span class="keyword">in</span> e)t[n]=e[n]}(<span class="built_in">window</span>,<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>{<span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">r</span>)</span>{<span class="keyword">if</span>(n[r])<span class="keyword">return</span> n[r].exports;<span class="keyword">var</span> o=n[r]={<span class="attr">i</span>:r,<span class="attr">l</span>:!<span class="number">1</span>,<span class="attr">exports</span>:{}};<span class="keyword">return</span> t[r].call(o.exports,o,o.exports,e),o.l=!<span class="number">0</span>,o.exports}<span class="keyword">var</span> n={};<span class="keyword">return</span> e.m=t,e.c=n,e.i=<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>{<span class="keyword">return</span> t},e.d=<span class="function"><span class="keyword">function</span>(<span class="params">t,n,r</span>)</span>{e.o(t,n)||<span class="built_in">Object</span>.defineProperty(t,n,{<span class="attr">configurable</span>:!<span class="number">1</span>,<span class="attr">enumerable</span>:!<span class="number">0</span>,<span class="attr">get</span>:r})},e.n=<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>{<span class="keyword">var</span> n=t&amp;&amp;t.__esModule?<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{<span class="keyword">return</span> t.default}:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{<span class="keyword">return</span> t};<span class="keyword">return</span> e.d(n,<span class="string">"a"</span>,n),n},e.o=<span class="function"><span class="keyword">function</span>(<span class="params">t,e</span>)</span>{<span class="keyword">return</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(t,e)},e.p=<span class="string">""</span>,e(e.s=<span class="number">3</span>)}([<span class="function"><span class="keyword">function</span>(<span class="params">t,e,n</span>)</span>{<span class="string">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">t,e</span>)</span>{<span class="keyword">var</span> n={};<span class="keyword">for</span>(<span class="keyword">var</span> r <span class="keyword">in</span> t)n[r]=t[r];<span class="keyword">return</span> n.target=n.currentTarget=e,n}<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">t,e</span>)</span>{<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">e</span>)</span>{<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{<span class="keyword">var</span> n=<span class="built_in">this</span>.hasOwnProperty(e+<span class="string">"_"</span>)?<span class="built_in">this</span>[e+<span class="string">"_"</span>]:<span class="built_in">this</span>.xhr[e],r=(t[e]||{}).getter;<span class="keyword">return</span> r&amp;&amp;r(n,<span class="built_in">this</span>)||n}}<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">e</span>)</span>{<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>{<span class="keyword">var</span> o=<span class="built_in">this</span>.xhr,i=<span class="built_in">this</span>,s=t[e];<span class="keyword">if</span>(<span class="string">"on"</span>===e.substring(<span class="number">0</span>,<span class="number">2</span>))i[e+<span class="string">"_"</span>]=n,o[e]=<span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>{s=r(s,i),t[e]&amp;&amp;t[e].call(i,o,s)||n.call(i,s)};<span class="keyword">else</span>{<span class="keyword">var</span> u=(s||{}).setter;n=u&amp;&amp;u(n,i)||n,<span class="built_in">this</span>[e+<span class="string">"_"</span>]=n;<span class="keyword">try</span>{o[e]=n}<span class="keyword">catch</span>(t){}}}}<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>{<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{<span class="keyword">var</span> n=[].slice.call(<span class="built_in">arguments</span>);<span class="keyword">if</span>(t[e]){<span class="keyword">var</span> r=t[e].call(<span class="built_in">this</span>,n,<span class="built_in">this</span>.xhr);<span class="keyword">if</span>(r)<span class="keyword">return</span> r}<span class="keyword">return</span> <span class="built_in">this</span>.xhr[e].apply(<span class="built_in">this</span>.xhr,n)}}<span class="keyword">return</span> e=e||<span class="built_in">window</span>,e[u]=e[u]||e.XMLHttpRequest,e.XMLHttpRequest=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="keyword">new</span> e[u],r=<span class="number">0</span>;r&lt;a.length;++r){<span class="keyword">var</span> c=<span class="string">"on"</span>+a[r];<span class="keyword">void</span> <span class="number">0</span>===t[c]&amp;&amp;(t[c]=<span class="literal">null</span>)}<span class="keyword">for</span>(<span class="keyword">var</span> f <span class="keyword">in</span> t){<span class="keyword">var</span> h=<span class="string">""</span>;<span class="keyword">try</span>{h=s(t[f])}<span class="keyword">catch</span>(t){}<span class="string">"function"</span>===h?<span class="built_in">this</span>[f]=i(f):<span class="built_in">Object</span>.defineProperty(<span class="built_in">this</span>,f,{<span class="attr">get</span>:n(f),<span class="attr">set</span>:o(f),<span class="attr">enumerable</span>:!<span class="number">0</span>})}<span class="keyword">var</span> d=<span class="built_in">this</span>;t.getProxy=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{<span class="keyword">return</span> d},<span class="built_in">this</span>.xhr=t},<span class="built_in">Object</span>.assign(e.XMLHttpRequest,{<span class="attr">UNSENT</span>:<span class="number">0</span>,<span class="attr">OPENED</span>:<span class="number">1</span>,<span class="attr">HEADERS_RECEIVED</span>:<span class="number">2</span>,<span class="attr">LOADING</span>:<span class="number">3</span>,<span class="attr">DONE</span>:<span class="number">4</span>}),e[u]}<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">t</span>)</span>{t=t||<span class="built_in">window</span>,t[u]&amp;&amp;(t.XMLHttpRequest=t[u]),t[u]=<span class="keyword">void</span> <span class="number">0</span>}<span class="built_in">Object</span>.defineProperty(e,<span class="string">"__esModule"</span>,{<span class="attr">value</span>:!<span class="number">0</span>});<span class="keyword">var</span> s=<span class="string">"function"</span>==<span class="keyword">typeof</span> <span class="built_in">Symbol</span>&amp;&amp;<span class="string">"symbol"</span>==<span class="keyword">typeof</span> <span class="built_in">Symbol</span>.iterator?<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>{<span class="keyword">return</span> <span class="keyword">typeof</span> t}:<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>{<span class="keyword">return</span> t&amp;&amp;<span class="string">"function"</span>==<span class="keyword">typeof</span> <span class="built_in">Symbol</span>&amp;&amp;t.constructor===<span class="built_in">Symbol</span>&amp;&amp;t!==<span class="built_in">Symbol</span>.prototype?<span class="string">"symbol"</span>:<span class="keyword">typeof</span> t};e.configEvent=r,e.hook=o,e.unHook=i;<span class="keyword">var</span> u=<span class="string">"__xhr"</span>,a=e.events=[<span class="string">"load"</span>,<span class="string">"loadend"</span>,<span class="string">"timeout"</span>,<span class="string">"error"</span>,<span class="string">"readystatechange"</span>,<span class="string">"abort"</span>]},<span class="function"><span class="keyword">function</span>(<span class="params">t,e,n</span>)</span>{<span class="string">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">t,e</span>)</span>{<span class="keyword">if</span>(e=e||<span class="built_in">window</span>,e.__xhr)<span class="keyword">throw</span><span class="string">"Ajax is already hooked."</span>;<span class="keyword">return</span> f(t,e)}<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">t</span>)</span>{(<span class="number">0</span>,h.unHook)(t)}<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">t</span>)</span>{<span class="keyword">return</span> t.replace(<span class="regexp">/^\s+|\s+$/g</span>,<span class="string">""</span>)}<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params">t</span>)</span>{<span class="keyword">return</span> t.watcher||(t.watcher=<span class="built_in">document</span>.createElement(<span class="string">"a"</span>))}<span class="function"><span class="keyword">function</span> <span class="title">u</span>(<span class="params">t,e</span>)</span>{<span class="keyword">var</span> n=t.getProxy(),r=<span class="string">"on"</span>+e+<span class="string">"_"</span>,o=(<span class="number">0</span>,h.configEvent)({<span class="attr">type</span>:e},n);n[r]&amp;&amp;n[r](o);<span class="keyword">var</span> i;<span class="string">"function"</span>==<span class="keyword">typeof</span> Event?i=<span class="keyword">new</span> Event(e,{<span class="attr">bubbles</span>:!<span class="number">1</span>}):(i=<span class="built_in">document</span>.createEvent(<span class="string">"Event"</span>),i.initEvent(e,!<span class="number">1</span>,!<span class="number">0</span>)),s(t).dispatchEvent(i)}<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">t</span>)</span>{<span class="built_in">this</span>.xhr=t,<span class="built_in">this</span>.xhrProxy=t.getProxy()}<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">t</span>)</span>{<span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">t</span>)</span>{a.call(<span class="built_in">this</span>,t)}<span class="keyword">return</span> e[g]=<span class="built_in">Object</span>.create(a[g]),e[g].next=t,e}<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">t,e</span>)</span>{<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">t,e</span>)</span>{<span class="keyword">var</span> n=<span class="keyword">new</span> w(t),r={<span class="attr">response</span>:e.response||e.responseText,<span class="attr">status</span>:e.status,<span class="attr">statusText</span>:e.statusText,<span class="attr">config</span>:t.config,<span class="attr">headers</span>:t.resHeader||t.getAllResponseHeaders().split(<span class="string">"\r\n"</span>).reduce(<span class="function"><span class="keyword">function</span>(<span class="params">t,e</span>)</span>{<span class="keyword">if</span>(<span class="string">""</span>===e)<span class="keyword">return</span> t;<span class="keyword">var</span> n=e.split(<span class="string">":"</span>);<span class="keyword">return</span> t[n.shift()]=i(n.join(<span class="string">":"</span>)),t},{})};<span class="keyword">if</span>(!d)<span class="keyword">return</span> n.resolve(r);d(r,n)}<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">t,e,n,r</span>)</span>{<span class="keyword">var</span> o=<span class="keyword">new</span> E(t);n={<span class="attr">config</span>:t.config,<span class="attr">error</span>:n,<span class="attr">type</span>:r},v?v(n,o):o.next(n)}<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>{<span class="keyword">return</span>!<span class="number">0</span>}<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">t</span>)</span>{<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">e,n</span>)</span>{<span class="keyword">return</span> r(e,<span class="built_in">this</span>,n,t),!<span class="number">0</span>}}<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">t,e</span>)</span>{<span class="keyword">return</span> <span class="number">4</span>===t.readyState&amp;&amp;<span class="number">0</span>!==t.status?n(t,e):<span class="number">4</span>!==t.readyState&amp;&amp;u(t,y),!<span class="number">0</span>}<span class="keyword">var</span> f=t.onRequest,d=t.onResponse,v=t.onError;<span class="keyword">return</span>(<span class="number">0</span>,h.hook)({<span class="attr">onload</span>:o,<span class="attr">onloadend</span>:o,<span class="attr">onerror</span>:a(p),<span class="attr">ontimeout</span>:a(l),<span class="attr">onabort</span>:a(x),<span class="attr">onreadystatechange</span>:<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>{<span class="keyword">return</span> c(t,<span class="built_in">this</span>)},<span class="attr">open</span>:<span class="function"><span class="keyword">function</span>(<span class="params">t,e</span>)</span>{<span class="keyword">var</span> n=<span class="built_in">this</span>,r=e.config={<span class="attr">headers</span>:{}};r.method=t[<span class="number">0</span>],r.url=t[<span class="number">1</span>],r.async=t[<span class="number">2</span>],r.user=t[<span class="number">3</span>],r.password=t[<span class="number">4</span>],r.xhr=e;<span class="keyword">var</span> o=<span class="string">"on"</span>+y;<span class="keyword">if</span>(e[o]||(e[o]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{<span class="keyword">return</span> c(e,n)}),f)<span class="keyword">return</span>!<span class="number">0</span>},<span class="attr">send</span>:<span class="function"><span class="keyword">function</span>(<span class="params">t,e</span>)</span>{<span class="keyword">var</span> n=e.config;<span class="keyword">if</span>(n.withCredentials=e.withCredentials,n.body=t[<span class="number">0</span>],f){<span class="keyword">var</span> r=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{f(n,<span class="keyword">new</span> b(e))};<span class="keyword">return</span>!<span class="number">1</span>===n.async?r():<span class="built_in">setTimeout</span>(r),!<span class="number">0</span>}},<span class="attr">setRequestHeader</span>:<span class="function"><span class="keyword">function</span>(<span class="params">t,e</span>)</span>{<span class="keyword">if</span>(e.config.headers[t[<span class="number">0</span>].toLowerCase()]=t[<span class="number">1</span>],f)<span class="keyword">return</span>!<span class="number">0</span>},<span class="attr">addEventListener</span>:<span class="function"><span class="keyword">function</span>(<span class="params">t,e</span>)</span>{<span class="keyword">var</span> n=<span class="built_in">this</span>;<span class="keyword">if</span>(-<span class="number">1</span>!==h.events.indexOf(t[<span class="number">0</span>])){<span class="keyword">var</span> r=t[<span class="number">1</span>];<span class="keyword">return</span> s(e).addEventListener(t[<span class="number">0</span>],<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{<span class="keyword">var</span> o=(<span class="number">0</span>,h.configEvent)(e,n);o.type=t[<span class="number">0</span>],o.isTrusted=!<span class="number">0</span>,r.call(n,o)}),!<span class="number">0</span>}},<span class="attr">getAllResponseHeaders</span>:<span class="function"><span class="keyword">function</span>(<span class="params">t,e</span>)</span>{<span class="keyword">var</span> n=e.resHeader;<span class="keyword">if</span>(n){<span class="keyword">var</span> r=<span class="string">""</span>;<span class="keyword">for</span>(<span class="keyword">var</span> o <span class="keyword">in</span> n)r+=o+<span class="string">": "</span>+n[o]+<span class="string">"\r\n"</span>;<span class="keyword">return</span> r}},<span class="attr">getResponseHeader</span>:<span class="function"><span class="keyword">function</span>(<span class="params">t,e</span>)</span>{<span class="keyword">var</span> n=e.resHeader;<span class="keyword">if</span>(n)<span class="keyword">return</span> n[(t[<span class="number">0</span>]||<span class="string">""</span>).toLowerCase()]}},e)}<span class="built_in">Object</span>.defineProperty(e,<span class="string">"__esModule"</span>,{<span class="attr">value</span>:!<span class="number">0</span>}),e.proxy=r,e.unProxy=o;<span class="keyword">var</span> h=n(<span class="number">0</span>),d=h.events[<span class="number">0</span>],v=h.events[<span class="number">1</span>],l=h.events[<span class="number">2</span>],p=h.events[<span class="number">3</span>],y=h.events[<span class="number">4</span>],x=h.events[<span class="number">5</span>],g=<span class="string">"prototype"</span>;a[g]=<span class="built_in">Object</span>.create({<span class="attr">resolve</span>:<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>{<span class="keyword">var</span> e=<span class="built_in">this</span>.xhrProxy,n=<span class="built_in">this</span>.xhr;e.readyState=<span class="number">4</span>,n.resHeader=t.headers,e.response=e.responseText=t.response,e.statusText=t.statusText,e.status=t.status,u(n,y),u(n,d),u(n,v)},<span class="attr">reject</span>:<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>{<span class="built_in">this</span>.xhrProxy.status=<span class="number">0</span>,u(<span class="built_in">this</span>.xhr,t.type),u(<span class="built_in">this</span>.xhr,v)}});<span class="keyword">var</span> b=c(<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>{<span class="keyword">var</span> e=<span class="built_in">this</span>.xhr;t=t||e.config,e.withCredentials=t.withCredentials,e.open(t.method,t.url,!<span class="number">1</span>!==t.async,t.user,t.password);<span class="keyword">for</span>(<span class="keyword">var</span> n <span class="keyword">in</span> t.headers)e.setRequestHeader(n,t.headers[n]);e.send(t.body)}),w=c(<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>{<span class="built_in">this</span>.resolve(t)}),E=c(<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>{<span class="built_in">this</span>.reject(t)})},,<span class="function"><span class="keyword">function</span>(<span class="params">t,e,n</span>)</span>{<span class="string">"use strict"</span>;<span class="built_in">Object</span>.defineProperty(e,<span class="string">"__esModule"</span>,{<span class="attr">value</span>:!<span class="number">0</span>}),e.ah=<span class="keyword">void</span> <span class="number">0</span>;<span class="keyword">var</span> r=n(<span class="number">0</span>),o=n(<span class="number">1</span>);e.ah={<span class="attr">proxy</span>:o.proxy,<span class="attr">unProxy</span>:o.unProxy,<span class="attr">hook</span>:r.hook,<span class="attr">unHook</span>:r.unHook}}]));</span><br></pre></td></tr></tbody></table></figure>

<h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;script src=\"/assets/js/hook.js\"&gt;&lt;/script&gt;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (ah) {</span><br><span class="line">        <span class="keyword">var</span> userName = <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(<span class="string">"easyweb-iframe"</span>)).loginUser.nickName;</span><br><span class="line">        ah.proxy({</span><br><span class="line">            <span class="comment">//请求发起前进入</span></span><br><span class="line">            <span class="attr">onRequest</span>: <span class="function">(<span class="params">config, handler</span>) =&gt;</span> {</span><br><span class="line">                <span class="keyword">var</span> urlName = config.url</span><br><span class="line">                <span class="built_in">window</span>._paq.push([<span class="string">'setCustomUrl'</span>, urlName])</span><br><span class="line">                <span class="built_in">window</span>._paq.push([<span class="string">'setDocumentTitle'</span>, urlName])</span><br><span class="line">                <span class="built_in">window</span>._paq.push([<span class="string">'setUserId'</span>, userName])</span><br><span class="line">                <span class="built_in">window</span>._paq.push([<span class="string">'trackPageView'</span>])</span><br><span class="line">                handler.next(config);</span><br><span class="line">            },</span><br><span class="line">            <span class="comment">//请求发生错误时进入，比如超时；注意，不包括http状态码错误，如404仍然会认为请求成功</span></span><br><span class="line">            <span class="attr">onError</span>: <span class="function">(<span class="params">err, handler</span>) =&gt;</span> {</span><br><span class="line">                handler.next(err)</span><br><span class="line">            },</span><br><span class="line">            <span class="comment">//请求成功后进入</span></span><br><span class="line">            <span class="attr">onResponse</span>: <span class="function">(<span class="params">response, handler</span>) =&gt;</span> {</span><br><span class="line">                handler.next(response)</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Ajax</category>
      </categories>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka 命令</title>
    <url>/2021/05/25/4.1-Kafka%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/4.jpg"></p>
</span>

<span id="more"></span>

<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><figure class="highlight livescript"><table><tbody><tr><td class="code"><pre><span class="line">一个 broker 属于机器IP的进程<span class="function"><span class="params">(端口号)</span> -&gt;</span> 多个TOPIC -&gt; 一个topic可以有多个分区partition </span><br><span class="line"></span><br><span class="line">生产者 -&gt; leader的topic </span><br><span class="line"></span><br><span class="line">消费者 可以消费多个分区</span><br><span class="line"></span><br><span class="line">一个分区只有一个消费者</span><br></pre></td></tr></tbody></table></figure>

<h1 id="kafka配置"><a href="#kafka配置" class="headerlink" title="kafka配置"></a>kafka 配置</h1><p><img data-src="/images/kafka/%E6%B6%88%E8%B4%B93.png"></p>
<figure class="highlight maxima"><table><tbody><tr><td class="code"><pre><span class="line">一个topic可以有多个分区 <span class="built_in">partition</span></span><br><span class="line"></span><br><span class="line">一个分区只能由消费组的一个consumer消费</span><br><span class="line"></span><br><span class="line"><span class="built_in">partition</span> 只能有一个 consumer</span><br><span class="line"></span><br><span class="line">consumer = <span class="built_in">partition</span>  几乎相等分配</span><br><span class="line"></span><br><span class="line">consumer &gt; <span class="built_in">partition</span>  有闲置的consumer</span><br><span class="line"></span><br><span class="line">consumer &lt; <span class="built_in">partition</span>   一个consumer可以负责多个 <span class="built_in">partition</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="服务端必要参数"><a href="#服务端必要参数" class="headerlink" title="服务端必要参数"></a>服务端必要参数</h1><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">broker</span>.id 必配参数,不得重复,取值<span class="number">0</span>-n</span><br><span class="line"></span><br><span class="line"><span class="attribute">zookeeper</span>.connect </span><br><span class="line"></span><br><span class="line"><span class="attribute">ZooKeeper</span> 连接字符串的格式为：hosts：hostname<span class="number">1</span>:port<span class="number">1</span>, hostname<span class="number">2</span>:port<span class="number">2</span>, hostname<span class="number">3</span>:port<span class="number">3</span>.</span><br><span class="line"></span><br><span class="line"><span class="attribute">log</span>.dirs : 不要使用默认值</span><br></pre></td></tr></tbody></table></figure>

<h1 id="服务端推荐参数"><a href="#服务端推荐参数" class="headerlink" title="服务端推荐参数"></a>服务端推荐参数</h1><figure class="highlight sqf"><table><tbody><tr><td class="code"><pre><span class="line">advertised.host.<span class="built_in">name</span>  作为 broker 的 hostname 发往 producer、consumers 以及其他 brokers</span><br><span class="line"></span><br><span class="line">advertised.port 注册到ZK供用户使用的服务端口</span><br><span class="line"></span><br><span class="line">num.partitions 创建topic默认分区数量 默认<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>.replication.factor 自动创建topic的默认副本数量,建议至少修改为<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">min</span>.insync.replicasISR 提交生成者请求的最小副本数,至少<span class="number">2</span>~<span class="number">3</span>个</span><br><span class="line"></span><br><span class="line">unclean.<span class="built_in">leader</span>.election.enable 是否允许不具备ISR资格的replicas被选举为<span class="built_in">leader</span> | 否</span><br><span class="line"></span><br><span class="line">controlled.shutdown.enable  在kafka收到<span class="built_in">stop</span>命令或异常终止时,允许自动同步数据,建议开启</span><br></pre></td></tr></tbody></table></figure>

<h1 id="动态调整参数"><a href="#动态调整参数" class="headerlink" title="动态调整参数"></a>动态调整参数</h1><figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line">unclean.leader.election.<span class="keyword">enable</span> 不严格的leader选举,有助于集群健壮,但是UC你在数据丢失风险</span><br><span class="line"></span><br><span class="line">min.insync.replicas 如果同步状态的副本小于该值服务器将不在接收request.required.acks为<span class="number">-1</span>或<span class="keyword">all</span>的写入请求</span><br><span class="line"></span><br><span class="line">max.message.bytes 单条消息的最大长度 如果修改了该值那么<span class="keyword">replica</span>.<span class="keyword">fetch</span>.max.bytes和消费者的<span class="keyword">fetch</span>.message.max.bytes也要跟着修改</span><br><span class="line"></span><br><span class="line">cleanup.<span class="keyword">policy</span> 生命周期终结数据的处理,默认删除</span><br><span class="line"></span><br><span class="line">flush.messages 强制刷新写入的最大缓存消息数</span><br><span class="line"></span><br><span class="line">flush.ms 强制刷新写入的最大等待时长</span><br></pre></td></tr></tbody></table></figure>

<h1 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h1><figure class="highlight avrasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="symbol">Producer:</span> ack,压缩,同步生产vs异步生产,批处理大小(异步生产)</span><br><span class="line"><span class="symbol">Consumer:</span>partition数量和获取消息的大小</span><br></pre></td></tr></tbody></table></figure>

<h1 id="服务最佳实践"><a href="#服务最佳实践" class="headerlink" title="服务最佳实践"></a>服务最佳实践</h1><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">JVM参数建议</span><br><span class="line">    使用G1垃圾回收器</span><br><span class="line">    -Xmx6g -Xms6g -XX:<span class="attribute">MetaspaceSize</span>=96m -XX:+UseG1GC -XX:<span class="attribute">MaxGCPauseMillis</span>=20</span><br><span class="line">    -XX:<span class="attribute">InitiatingHeapOccupancyPercent</span>=35 -XX:<span class="attribute">G1HeapRegionSize</span>=16M</span><br><span class="line">    -XX:<span class="attribute">MinMetaspaceFreeRatio</span>=50 -XX:<span class="attribute">MaxMetaspaceFreeRatio</span>=80 [ 24G内存四核英特尔至强CPUU 8x7200转SATA硬盘 ]</span><br><span class="line">核心参数调整</span><br><span class="line">    文件描述符数量调整:  (number_of_partitions)*(partition_size/segment_size)  100000以上</span><br><span class="line">    最大套接字缓冲区大小: </span><br><span class="line">    pagecache 尽量分配大多数日志的激活日志段大小一致</span><br><span class="line">    禁用swap</span><br><span class="line">    设计broker的数量 单broker上的分区数&lt;2000,分区大小不要超过25G</span><br><span class="line">    消费组的consumer保持和partition一致</span><br></pre></td></tr></tbody></table></figure>

<h1 id="Kafka基本命令"><a href="#Kafka基本命令" class="headerlink" title="Kafka基本命令"></a>Kafka 基本命令</h1><figure class="highlight jboss-cli"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#生产者</span></span><br><span class="line">bin/kafka-console-producer.sh <span class="params">--broker-list</span> 172.20.132.87<span class="function">:9092</span> <span class="params">--topic</span> test-stream-in</span><br><span class="line"></span><br><span class="line"><span class="comment">#消费者</span></span><br><span class="line">bin/kafka-console-consumer.sh <span class="params">--bootstrap-server</span> 172.20.132.87<span class="function">:9092</span> \</span><br><span class="line"> <span class="params">--topic</span> test-stream-out \</span><br><span class="line"> <span class="params">--property</span> print.key=<span class="literal">true</span> \</span><br><span class="line"> <span class="params">--property</span> print.value=<span class="literal">true</span> \</span><br><span class="line"> <span class="params">--property</span> key.deserializer=org.apache.kafka.common.serialization.StringDeserializer \</span><br><span class="line"> <span class="params">--property</span> value.deserializer=org.apache.kafka.common.serialization.LongDeserializer \</span><br><span class="line"> <span class="params">--from-beginning</span></span><br><span class="line"></span><br><span class="line">1、启动Kafka</span><br><span class="line">bin/kafka-server-start.sh config/server.properties &amp;</span><br><span class="line"></span><br><span class="line">2、停止Kafka</span><br><span class="line">bin/kafka-server-stop.sh</span><br><span class="line"></span><br><span class="line">3、创建Topic</span><br><span class="line">bin/kafka-topics.sh <span class="params">--create</span> <span class="params">--zookeeper</span> localhost<span class="function">:2181</span> <span class="params">--replication-factor</span> 1 <span class="params">--partitions</span> 1 <span class="params">--topic</span> jiangzh-topic</span><br><span class="line"></span><br><span class="line">4、查看已经创建的Topic信息</span><br><span class="line">bin/kafka-topics.sh <span class="params">--list</span> <span class="params">--zookeeper</span> localhost<span class="function">:2181</span></span><br><span class="line"></span><br><span class="line">5、发送消息</span><br><span class="line">bin/kafka-console-producer.sh <span class="params">--broker-list</span> 192.168.220.128<span class="function">:9092</span> <span class="params">--topic</span> jiangzh-topic</span><br><span class="line"></span><br><span class="line">6、接收消息</span><br><span class="line">bin/kafka-console-consumer.sh <span class="params">--bootstrap-server</span> 192.168.220.128<span class="function">:9092</span> <span class="params">--topic</span> jiangzh-topic <span class="params">--from-beginning</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># windows 中文乱码</span></span><br><span class="line">chcp 65001</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建topic（4个分区，2个副本）</span></span><br><span class="line">bin/kafka-topics.sh <span class="params">--create</span> <span class="params">--zookeeper</span> localhost<span class="function">:2181</span> <span class="params">--replication-factor</span> 2 <span class="params">--partitions</span> 4 <span class="params">--topic</span> test</span><br><span class="line"></span><br><span class="line"><span class="comment">### kafka版本 &gt;= 2.2</span></span><br><span class="line">bin/kafka-topics.sh <span class="params">--create</span> <span class="params">--bootstrap-server</span> localhost<span class="function">:9092</span> <span class="params">--replication-factor</span> 1 <span class="params">--partitions</span> 1 <span class="params">--topic</span> test</span><br><span class="line"></span><br><span class="line"><span class="comment">## 分区扩容</span></span><br><span class="line"><span class="comment">### kafka版本 &lt; 2.2</span></span><br><span class="line">bin/kafka-topics.sh <span class="params">--zookeeper</span> localhost<span class="function">:2181</span> <span class="params">--alter</span> <span class="params">--topic</span> topic1 <span class="params">--partitions</span> 2</span><br><span class="line"></span><br><span class="line"><span class="comment">### kafka版本 &gt;= 2.2</span></span><br><span class="line">bin/kafka-topics.sh <span class="params">--bootstrap-server</span> broker_host<span class="function">:port</span> <span class="params">--alter</span> <span class="params">--topic</span> topic1 <span class="params">--partitions</span> 2</span><br><span class="line"></span><br><span class="line"><span class="comment">## 删除topic</span></span><br><span class="line">bin/kafka-topics.sh <span class="params">--zookeeper</span> localhost<span class="function">:2181</span> <span class="params">--delete</span> <span class="params">--topic</span> test</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查询集群描述</span></span><br><span class="line">bin/kafka-topics.sh <span class="params">--describe</span> <span class="params">--zookeeper</span> 127.0.0.1<span class="function">:2181</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 查询集群描述（新）</span></span><br><span class="line">bin/kafka-topics.sh <span class="params">--bootstrap-server</span> localhost<span class="function">:9092</span> <span class="params">--topic</span> foo <span class="params">--describe</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## topic列表查询</span></span><br><span class="line">bin/kafka-topics.sh <span class="params">--zookeeper</span> 127.0.0.1<span class="function">:2181</span> <span class="params">--list</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## topic列表查询（支持0.9版本+）</span></span><br><span class="line">bin/kafka-topics.sh <span class="params">--list</span> <span class="params">--bootstrap-server</span> localhost<span class="function">:9092</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 消费者列表查询（存储在zk中的）</span></span><br><span class="line">bin/kafka-consumer-groups.sh <span class="params">--zookeeper</span> localhost<span class="function">:2181</span> <span class="params">--list</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 消费者列表查询（支持0.9版本+）</span></span><br><span class="line">bin/kafka-consumer-groups.sh <span class="params">--new-consumer</span> <span class="params">--bootstrap-server</span> localhost<span class="function">:9092</span> <span class="params">--list</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 消费者列表查询（支持0.10版本+）</span></span><br><span class="line">bin/kafka-consumer-groups.sh <span class="params">--bootstrap-server</span> localhost<span class="function">:9092</span> <span class="params">--list</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 显示某个消费组的消费详情（仅支持offset存储在zookeeper上的）</span></span><br><span class="line">bin/kafka-run-class.sh kafka.tools.ConsumerOffsetChecker <span class="params">--zookeeper</span> localhost<span class="function">:2181</span> <span class="params">--group</span> test</span><br><span class="line"></span><br><span class="line"><span class="comment">## 显示某个消费组的消费详情（0.9版本 - 0.10.1.0 之前）</span></span><br><span class="line">bin/kafka-consumer-groups.sh <span class="params">--new-consumer</span> <span class="params">--bootstrap-server</span> localhost<span class="function">:9092</span> <span class="params">--describe</span> <span class="params">--group</span> test-consumer-group</span><br><span class="line"></span><br><span class="line"><span class="comment">## 显示某个消费组的消费详情（0.10.1.0版本+）</span></span><br><span class="line">bin/kafka-consumer-groups.sh <span class="params">--bootstrap-server</span> localhost<span class="function">:9092</span> <span class="params">--describe</span> <span class="params">--group</span> my-group</span><br><span class="line"></span><br><span class="line"><span class="comment">## 生产者</span></span><br><span class="line">bin/kafka-console-producer.sh <span class="params">--broker-list</span> localhost<span class="function">:9092</span> <span class="params">--topic</span> test</span><br><span class="line"></span><br><span class="line"><span class="comment">## 消费者</span></span><br><span class="line">bin/kafka-console-consumer.sh <span class="params">--zookeeper</span> localhost<span class="function">:2181</span> <span class="params">--topic</span> test</span><br><span class="line"></span><br><span class="line"><span class="comment">## 生产者（支持0.9版本+）</span></span><br><span class="line">bin/kafka-console-producer.sh <span class="params">--broker-list</span> localhost<span class="function">:9092</span> <span class="params">--topic</span> test <span class="params">--producer</span>.config config/producer.properties</span><br><span class="line"></span><br><span class="line"><span class="comment">## 消费者（支持0.9版本+）</span></span><br><span class="line">bin/kafka-console-consumer.sh <span class="params">--bootstrap-server</span> localhost<span class="function">:9092</span> <span class="params">--topic</span> test <span class="params">--new-consumer</span> <span class="params">--from-beginning</span> <span class="params">--consumer</span>.config config/consumer.properties</span><br><span class="line"></span><br><span class="line"><span class="comment">## 消费者（最新）</span></span><br><span class="line">bin/kafka-console-consumer.sh <span class="params">--bootstrap-server</span> localhost<span class="function">:9092</span> <span class="params">--topic</span> test <span class="params">--from-beginning</span> <span class="params">--consumer</span>.config config/consumer.properties</span><br><span class="line"></span><br><span class="line"><span class="comment">## kafka-verifiable-consumer.sh（消费者事件，例如：offset提交等）</span></span><br><span class="line">bin/kafka-verifiable-consumer.sh <span class="params">--broker-list</span> localhost<span class="function">:9092</span> <span class="params">--topic</span> test <span class="params">--group-id</span> groupName</span><br><span class="line"></span><br><span class="line"><span class="comment">## 高级点的用法</span></span><br><span class="line">bin/kafka-simple-consumer-shell.sh <span class="params">--brist</span> localhost<span class="function">:9092</span> <span class="params">--topic</span> test <span class="params">--partition</span> 0 <span class="params">--offset</span> 1234  <span class="params">--max-messages</span> 10</span><br><span class="line"></span><br><span class="line"><span class="comment">## kafka持续发送消息</span></span><br><span class="line">kafka-verifiable-producer.sh <span class="params">--broker-list</span> $<span class="params">(hostname -i)</span><span class="function">:9092</span> <span class="params">--topic</span> test <span class="params">--max-messages</span> 100000</span><br><span class="line"></span><br><span class="line"><span class="comment">## kafka自带压测命令</span></span><br><span class="line">bin/kafka-producer-perf-test.sh <span class="params">--topic</span> test <span class="params">--num-records</span> 100 <span class="params">--record-size</span> 1 <span class="params">--throughput</span> 100  <span class="params">--producer-props</span> bootstrap.servers=localhost<span class="function">:9092</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 切换leader</span></span><br><span class="line"><span class="comment">## kafka版本 &lt;= 2.4</span></span><br><span class="line">&gt; bin/kafka-preferred-replica-election.sh <span class="params">--zookeeper</span> zk_host<span class="function">:port</span>/chroot</span><br><span class="line"></span><br><span class="line"><span class="comment">## kafka新版本</span></span><br><span class="line">&gt; bin/kafka-preferred-replica-election.sh <span class="params">--bootstrap-server</span> broker_host<span class="function">:port</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##删除消费者组</span></span><br><span class="line">kafka-consumer-groups.sh <span class="params">--bootstrap-server</span> {Kafka instance connection address} <span class="params">--delete</span> <span class="params">--group</span> {consumer group name}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听消费者</span></span><br><span class="line"><span class="string">./kafka-console-consumer.bat</span>  <span class="params">--bootstrap-server</span> kafka<span class="function">:9092</span> <span class="params">--from-beginning</span> <span class="params">--topic</span> cent-order-record-add</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看topic</span></span><br><span class="line"><span class="string">./kafka-topics.bat</span> -zookeeper zookeeper<span class="function">:2181</span> -describe -topic cent-order-record-add </span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有topic</span></span><br><span class="line"><span class="string">./kafka-topics.bat</span>  <span class="params">--zookeeper</span> zookeeper<span class="function">:2181</span> <span class="params">--list</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建topic</span></span><br><span class="line"><span class="string">./kafka-topics.bat</span> <span class="params">--create</span> <span class="params">--zookeeper</span> zookeeper<span class="function">:2181</span> <span class="params">--replication-factor</span> 3 <span class="params">--partitions</span> 3 <span class="params">--topic</span> order-test</span><br></pre></td></tr></tbody></table></figure>

<h1 id="kafka消费的两种方式"><a href="#kafka消费的两种方式" class="headerlink" title="kafka消费的两种方式"></a>kafka 消费的两种方式</h1><p><img data-src="/images/kafka/%E6%B6%88%E8%B4%B91.png"></p>
<figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerThreadSample</span> {</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">String</span> TOPIC_NAME = <span class="string">"test-topic"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">String</span> kafkaId = <span class="string">"172.20.132.87:9092"</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 这种类型是经典模式，每一个线程单独创建一个KafkaConsumer，用于保证线程安全</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws InterruptedException </span>{</span><br><span class="line">        KafkaConsumerRunner r1 = <span class="keyword">new</span> <span class="built_in">KafkaConsumerRunner</span>();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> <span class="built_in">Thread</span>(r1);</span><br><span class="line">        t1.<span class="built_in">start</span>();</span><br><span class="line">        Thread.<span class="built_in">sleep</span>(<span class="number">15000</span>);</span><br><span class="line">        r1.<span class="built_in">shutdown</span>();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumerRunner</span> <span class="title">implements</span> <span class="title">Runnable</span>{</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AtomicBoolean closed = <span class="keyword">new</span> <span class="built_in">AtomicBoolean</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> KafkaConsumer consumer;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">KafkaConsumerRunner</span><span class="params">()</span> </span>{</span><br><span class="line">            Properties props = <span class="keyword">new</span> <span class="built_in">Properties</span>();</span><br><span class="line">            props.<span class="built_in">put</span>(<span class="string">"bootstrap.servers"</span>,kafkaId);</span><br><span class="line">            props.<span class="built_in">put</span>(<span class="string">"group.id"</span>, <span class="string">"test"</span>);</span><br><span class="line">            props.<span class="built_in">put</span>(<span class="string">"enable.auto.commit"</span>, <span class="string">"false"</span>);</span><br><span class="line">            props.<span class="built_in">put</span>(<span class="string">"auto.commit.interval.ms"</span>, <span class="string">"1000"</span>);</span><br><span class="line">            props.<span class="built_in">put</span>(<span class="string">"session.timeout.ms"</span>, <span class="string">"30000"</span>);</span><br><span class="line">            props.<span class="built_in">put</span>(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">            props.<span class="built_in">put</span>(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">            consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(props);</span><br><span class="line">            TopicPartition p0 = <span class="keyword">new</span> <span class="built_in">TopicPartition</span>(TOPIC_NAME, <span class="number">0</span>);</span><br><span class="line">            TopicPartition p1 = <span class="keyword">new</span> <span class="built_in">TopicPartition</span>(TOPIC_NAME, <span class="number">1</span>);</span><br><span class="line">            consumer.<span class="built_in">assign</span>(Arrays.<span class="built_in">asList</span>(p0,p1));</span><br><span class="line">        }</span><br><span class="line">        @<span class="function">Override</span></span><br><span class="line"><span class="function">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">while</span>(!closed.<span class="built_in">get</span>()) {</span><br><span class="line">                    <span class="comment">//处理消息</span></span><br><span class="line">                    ConsumerRecords&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; records = consumer.<span class="built_in">poll</span>(Duration.<span class="built_in">ofMillis</span>(<span class="number">10000</span>));</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (TopicPartition partition : records.<span class="built_in">partitions</span>()) {</span><br><span class="line">                        List&lt;ConsumerRecord&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;&gt; pRecord = records.<span class="built_in">records</span>(partition);</span><br><span class="line">                        <span class="comment">// 处理每个分区的消息</span></span><br><span class="line">                        <span class="keyword">for</span> (ConsumerRecord&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; record : pRecord) {</span><br><span class="line">                            System.out.<span class="built_in">printf</span>(<span class="string">"patition = %d , offset = %d, key = %s, value = %s%n"</span>,</span><br><span class="line">                                    record.<span class="built_in">partition</span>(),record.<span class="built_in">offset</span>(), record.<span class="built_in">key</span>(), record.<span class="built_in">value</span>());</span><br><span class="line">                        }</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 返回去告诉kafka新的offset</span></span><br><span class="line">                        <span class="keyword">long</span> lastOffset = pRecord.<span class="built_in">get</span>(pRecord.<span class="built_in">size</span>() - <span class="number">1</span>).<span class="built_in">offset</span>();</span><br><span class="line">                        <span class="comment">// 注意加1</span></span><br><span class="line">                        consumer.<span class="built_in">commitSync</span>(Collections.<span class="built_in">singletonMap</span>(partition, <span class="keyword">new</span> <span class="built_in">OffsetAndMetadata</span>(lastOffset + <span class="number">1</span>)));</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                }</span><br><span class="line">            }<span class="built_in"><span class="keyword">catch</span></span>(WakeupException e) {</span><br><span class="line">                <span class="keyword">if</span>(!closed.<span class="built_in">get</span>()) {</span><br><span class="line">                    <span class="keyword">throw</span> e;</span><br><span class="line">                }</span><br><span class="line">            }finally {</span><br><span class="line">                consumer.<span class="built_in">close</span>();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>{</span><br><span class="line">            closed.<span class="built_in">set</span>(<span class="literal">true</span>);</span><br><span class="line">            consumer.<span class="built_in">wakeup</span>();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/kafka/%E6%B6%88%E8%B4%B92.png"></p>
<figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerRecordThreadSample</span> {</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">String</span> TOPIC_NAME = <span class="string">"test-topic"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">String</span> kafkaId = <span class="string">"172.20.132.87:9092"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws InterruptedException </span>{</span><br><span class="line">        <span class="keyword">String</span> brokerList = kafkaId;</span><br><span class="line">        <span class="keyword">String</span> groupId = <span class="string">"test"</span>;</span><br><span class="line">        <span class="keyword">int</span> workerNum = <span class="number">5</span>;</span><br><span class="line">        CunsumerExecutor consumers = <span class="keyword">new</span> <span class="built_in">CunsumerExecutor</span>(brokerList, groupId, TOPIC_NAME);</span><br><span class="line">        consumers.<span class="built_in">execute</span>(workerNum);</span><br><span class="line">        Thread.<span class="built_in">sleep</span>(<span class="number">1000000</span>);</span><br><span class="line">        consumers.<span class="built_in">shutdown</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Consumer处理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CunsumerExecutor</span>{</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> KafkaConsumer&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; consumer;</span><br><span class="line">        <span class="keyword">private</span> ExecutorService executors;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CunsumerExecutor</span><span class="params">(<span class="keyword">String</span> brokerList, <span class="keyword">String</span> groupId, <span class="keyword">String</span> topic)</span> </span>{</span><br><span class="line">            Properties props = <span class="keyword">new</span> <span class="built_in">Properties</span>();</span><br><span class="line">            props.<span class="built_in">put</span>(<span class="string">"bootstrap.servers"</span>, brokerList);</span><br><span class="line">            props.<span class="built_in">put</span>(<span class="string">"group.id"</span>, groupId);</span><br><span class="line">            props.<span class="built_in">put</span>(<span class="string">"enable.auto.commit"</span>, <span class="string">"true"</span>);</span><br><span class="line">            props.<span class="built_in">put</span>(<span class="string">"auto.commit.interval.ms"</span>, <span class="string">"1000"</span>);</span><br><span class="line">            props.<span class="built_in">put</span>(<span class="string">"session.timeout.ms"</span>, <span class="string">"30000"</span>);</span><br><span class="line">            props.<span class="built_in">put</span>(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">            props.<span class="built_in">put</span>(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">            consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(props);</span><br><span class="line">            consumer.<span class="built_in">subscribe</span>(Arrays.<span class="built_in">asList</span>(topic));</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">int</span> workerNum)</span> </span>{</span><br><span class="line">            executors = <span class="keyword">new</span> <span class="built_in">ThreadPoolExecutor</span>(workerNum, workerNum, <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                    <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">1000</span>), <span class="keyword">new</span> ThreadPoolExecutor.<span class="built_in">CallerRunsPolicy</span>());</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">                ConsumerRecords&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; records = consumer.<span class="built_in">poll</span>(<span class="number">200</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">final</span> ConsumerRecord record : records) {</span><br><span class="line">                    executors.<span class="built_in">submit</span>(<span class="keyword">new</span> <span class="built_in">ConsumerRecordWorker</span>(record));</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">if</span> (consumer != null) {</span><br><span class="line">                consumer.<span class="built_in">close</span>();</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (executors != null) {</span><br><span class="line">                executors.<span class="built_in">shutdown</span>();</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">if</span> (!executors.<span class="built_in">awaitTermination</span>(<span class="number">10</span>, TimeUnit.SECONDS)) {</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"Timeout.... Ignore for this case"</span>);</span><br><span class="line">                }</span><br><span class="line">            } <span class="built_in"><span class="keyword">catch</span></span> (InterruptedException ignored) {</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"Other thread interrupted this shutdown, ignore for this case."</span>);</span><br><span class="line">                Thread.<span class="built_in">currentThread</span>().<span class="built_in">interrupt</span>();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 记录处理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerRecordWorker</span> <span class="title">implements</span> <span class="title">Runnable</span> {</span></span><br><span class="line">        <span class="keyword">private</span> ConsumerRecord&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; record;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ConsumerRecordWorker</span><span class="params">(ConsumerRecord record)</span> </span>{</span><br><span class="line">            <span class="keyword">this</span>.record = record;</span><br><span class="line">        }</span><br><span class="line">        @<span class="function">Override</span></span><br><span class="line"><span class="function">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="comment">// 假如说数据入库操作</span></span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"Thread - "</span>+ Thread.<span class="built_in">currentThread</span>().<span class="built_in">getName</span>());</span><br><span class="line">            System.err.<span class="built_in">printf</span>(<span class="string">"patition = %d , offset = %d, key = %s, value = %s%n"</span>,</span><br><span class="line">                    record.<span class="built_in">partition</span>(), record.<span class="built_in">offset</span>(), record.<span class="built_in">key</span>(), record.<span class="built_in">value</span>());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="手动控制消费"><a href="#手动控制消费" class="headerlink" title="手动控制消费"></a>手动控制消费</h1><figure class="highlight asciidoc"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 手动指定offset起始位置</span></span><br><span class="line"></span><br><span class="line"><span class="code">    1、人为控制offset起始位置</span></span><br><span class="line"><span class="section">    2、如果出现程序错误，重复消费一次</span></span><br><span class="line"><span class="section">---------------------------------------------------</span></span><br><span class="line"><span class="code">    1、第一次从0消费【一般情况】</span></span><br><span class="line"><span class="code">    2、比如一次消费了100条， offset置为101并且存入Redis</span></span><br><span class="line"><span class="code">    3、每次poll之前，从redis中获取最新的offset位置</span></span><br><span class="line"><span class="code">    4、每次从这个位置开始消费</span></span><br><span class="line"><span class="code"> */</span></span><br><span class="line">consumer.seek(p0, 700);</span><br></pre></td></tr></tbody></table></figure>
<h1 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h1><figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> static void control<span class="constructor">Pause()</span> {</span><br><span class="line">    Properties props = <span class="keyword">new</span> <span class="constructor">Properties()</span>;</span><br><span class="line">    props.set<span class="constructor">Property(<span class="string">"bootstrap.servers"</span>,<span class="params">kafkaId</span>)</span>;</span><br><span class="line">    props.set<span class="constructor">Property(<span class="string">"group.id"</span>, <span class="string">"test"</span>)</span>;</span><br><span class="line">    props.set<span class="constructor">Property(<span class="string">"enable.auto.commit"</span>, <span class="string">"false"</span>)</span>;</span><br><span class="line">    props.set<span class="constructor">Property(<span class="string">"auto.commit.interval.ms"</span>, <span class="string">"1000"</span>)</span>;</span><br><span class="line">    props.set<span class="constructor">Property(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>)</span>;</span><br><span class="line">    props.set<span class="constructor">Property(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>)</span>;</span><br><span class="line"></span><br><span class="line">    KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> <span class="constructor">KafkaConsumer(<span class="params">props</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// jiangzh-topic - 0,1两个partition</span></span><br><span class="line">    TopicPartition p0 = <span class="keyword">new</span> <span class="constructor">TopicPartition(TOPIC_NAME, 0)</span>;</span><br><span class="line">    TopicPartition p1 = <span class="keyword">new</span> <span class="constructor">TopicPartition(TOPIC_NAME, 1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费订阅某个Topic的某个分区</span></span><br><span class="line">    consumer.assign(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">as</span><span class="constructor">List(<span class="params">p0</span>,<span class="params">p1</span>)</span>);</span><br><span class="line">    long totalNum = <span class="number">40</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">        ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="module-access"><span class="module"><span class="identifier">Duration</span>.</span></span><span class="keyword">of</span><span class="constructor">Millis(10000)</span>);</span><br><span class="line">        <span class="comment">// 每个partition单独处理</span></span><br><span class="line">        <span class="keyword">for</span>(TopicPartition partition : records.partitions<span class="literal">()</span>){</span><br><span class="line">            List&lt;ConsumerRecord&lt;String, String&gt;&gt; pRecord = records.records(partition);</span><br><span class="line">            long num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : pRecord) {</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.printf(<span class="string">"patition = %d , offset = %d, key = %s, value = %s%n"</span>,</span><br><span class="line">                        record.partition<span class="literal">()</span>, record.offset<span class="literal">()</span>, record.key<span class="literal">()</span>, record.value<span class="literal">()</span>);</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    1、接收到record信息以后，去令牌桶中拿取令牌</span></span><br><span class="line"><span class="comment">                    2、如果获取到令牌，则继续业务处理</span></span><br><span class="line"><span class="comment">                    3、如果获取不到令牌， 则pause等待令牌</span></span><br><span class="line"><span class="comment">                    4、当令牌桶中的令牌足够， 则将consumer置为resume状态</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                num++;</span><br><span class="line">                <span class="keyword">if</span>(record.partition<span class="literal">()</span><span class="operator"> == </span><span class="number">0</span>){</span><br><span class="line">                    <span class="keyword">if</span>(num &gt;= totalNum){</span><br><span class="line">                        consumer.pause(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">as</span><span class="constructor">List(<span class="params">p0</span>)</span>);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(record.partition<span class="literal">()</span><span class="operator"> == </span><span class="number">1</span>){</span><br><span class="line">                    <span class="keyword">if</span>(num<span class="operator"> == </span><span class="number">40</span>){</span><br><span class="line">                        consumer.resume(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">as</span><span class="constructor">List(<span class="params">p0</span>)</span>);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            long lastOffset = pRecord.get(pRecord.size<span class="literal">()</span> -<span class="number">1</span>).offset<span class="literal">()</span>;</span><br><span class="line">            <span class="comment">// 单个partition中的offset，并且进行提交</span></span><br><span class="line">            Map&lt;TopicPartition, OffsetAndMetadata&gt; offset = <span class="keyword">new</span> HashMap&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">            offset.put(partition,<span class="keyword">new</span> <span class="constructor">OffsetAndMetadata(<span class="params">lastOffset</span>+1)</span>);</span><br><span class="line">            <span class="comment">// 提交offset</span></span><br><span class="line">            consumer.commit<span class="constructor">Sync(<span class="params">offset</span>)</span>;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"=============partition - "</span>+ partition +<span class="string">" end================"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="新消费者-加入-崩溃-离组"><a href="#新消费者-加入-崩溃-离组" class="headerlink" title="新消费者 - 加入-崩溃-离组"></a>新消费者 - 加入 - 崩溃 - 离组</h1><ul>
<li>类似于乐观锁，添加会有版本号的概念</li>
</ul>
<p><img data-src="/images/kafka/%E6%B6%88%E8%B4%B9-%E5%8A%A0%E5%85%A5.png"></p>
<p><img data-src="/images/kafka/%E6%B6%88%E8%B4%B9-%E5%B4%A9%E6%BA%83.png"></p>
<p><img data-src="/images/kafka/%E6%B6%88%E8%B4%B9-%E7%A6%BB%E7%BB%84.png"></p>
<ul>
<li>离组的 位移值会有脏数据 - 新版解决方案类似于 jvm 的 stop-all-world</li>
</ul>
<p><img data-src="/images/kafka/%E6%B6%88%E8%B4%B9-%E7%A6%BB%E7%BB%84-%E4%BD%8D%E7%A7%BB.png"></p>
<h1 id="kafka实时流计算"><a href="#kafka实时流计算" class="headerlink" title="kafka实时流计算"></a>kafka 实时流计算</h1><figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> StreamSample {</span><br><span class="line">    </span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) {</span><br><span class="line">        Properties props = <span class="keyword">new</span> <span class="constructor">Properties()</span>;</span><br><span class="line">        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, EnumUtil.KAFKA_ID);</span><br><span class="line">        props.put(StreamsConfig.APPLICATION_ID_CONFIG, <span class="string">"wordcount-app"</span>);</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.<span class="constructor">String()</span>.get<span class="constructor">Class()</span>);</span><br><span class="line">        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.<span class="constructor">String()</span>.get<span class="constructor">Class()</span>);</span><br><span class="line">        <span class="comment">// 如果构建流结构拓扑</span></span><br><span class="line">        final StreamsBuilder builder = <span class="keyword">new</span> <span class="constructor">StreamsBuilder()</span>;</span><br><span class="line">        <span class="comment">// 构建Wordcount</span></span><br><span class="line">        wordcount<span class="constructor">Stream(<span class="params">builder</span>)</span>;</span><br><span class="line">        <span class="comment">// 构建foreachStream</span></span><br><span class="line">        <span class="comment">//foreachStream(builder);</span></span><br><span class="line">        final KafkaStreams streams = <span class="keyword">new</span> <span class="constructor">KafkaStreams(<span class="params">builder</span>.<span class="params">build</span>()</span>, props);</span><br><span class="line">        streams.start<span class="literal">()</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 如果定义流计算过程</span></span><br><span class="line">    static void foreach<span class="constructor">Stream(<span class="params">final</span> StreamsBuilder <span class="params">builder</span>)</span> {</span><br><span class="line">        KStream&lt;String, String&gt; source = builder.stream(EnumUtil.INPUT_TOPIC);</span><br><span class="line">        source</span><br><span class="line">                .flat<span class="constructor">MapValues(<span class="params">value</span> -&gt; Arrays.<span class="params">asList</span>(<span class="params">value</span>.<span class="params">toLowerCase</span>(Locale.<span class="params">getDefault</span>()</span>).split(<span class="string">" "</span>)))</span><br><span class="line">                .foreach((key, value) -&gt; <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(key + <span class="string">" : "</span> + value));</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 如果定义流计算过程</span></span><br><span class="line">    static void wordcount<span class="constructor">Stream(<span class="params">final</span> StreamsBuilder <span class="params">builder</span>)</span> {</span><br><span class="line">        <span class="comment">// 不断从INPUT_TOPIC上获取新数据，并且追加到流上的一个抽象对象</span></span><br><span class="line">        KStream&lt;String, String&gt; source = builder.stream(EnumUtil.INPUT_TOPIC);</span><br><span class="line">        <span class="comment">// Hello World imooc</span></span><br><span class="line">        <span class="comment">// KTable是数据集合的抽象对象</span></span><br><span class="line">        <span class="comment">// 算子</span></span><br><span class="line">        final KTable&lt;String, Long&gt; count =</span><br><span class="line">                source</span><br><span class="line">                        <span class="comment">// flatMapValues -&gt; 将一行数据拆分为多行数据  key 1 , value Hello World</span></span><br><span class="line">                        <span class="comment">// flatMapValues -&gt; 将一行数据拆分为多行数据  key 1 , value Hello key xx , value World</span></span><br><span class="line">                        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                            key 1 , value Hello   -&gt; Hello 1  World 2</span></span><br><span class="line"><span class="comment">                            key 2 , value World</span></span><br><span class="line"><span class="comment">                            key 3 , value World</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        .flat<span class="constructor">MapValues(<span class="params">value</span> -&gt; Arrays.<span class="params">asList</span>(<span class="params">value</span>.<span class="params">toLowerCase</span>(Locale.<span class="params">getDefault</span>()</span>).split(<span class="string">" "</span>)))</span><br><span class="line">                        <span class="comment">// 合并 -&gt; 按value值合并</span></span><br><span class="line">                        .group<span class="constructor">By((<span class="params">key</span>, <span class="params">value</span>)</span> -&gt; value)</span><br><span class="line">                        <span class="comment">// 统计出现的总数</span></span><br><span class="line">                        .count<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将结果输入到OUT_TOPIC中</span></span><br><span class="line">        count.<span class="keyword">to</span><span class="constructor">Stream()</span>.<span class="keyword">to</span>(EnumUtil.OUT_TOPIC, <span class="module-access"><span class="module"><span class="identifier">Produced</span>.</span></span><span class="keyword">with</span>(Serdes.<span class="constructor">String()</span>, Serdes.<span class="constructor">Long()</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="kafka-connection-api"><a href="#kafka-connection-api" class="headerlink" title="kafka connection api"></a>kafka connection api</h1><p><img data-src="/images/kafka/connect.png"></p>
<figure class="highlight jboss-cli"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 配置kafka connection 集群基本配置</span></span><br><span class="line">    vi connect-distributed.properties</span><br><span class="line">    bootstrap.servers=172.20.132.87<span class="function">:9092</span></span><br><span class="line">    plugin.path=<span class="string">/data/sort/plugins</span></span><br><span class="line">    rest.port=8083</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 驱动网站</span></span><br><span class="line"> https:<span class="string">//www.confluent.io/connector/kafka-connect-jdbc/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## connect启动命令</span></span><br><span class="line">bin/connect-distributed.sh -daemon config/connect-distributed.properties</span><br><span class="line">bin/connect-distributed.sh config/connect-distributed.properties</span><br><span class="line"></span><br><span class="line"><span class="comment">## 检查</span></span><br><span class="line">http:<span class="string">//172.20.132.87</span><span class="function">:8083</span>/connector-plugins</span><br><span class="line">http:<span class="string">//172.20.132.87</span><span class="function">:8083</span>/connectors</span><br><span class="line"></span><br><span class="line"><span class="comment">#  mysql修改数据推动kafka</span></span><br><span class="line">curl -X POST -H 'Content-Type: application/json' -i 'http:<span class="string">//172.20.132.87</span><span class="function">:8083</span>/connectors' \</span><br><span class="line"><span class="params">--data</span> \</span><br><span class="line">'{<span class="string">"name"</span>:<span class="string">"imooc-upload-mysql"</span>,<span class="string">"config"</span>:{</span><br><span class="line"><span class="string">"connector.class"</span>:<span class="string">"io.confluent.connect.jdbc.JdbcSourceConnector"</span>,</span><br><span class="line"><span class="string">"connection.url"</span>:<span class="string">"jdbc:mysql://172.20.132.87:3306/kafka_study?user=root&amp;password=root"</span>,</span><br><span class="line"><span class="string">"table.whitelist"</span>:<span class="string">"users"</span>,</span><br><span class="line"><span class="string">"incrementing.column.name"</span>: <span class="string">"uuid"</span>,</span><br><span class="line"><span class="string">"mode"</span>:<span class="string">"incrementing"</span>,</span><br><span class="line"><span class="string">"topic.prefix"</span>: <span class="string">"imooc-mysql-"</span>}}'</span><br><span class="line">bin/kafka-console-consumer.sh <span class="params">--bootstrap-server</span> 172.20.132.87<span class="function">:9092</span> <span class="params">--topic</span> imooc-mysql-users <span class="params">--from-beginning</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kafka 通道插入数据库</span></span><br><span class="line">curl -X POST -H 'Content-Type: application/json' -i 'http:<span class="string">//172.20.132.87</span><span class="function">:8083</span>/connectors' \</span><br><span class="line"><span class="params">--data</span> \</span><br><span class="line">'{<span class="string">"name"</span>:<span class="string">"imooc-download-mysql"</span>,<span class="string">"config"</span>:{</span><br><span class="line"><span class="string">"connector.class"</span>:<span class="string">"io.confluent.connect.jdbc.JdbcSinkConnector"</span>,</span><br><span class="line"><span class="string">"connection.url"</span>:<span class="string">"jdbc:mysql://172.20.132.87:3306/kafka_study?user=root&amp;password=123456"</span>,</span><br><span class="line"><span class="string">"topics"</span>:<span class="string">"imooc-mysql-users"</span>,</span><br><span class="line"><span class="string">"auto.create"</span>:<span class="string">"false"</span>,</span><br><span class="line"><span class="string">"insert.mode"</span>: <span class="string">"upsert"</span>,</span><br><span class="line"><span class="string">"pk.mode"</span>:<span class="string">"record_value"</span>,</span><br><span class="line"><span class="string">"pk.fields"</span>:<span class="string">"uuid"</span>,</span><br><span class="line"><span class="string">"table.name.format"</span>: <span class="string">"users_bak"</span>}}'</span><br><span class="line"></span><br><span class="line">bin/kafka-console-consumer.sh <span class="params">--bootstrap-server</span> 192.168.220.128<span class="function">:9092</span> <span class="params">--topic</span> test-mysql-jdbc-users <span class="params">--from-beginning</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除通道</span></span><br><span class="line">curl -X DELETE -i 'http:<span class="string">//192.168.220.128</span><span class="function">:8083</span>/connectors/load-mysql-data'</span><br></pre></td></tr></tbody></table></figure>

<h1 id="kafka-集群"><a href="#kafka-集群" class="headerlink" title="kafka 集群"></a>kafka 集群</h1><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#部署</span></span><br><span class="line">    复制多几份kafka</span><br><span class="line">    vi config/server.properties</span><br><span class="line">    broker.id 不能轻易修改 topic和次ID有绑定,如果修改了topic就会无法访问</span><br><span class="line"></span><br><span class="line">    broker.id=<span class="number">0</span></span><br><span class="line">    listeners = PLAINTEXT:<span class="regexp">//</span><span class="number">172.20</span>.<span class="number">132.87</span>:<span class="number">9091</span></span><br><span class="line">    advertised.listeners=PLAINTEXT:<span class="regexp">//</span><span class="number">172.20</span>.<span class="number">132.87</span>:<span class="number">9091</span></span><br><span class="line">    log.dirs=<span class="regexp">/tmp/</span>kafka-logs-<span class="number">1</span></span><br><span class="line">    zookeeper.connect=localhost:<span class="number">2181</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 核心概念</span></span><br><span class="line">    Broker: 一般是指kafka的部署节点,</span><br><span class="line">        集群是一个机器启动一个kafka端口, Broker是每一台机器的ip </span><br><span class="line">        单机是指 启动kafka的每一个进程</span><br><span class="line">        </span><br><span class="line">    Leader: 用于处理消息的接收和消费等请求</span><br><span class="line">    Follower:主要用于备份消息数据</span><br><span class="line"></span><br><span class="line"><span class="comment"># kafka节点故障</span></span><br><span class="line">    kafka 与 zookeeper 心跳未保持  大概<span class="number">30</span>S</span><br><span class="line">    follower 消息落后leader太多</span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点故障处理</span></span><br><span class="line">    kafka基本不会因为节点故障丢失数据</span><br><span class="line">    kafka的语义担保保障数据不会丢失  <span class="number">0</span>最多一次  <span class="number">1</span> 至少一次 all 超过一半以上副本都响应了才确认发送成功了</span><br><span class="line">    kafka会对消息进行集群被平衡,减少消息在某些节点热度过高</span><br><span class="line"></span><br><span class="line"><span class="comment"># kafka 集群之leader选举</span></span><br><span class="line">    kafka并没有采用多数投票才选举leader</span><br><span class="line">    kafka会动态维护一组leader数据的副本(isr)</span><br><span class="line">    kafka会在isr中选择一个速度比较快的设为leader</span><br><span class="line">    isr全部宕机,kafka会进行unclean leader选举</span><br><span class="line">        isr死等,直到恢复</span><br><span class="line">        选举isr以外的follower,会丢数据</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 选举配置建议    </span></span><br><span class="line">    禁用unclean leader选举</span><br><span class="line">    手动指定最小isr,isr小于两个就不发送消息,然后业务去控制异常</span><br><span class="line"></span><br><span class="line"><span class="comment"># kafka集群监控</span></span><br><span class="line">    kafka只能依靠kafka-run-class.sh等命令来管理</span><br><span class="line">    kafka Manager 监控管理工具(https:<span class="regexp">//</span>blog.<span class="number">51</span>cto.com<span class="regexp">/liqingbiao/</span><span class="number">2417010</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#启动</span></span><br><span class="line">    修改 conf/ zookeeper 地址</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># bin/kafka-manager -Dhttp.port=8081</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="kafka-ssl机制"><a href="#kafka-ssl机制" class="headerlink" title="kafka ssl机制"></a>kafka ssl 机制</h1><figure class="highlight stata"><table><tbody><tr><td class="code"><pre><span class="line">创建密钥仓库，用于存储证书文件</span><br><span class="line">keytool -keystore server.keystore.jks -alias xxkafka -validity 100000 -genkey</span><br><span class="line"></span><br><span class="line">创建<span class="keyword">CA</span></span><br><span class="line">openssl req -new -x509 -keyout <span class="keyword">ca</span>-key -<span class="keyword">out</span> <span class="keyword">ca</span>-cert -days 100000</span><br><span class="line"></span><br><span class="line">将生成的<span class="keyword">CA</span>添加到客户信任库</span><br><span class="line">keytool -keystore client.truststore.jks -alias CARoot -import -<span class="keyword">file</span> <span class="keyword">ca</span>-cert</span><br><span class="line"></span><br><span class="line">为broker提供信任库以及所有客户端签名了密钥的<span class="keyword">CA</span>证书</span><br><span class="line">keytool -keystore server.truststore.jks -alias CARoot -import -<span class="keyword">file</span> <span class="keyword">ca</span>-cert</span><br><span class="line"></span><br><span class="line">签名证书，用自己生成的<span class="keyword">CA</span>来签名前面生成的证书</span><br><span class="line">1、从密钥仓库导出证书</span><br><span class="line">keytool -keystore server.keystore.jks -alias xxkafka -certreq -<span class="keyword">file</span> cert-<span class="keyword">file</span></span><br><span class="line"></span><br><span class="line">2、用<span class="keyword">CA</span>签名：</span><br><span class="line">openssl x509 -req -<span class="keyword">CA</span> <span class="keyword">ca</span>-cert -CAkey <span class="keyword">ca</span>-key -<span class="keyword">in</span> cert-<span class="keyword">file</span> -<span class="keyword">out</span> cert-signed -days 100000 -CAcreateserial -passin pass:root123456</span><br><span class="line"></span><br><span class="line">3、导入<span class="keyword">CA</span>的证书和已签名的证书到密钥仓库</span><br><span class="line">keytool -keystore server.keystore.jks -alias CARoot -import -<span class="keyword">file</span> <span class="keyword">ca</span>-cert</span><br><span class="line">keytool -keystore server.keystore.jks -alias xxkafka -import -<span class="keyword">file</span> cert-signed</span><br><span class="line"></span><br><span class="line"># 配置</span><br><span class="line">kafka server.properties:</span><br><span class="line"></span><br><span class="line">	listeners=PLAINTEXT:<span class="comment">//172.20.132.87:9091,SSL://172.20.132.87:8989</span></span><br><span class="line">	advertised.listeners=PLAINTEXT:<span class="comment">//172.20.132.87:9091,SSL://172.20.132.87:8989</span></span><br><span class="line">	ssl.keystore.location=/opt/<span class="keyword">ca</span>-tmp/server.keystore.jks</span><br><span class="line">	ssl.keystore.password=root123456</span><br><span class="line">	ssl.key.password=root123456</span><br><span class="line">	ssl.truststore.location=/opt/<span class="keyword">ca</span>-tmp/server.truststore.jks</span><br><span class="line">	ssl.truststore.password=root123456</span><br><span class="line"></span><br><span class="line"># 测试SSL是否成功</span><br><span class="line">openssl s_client -debug -connect 172.20.132.87:8989 -tls1</span><br><span class="line"></span><br><span class="line"># 客户端配置：</span><br><span class="line">security.protocol=SSL</span><br><span class="line">ssl.endpoint.identification.algorithm=</span><br><span class="line">ssl.truststore.location=/opt/<span class="keyword">ca</span>-tmp2/client.truststore.jks</span><br><span class="line">ssl.truststore.password=root123456</span><br></pre></td></tr></tbody></table></figure>

<h1 id="案例-spring-bus-动态配置"><a href="#案例-spring-bus-动态配置" class="headerlink" title="案例 spring bus 动态配置"></a>案例 spring bus 动态配置</h1><figure class="highlight dts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"># springCloud config</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">## SpringCloud</span></span><br><span class="line">    <span class="params">&lt;dependencyManagement&gt;</span></span><br><span class="line">        <span class="params">&lt;dependencies&gt;</span></span><br><span class="line">            <span class="params">&lt;dependency&gt;</span></span><br><span class="line">                <span class="params">&lt;groupId&gt;</span>org.springframework.cloud<span class="params">&lt;/groupId&gt;</span></span><br><span class="line">                <span class="params">&lt;artifactId&gt;</span>spring-cloud-dependencies<span class="params">&lt;/artifactId&gt;</span></span><br><span class="line">                <span class="params">&lt;version&gt;</span>Hoxton.SR4<span class="params">&lt;/version&gt;</span></span><br><span class="line">                <span class="params">&lt;type&gt;</span>pom<span class="params">&lt;/type&gt;</span></span><br><span class="line">                <span class="params">&lt;scope&gt;</span>import<span class="params">&lt;/scope&gt;</span></span><br><span class="line">            <span class="params">&lt;/dependency&gt;</span></span><br><span class="line">        <span class="params">&lt;/dependencies&gt;</span></span><br><span class="line">    <span class="params">&lt;/dependencyManagement&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">## Config Server</span></span><br><span class="line">    <span class="params">&lt;dependency&gt;</span></span><br><span class="line">        <span class="params">&lt;groupId&gt;</span>org.springframework.cloud<span class="params">&lt;/groupId&gt;</span></span><br><span class="line">        <span class="params">&lt;artifactId&gt;</span>spring-cloud-config-server<span class="params">&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="params">&lt;/dependency&gt;</span></span><br><span class="line">    </span><br><span class="line">    spring.application.name=config-server</span><br><span class="line">    server.port=<span class="number">8900</span></span><br><span class="line">    spring.cloud.config.server.git.uri = xxx</span><br><span class="line">    spring.cloud.config.label=master</span><br><span class="line">    spring.cloud.config.server.git.username= xx</span><br><span class="line">    spring.cloud.config.server.git.password= xx</span><br><span class="line">    </span><br><span class="line">    <span class="meta">## 验证config server</span></span><br><span class="line"><span class="symbol">    http:</span><span class="comment">//localhost:8900/kafka/master</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">## Config Client</span></span><br><span class="line">    <span class="params">&lt;dependency&gt;</span></span><br><span class="line">        <span class="params">&lt;groupId&gt;</span>org.springframework.boot<span class="params">&lt;/groupId&gt;</span></span><br><span class="line">        <span class="params">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="params">&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="params">&lt;/dependency&gt;</span></span><br><span class="line">    <span class="params">&lt;dependency&gt;</span></span><br><span class="line">        <span class="params">&lt;groupId&gt;</span>org.springframework.cloud<span class="params">&lt;/groupId&gt;</span></span><br><span class="line">        <span class="params">&lt;artifactId&gt;</span>spring-cloud-starter-config<span class="params">&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="params">&lt;/dependency&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">## bootstrap.yml配置：</span></span><br><span class="line"><span class="symbol">    spring:</span></span><br><span class="line"><span class="symbol">        application:</span></span><br><span class="line"><span class="symbol">            name:</span> kafka</span><br><span class="line"><span class="symbol">        cloud:</span></span><br><span class="line"><span class="symbol">            config:</span></span><br><span class="line"><span class="symbol">                uri:</span> http:<span class="comment">//localhost:8900/</span></span><br><span class="line"><span class="symbol">                label:</span> master</span><br><span class="line"> </span><br><span class="line">    <span class="meta">## 动态刷新配置依赖</span></span><br><span class="line">    <span class="params">&lt;dependency&gt;</span></span><br><span class="line">        <span class="params">&lt;groupId&gt;</span>org.springframework.boot<span class="params">&lt;/groupId&gt;</span></span><br><span class="line">        <span class="params">&lt;artifactId&gt;</span>spring-boot-starter-actuator<span class="params">&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="params">&lt;/dependency&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">## 增加访问point</span></span><br><span class="line">    management.endpoints.web.exposure.include=health, info, refresh</span><br><span class="line">    </span><br><span class="line">    <span class="meta">## post请求访问/actuator/refresh</span></span><br><span class="line">    curl -XPOST http:<span class="comment">//localhost:7002/actuator/refresh</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># springCloud bus</span></span><br><span class="line">    <span class="meta">## 配置依赖：</span></span><br><span class="line">    <span class="params">&lt;dependency&gt;</span></span><br><span class="line">        <span class="params">&lt;groupId&gt;</span>org.springframework.cloud<span class="params">&lt;/groupId&gt;</span></span><br><span class="line">        <span class="params">&lt;artifactId&gt;</span>spring-cloud-starter-bus-kafka<span class="params">&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="params">&lt;/dependency&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">## Kafka配置：</span></span><br><span class="line">    </span><br><span class="line">    spring.cloud.stream.kafka.binder.zkNodes=xx:<span class="number">2181</span></span><br><span class="line">    spring.cloud.stream.kafka.binder.brokers=xx:<span class="number">9092</span></span><br><span class="line"><span class="symbol">    </span></span><br><span class="line"><span class="symbol">    management:</span></span><br><span class="line"><span class="symbol">      endpoints:</span></span><br><span class="line"><span class="symbol">        web:</span></span><br><span class="line"><span class="symbol">          exposure:</span></span><br><span class="line"><span class="symbol">            include:</span> health, info, refresh, bus-refresh</span><br><span class="line">    </span><br><span class="line">    <span class="meta">## 配置刷新</span></span><br><span class="line">    curl -X POST http:<span class="comment">//localhost:7002/actuator/bus-refresh</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">## 测试：</span></span><br><span class="line"><span class="symbol">    http:</span><span class="comment">//localhost:7001/test</span></span><br><span class="line"><span class="symbol">    http:</span><span class="comment">//localhost:7002/test</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="配置大全"><a href="#配置大全" class="headerlink" title="配置大全"></a>配置大全</h1><p><a href="/resources/kafka%E9%85%8D%E7%BD%AE.pdf">kafka.pdf</a></p>
<h1 id="kafka-面试点"><a href="#kafka-面试点" class="headerlink" title="kafka 面试点"></a>kafka 面试点</h1><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><ul>
<li><p>日志格式<br><img data-src="/images/kafka/%E6%B6%88%E6%81%AF.png"><br><img data-src="/images/kafka/log.png"></p>
</li>
<li><p>零拷贝<br><img data-src="/images/kafka/zerofile1.png"><br><img data-src="/images/kafka/zerofile2.png"></p>
</li>
</ul>
<figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1.</span>为什么使用kafka / kafka和其他中间件不同 / kafka好在哪里</span><br><span class="line">    kafka是一个分布式流处理平台,值是提供发布订阅及Topic支持,所以才会和其他MQ作比较</span><br><span class="line">    kafka吞吐量高但不保证消息有序,单<span class="keyword">partition</span>内有序</span><br><span class="line">    kafka提供了offest管理,历史消息也可以再次消费</span><br><span class="line">    kafka为了高效性,数据没有同步刷盘,所以可能存在丢数据的情况</span><br><span class="line"><span class="number">2.</span> 场景使用</span><br><span class="line">    日志收集和流式系统</span><br><span class="line">    消息系统</span><br><span class="line">    用户活动跟踪或运营指标监控</span><br><span class="line"><span class="number">3.</span>kafka 为什么吞吐量大?</span><br><span class="line">    生产者 -&gt; 落磁盘 -&gt;消费者 -&gt; 读磁盘</span><br><span class="line">    关于IO的优化</span><br><span class="line">        日志顺序读写和快速检索</span><br><span class="line">        <span class="keyword">partition</span>机制 - 一个topic分为多个<span class="keyword">partition</span> ,可有效分配热点数据,减少数据积压</span><br><span class="line">        批量发送接收和数据压缩机制(减少网络传输) - 批量数据压缩比单条数据效率高</span><br><span class="line">        通过sendFile实现零拷贝原则</span><br><span class="line">       </span><br><span class="line"><span class="number">4.</span>日志顺序读写和快速检索是什么?</span><br><span class="line">    kafka的日志是以<span class="keyword">partition</span>为单位进行保存</span><br><span class="line">    日志目录是以topic名称+数字</span><br><span class="line">    日志文件格式是一个"日志条目"序列</span><br><span class="line">    每条日志消息由<span class="number">4</span>字节整形与N字节消息组成</span><br><span class="line">    日志分段</span><br><span class="line">        每个<span class="keyword">partition</span>的日志会分为N个大小相等的segment中</span><br><span class="line">        每个segment中消息数量不一定相等</span><br><span class="line">        每个<span class="keyword">partition</span>只支持顺序读写</span><br><span class="line">     segment存储结构</span><br><span class="line">        <span class="keyword">partition</span>会将消息添加到最后一个segment上</span><br><span class="line">        当segment达到一定阈值会flush到磁盘上</span><br><span class="line">        segment文件会被划分成<span class="keyword">index</span>,<span class="keyword">log</span>两部分 </span><br><span class="line">    日志读操作(逐级检索)</span><br><span class="line">        首先需要在存储的数据中找出segment文件</span><br><span class="line">        然后通过全局<span class="keyword">offset</span>计算出segment中的<span class="keyword">offset</span></span><br><span class="line">        通过<span class="keyword">index</span>中的<span class="keyword">offset</span>寻找具体数据内容</span><br><span class="line">    日志写操作</span><br><span class="line">        日志允许串行的追加到消息文件最后</span><br><span class="line">        当日志文件达到阈值则滚动到新文件上 </span><br><span class="line"><span class="number">5.</span>sendfile 零拷贝</span><br><span class="line">    抛弃用户缓冲区,直接在内核读取文件</span><br><span class="line"></span><br><span class="line">     </span><br></pre></td></tr></tbody></table></figure>
<h2 id="生产消息"><a href="#生产消息" class="headerlink" title="生产消息"></a>生产消息</h2><ul>
<li>producer 创建两个线程 核心线程 + 守护线程</li>
<li>守护线程：时间或者 size 阈值批量推送，并回调 future</li>
</ul>
<p><img data-src="/images/kafka/producer.png"><br><img data-src="/images/kafka/producer1.png"></p>
<h2 id="kafka保证有序性"><a href="#kafka保证有序性" class="headerlink" title="kafka保证有序性"></a>kafka 保证有序性</h2><figure class="highlight maxima"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1</span>.单topic 单<span class="built_in">partition</span></span><br><span class="line"><span class="number">2</span>.使用kafka <span class="built_in">key</span>+offset可以做到业务有序</span><br><span class="line">    订单号作为<span class="built_in">key</span> offset的先后顺序来标记该订单的业务顺序</span><br></pre></td></tr></tbody></table></figure>

<h2 id="kafka-topic删除"><a href="#kafka-topic删除" class="headerlink" title="kafka topic删除"></a>kafka topic 删除</h2><p><img data-src="/images/kafka/del.png"></p>
<figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line">* 通过异步线程删除,</span><br><span class="line">* 尽量将kafka停掉再删除</span><br><span class="line">* auto.<span class="keyword">create</span>.topics.<span class="keyword">enable</span> = <span class="keyword">false</span></span><br><span class="line">* <span class="keyword">delete</span>.topic.<span class="keyword">enable</span> = <span class="keyword">true</span> </span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>C 语言</title>
    <url>/2021/05/25/4.2-C%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/4.jpg"></p>
</span>

<span id="more"></span>

<h1 id="VS-配置"><a href="#VS-配置" class="headerlink" title="VS 配置"></a>VS 配置</h1><ul>
<li>alt+G 是查看反汇编</li>
</ul>
<p><img data-src="/images/c++/vs1.png"></p>
<p><img data-src="/images/c++/vs2.png"></p>
<p><img data-src="/images/c++/vs3.png"></p>
<h1 id="if-switch"><a href="#if-switch" class="headerlink" title="if-switch"></a>if-switch</h1><figure class="highlight coffeescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">else</span> 条件比较多依次比较,比较到最后会执行更多的汇编指令</span><br><span class="line"><span class="keyword">switch</span> </span><br><span class="line">    条件比较少,和<span class="keyword">if</span>/<span class="keyword">else</span>汇编一样,效率也一样</span><br><span class="line">    条件比较多,编译器优化,固定执行几个汇编指令,再跳转</span><br><span class="line">    事先存好所有的条件地址,并且连续存储,并且以<span class="number">0</span>开始,乱序无影响</span><br><span class="line">    jmp [(<span class="literal">no</span>-第一个条件的数值)*<span class="number">4</span> + 第一个条件函数地址]</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure>
<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><figure class="highlight ldif"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">debug模式</span>: 很多调试信息</span><br><span class="line"><span class="attribute">Release模式</span>: 去除调试信息,生成可执行文件比较高效,精简</span><br></pre></td></tr></tbody></table></figure>
<h2 id="固定头部文件"><a href="#固定头部文件" class="headerlink" title="固定头部文件"></a>固定头部文件</h2><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="built_in">getchar</span>(); 停留获取键盘输入</span><br></pre></td></tr></tbody></table></figure>
<h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line">cout 是 输出 用 &lt;&lt; 运算符</span><br><span class="line">cin  是 输入 用 &gt;&gt; 运算符</span><br><span class="line">endl是换行</span><br><span class="line">示例:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	cout &lt;&lt; <span class="string">"please 输入:"</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	cin &gt;&gt; age;</span><br><span class="line">	cout &lt;&lt; <span class="string">"age is :"</span> &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="字节数"><a href="#字节数" class="headerlink" title="字节数"></a>字节数</h2><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">E8 <span class="number">45</span> EE FF FF       call        <span class="attribute">display</span> (<span class="number">0171479</span>h<span class="selector-attr">[函数内存地址]</span>) </span><br><span class="line">调用 <span class="attribute">display</span> 函数在内存中占用<span class="number">5</span>字节</span><br><span class="line">且机器指令函数内存是连续的</span><br></pre></td></tr></tbody></table></figure>
<h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><ul>
<li>规则:</li>
<li><ul>
<li> 函数名相同</li>
</ul>
</li>
<li><ul>
<li>参数个数不同，参数类型，参数顺序不同</li>
</ul>
</li>
<li>注意:</li>
<li><ul>
<li> 调用函数时，实参的隐式转换可能产生二义性</li>
</ul>
</li>
<li><ul>
<li>函数返回值和重载无关 <figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#隐式转换产生二义性</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">dis</span>(<span class="params"><span class="built_in">long</span> a</span>)</span>{</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">dis</span>(<span class="params"><span class="built_in">double</span> a</span>)</span>{</span><br><span class="line">}</span><br><span class="line">dis(<span class="number">10</span>);</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
</li>
<li>本质</li>
<li><ul>
<li>采取了 name mangling 或者 name decoration 技术</li>
</ul>
</li>
<li><ul>
<li>编译器会对符号名 (如函数名) 进行改编，修饰</li>
</ul>
</li>
<li><ul>
<li>可用 IDA pro 工具查看反汇编 - 使用 release 模式 - 并且禁用编译器优化 <figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"># 重新编排 叫dis_int() 或者 dis_1 ,看具体规则</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">dis</span>(<span class="params"><span class="built_in">int</span> a</span>)</span>{</span><br><span class="line">}</span><br><span class="line"><span class="meta"># 重新编排 叫dis_double()</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">dis</span>(<span class="params"><span class="built_in">double</span> a</span>)</span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h2><figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> v1,<span class="keyword">int</span> v2)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> v1+v2;</span><br><span class="line">}</span><br><span class="line">(<span class="number">1</span>) v1=<span class="number">5</span>,v2 =<span class="number">6</span> 默认值 <span class="number">5</span>,<span class="number">6</span></span><br><span class="line">(<span class="number">2</span>) 默认参数只能 右到左,依次从右填充</span><br><span class="line">(<span class="number">3</span>) 函数同时有声明(声明:是表明在main函数前面,实现在main函数后面),实现,默认参数只能放在函数声明中</span><br><span class="line">(<span class="number">4</span>) 默认参数值可以是常量,全局符号(全局变量,函数名)</span><br><span class="line">    函数名:</span><br><span class="line">        <span class="built_in"><span class="keyword">void</span></span>(*p)(<span class="keyword">int</span>) = test;  <span class="comment">// 表示 存在一个函数test ,返回值是空,参数为int </span></span><br><span class="line">        <span class="built_in">p</span>(<span class="number">1</span>);</span><br><span class="line">(<span class="number">5</span>)函数重载和默认参数有可能会产生二义性 - 优先使用默认参数</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b = <span class="number">20</span>)</span></span>{}</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> a)</span></span>{}</span><br><span class="line">    <span class="built_in">display</span>(<span class="number">10</span>);</span><br><span class="line">(<span class="number">6</span>) 本质</span><br><span class="line">    直接将默认值push到函数中-意思就是还是传了两个参数</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
</li>
</ul>
<h1 id="extern-C"><a href="#extern-C" class="headerlink" title="extern C"></a>extern C</h1><ul>
<li>被 extern C 修饰的代码会被 C 语言的方式去编译 <figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="built_in">dis</span>(<span class="keyword">int</span> a){}</span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="built_in">dis</span>(){}</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> {</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> a)</span></span>{}</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">double</span> a)</span></span>{}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li>声明和实现同时存在，extern C 必须修饰声明，实现也可以加 <figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function"><span class="keyword">void</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function"><span class="keyword">void</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> a)</span></span>{}</span><br></pre></td></tr></tbody></table></figure></li>
<li>使用：在开发过程中 c++ 调用 C 代码，因为编译规则不一样，c++ 函数编译规则会使用 name mingling ,C 语言函数不会重载，找寻函数规则不一样</li>
</ul>
<ul>
<li>使用方法<br><img data-src="/images/c++/%E9%87%8D%E5%A4%8D%E5%AE%9A%E4%B9%89.png"></li>
</ul>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line">.cpp文件会默认定一个宏,C不会默认定义</span><br><span class="line"></span><br><span class="line">声明写在头文件中,实现写在.c里面,再根据是否有宏来区分c和c++环境</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> math.h;</span></span><br><span class="line"></span><br><span class="line"># 防止重复加载-宏名字定义规范和文件名保持一致</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __MATH_H</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> __MATH_H</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> _cplusplus</span></span><br><span class="line">        extren <span class="string">"C"</span> {</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">()</span></span>;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">()</span></span>;</span><br><span class="line">            <span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> _cplusplus</span></span><br><span class="line">        } </span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">---------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once 也可以防止整个头文件重复加载,但是范围是整个文件,#<span class="meta-keyword">ifndef</span>可以定义某一部分</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h1><ul>
<li><p>纯粹的文本替换</p>
<figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(v) v+v</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">10</span></span><br><span class="line">    <span class="built_in">int</span> c = <span class="keyword">add</span>(++a);</span><br><span class="line">    <span class="comment">//替换为    </span></span><br><span class="line">    <span class="built_in">int</span> c = ++a + ++a  == <span class="number">24</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h1 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h1></li>
<li><p>使用 inline 修饰函数的声明或实现，可使其变成内联函数</p>
</li>
<li><p>建议声明和实现都加上 inline, 只要声明和实现任意加一个都是内联函数</p>
</li>
<li><p>特点</p>
</li>
<li><ul>
<li> 编译器会降函数调用直接展开为函数体代码</li>
</ul>
</li>
<li><ul>
<li> [函数调用是需要开辟函数栈空间的，结束回收栈空间，内存开销] – 内联函数不需要开销，执行效率会提高</li>
</ul>
</li>
<li><ul>
<li> 会增大代码体积</li>
</ul>
</li>
<li><p>什么时候使用内联函数？</p>
</li>
<li><ul>
<li>函数体积不是很大</li>
</ul>
</li>
<li><ul>
<li>频繁调用的函数</li>
</ul>
</li>
<li><p>注意</p>
</li>
<li><ul>
<li>尽量不要内联超过 10 行代码的函数</li>
</ul>
</li>
<li><ul>
<li> inline 只是建议编译器可以内联，但是是否内联要看编译器心情 [递归不会被内联，递归前面的一小段代码可能会被加载，但也只加载一次]</li>
</ul>
</li>
<li><ul>
<li> 编译器 release 模式，关闭优化，开启内联开关</li>
</ul>
</li>
<li><p>内联函数和宏</p>
</li>
<li><ul>
<li>宏也是替换，对比宏，内联函数多了函数检测和代码提示，简单的计算内联会比较好 </li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"># 编译器会降函数调用直接展开为函数体代码</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>{</span><br><span class="line">    cout &lt;&lt; <span class="string">"function1"</span> &lt;&lt; endl;   </span><br><span class="line">    cout &lt;&lt; <span class="string">"function2"</span> &lt;&lt; endl;   </span><br><span class="line">    cout &lt;&lt; <span class="string">"function3"</span> &lt;&lt; endl;   </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">func</span>();</span><br><span class="line">    ----- <span class="built_in">func</span>()变成 -----------</span><br><span class="line">    cout &lt;&lt; <span class="string">"function1"</span> &lt;&lt; endl;   </span><br><span class="line">    cout &lt;&lt; <span class="string">"function2"</span> &lt;&lt; endl;   </span><br><span class="line">    cout &lt;&lt; <span class="string">"function3"</span> &lt;&lt; endl;</span><br><span class="line">    ---------------------------</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h1 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h1><figure class="highlight mipsasm"><table><tbody><tr><td class="code"><pre><span class="line">int a = <span class="number">1</span>;</span><br><span class="line">int <span class="keyword">b </span>= <span class="number">2</span>;</span><br><span class="line">(a = <span class="keyword">b </span>) = <span class="number">4</span></span><br><span class="line">(a&gt;<span class="keyword">b?a:b) </span>= <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">count</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"><span class="built_in">count</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; <span class="keyword">b </span>&lt;&lt; endl;</span><br></pre></td></tr></tbody></table></figure>
<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><ul>
<li>被修饰的表示为常量，不能修改，类似于 java 的 final</li>
<li> 修饰的是类，结构体 (的指针), 其他成员也不可以更改 <figure class="highlight excel"><table><tbody><tr><td class="code"><pre><span class="line">struct <span class="built_in">Date</span>{</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">year</span>;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">month</span>;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">day</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">int</span> main(){</span><br><span class="line">    const <span class="built_in">Date</span> d = {<span class="number">2011</span>,<span class="number">2</span>,<span class="number">5</span>};</span><br><span class="line">    <span class="built_in">Date</span> <span class="symbol">d1</span> = {<span class="number">2011</span>,<span class="number">2</span>,<span class="number">5</span>};</span><br><span class="line">    <span class="symbol">d1</span>.<span class="built_in">year</span> = <span class="number">2012</span>;</span><br><span class="line">    <span class="symbol">d1</span> = d;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Date</span> *p = &amp;<span class="symbol">d1</span>;</span><br><span class="line">    p-&gt;<span class="built_in">year</span> = <span class="number">2022</span></span><br><span class="line">    (*p).<span class="built_in">year</span> = <span class="number">2021</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li>const 修饰的是右边的内容 <figure class="highlight autoit"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> main(){</span><br><span class="line">    <span class="built_in">int</span> age = <span class="number">10</span><span class="comment">;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> *p1 = $age<span class="comment">;</span></span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">const</span> *p2 = $age<span class="comment">;</span></span><br><span class="line">    <span class="built_in">int</span> * <span class="keyword">const</span> p3 = $age<span class="comment">;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> * <span class="keyword">const</span> p4 = $age<span class="comment">;</span></span><br><span class="line">    *p5和p5是常量</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">const</span> * <span class="keyword">const</span> p5 = $age<span class="comment">;</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="引用-reference"><a href="#引用-reference" class="headerlink" title="引用(reference)"></a>引用 (reference)</h1><ul>
<li>在 C 可以用指针间接获取，修改某个变量的值</li>
<li>在 C++ 引入引用 &amp;, 可以接获取，修改某个变量的值 <figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//rage就是一个引用</span></span><br><span class="line"><span class="built_in">int</span> &amp;rage = age;</span><br></pre></td></tr></tbody></table></figure></li>
<li>注意点</li>
<li><ul>
<li>引用相当于是变量的别名 (基本数据类型，枚举，结构体，类，指针，数组等，都可以有引用)<figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"># 指针数组,存放3个int *</span></span><br><span class="line">    <span class="built_in">int</span> *p;</span><br><span class="line">    <span class="built_in">int</span> *arr[<span class="number">3</span>] = {p,p,p};</span><br><span class="line"><span class="meta"># 用于指向数组的指针 - int[3] 的指针</span></span><br><span class="line">    <span class="built_in">int</span> (*arr2)[<span class="number">3</span>]</span><br><span class="line"><span class="meta"># 用于指向数组的引用 - int[3] 的引用</span></span><br><span class="line">    <span class="built_in">int</span> arr[] = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>}</span><br><span class="line">    <span class="built_in">int</span> (&amp;<span class="keyword">ref</span>)[<span class="number">3</span>] = arr;</span><br><span class="line">    <span class="meta">#另外一种写法</span></span><br><span class="line">    <span class="built_in">int</span> * <span class="keyword">const</span> &amp;<span class="keyword">ref</span> = arr;</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
</li>
<li><ul>
<li>对引用做计算，就是对引用所指向的变量做计算</li>
</ul>
</li>
<li><ul>
<li>在定义的时候就必须初始化，一旦指向了某个变量，就不可以在改变，从一而终</li>
</ul>
</li>
<li><ul>
<li>可以用引用初始化另一个引用，相当于某个变量的多个别名 <figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line">#可以用引用初始化另一个引用,相当于某个变量的多个别名</span><br><span class="line">    <span class="built_in">int</span> height = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">int</span> &amp;<span class="built_in">ref</span>1 = height;</span><br><span class="line">    <span class="built_in">int</span> &amp;<span class="built_in">ref</span>2 = <span class="built_in">ref</span>1;</span><br><span class="line">    <span class="built_in">int</span> &amp;<span class="built_in">ref</span>3 = <span class="built_in">ref</span>2;</span><br><span class="line">    <span class="built_in">ref</span>1,<span class="built_in">ref</span>2,<span class="built_in">ref</span>3都指向height</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
</li>
<li><ul>
<li>不存在 [引用的引用，指向引用的指针，引用数组]<figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"># 引用的引用</span></span><br><span class="line">    <span class="built_in">int</span> age = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">int</span> &amp;<span class="keyword">ref</span> = age;</span><br><span class="line">    <span class="built_in">int</span> &amp;&amp;ref2 = <span class="keyword">ref</span>;</span><br><span class="line"><span class="meta"># 指向引用的指针</span></span><br><span class="line">    <span class="built_in">int</span> &amp;*ref2 = &amp;<span class="keyword">ref</span>;</span><br><span class="line"><span class="meta"># 引用数组</span></span><br><span class="line">    <span class="built_in">int</span> &amp;arr[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">int</span> &amp;arr[<span class="number">4</span>] = {<span class="keyword">ref</span>,<span class="keyword">ref</span>,<span class="keyword">ref</span>,<span class="keyword">ref</span>} 其实就是<span class="number">4</span>个age ,就是<span class="number">4</span>个<span class="built_in">int</span>,所以&amp;符号无效,没有意义</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure></li>
</ul>
</li>
<li>价值</li>
<li><ul>
<li>比指针更安全，函数返回值可以被赋值 </li>
</ul>
</li>
<li>引用的本质</li>
<li><ul>
<li>引用就是指针，只是被削弱了功能，所以引用就是弱化了的指针 <figure class="highlight vala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta"># *p就是age别名</span></span><br><span class="line">    <span class="keyword">int</span> *p = &amp;age;</span><br><span class="line">    *p = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta"># ref就是age的别名</span></span><br><span class="line">    <span class="keyword">int</span> &amp;ref = age;</span><br><span class="line">    ref = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta"># int 一个指针引用占用4个字节</span></span><br><span class="line"><span class="meta"># 一个指针变量*p 32位占用4个字节 64位是8个字节</span></span><br><span class="line"><span class="meta"># 一个引用占用一个指针的大小....引用就是弱化的指针</span></span><br><span class="line">    <span class="keyword">struct</span>{</span><br><span class="line">        <span class="keyword">int</span> &amp;age;</span><br><span class="line">        <span class="keyword">int</span> *name;</span><br><span class="line">        <span class="keyword">int</span> sex;</span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; sizeof(Student) &lt;&lt; endl;</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
</li>
<li>常引用</li>
<li><ul>
<li>可以用于访问引用，不能修改地址值 - 只读<br><img data-src="/images/c++/%E6%B1%87%E7%BC%966.png"><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"># 引用和指针</span></span><br><span class="line">    <span class="built_in">int</span> age = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> &amp;<span class="keyword">ref</span> = age;</span><br><span class="line">    <span class="comment">//ref = 30;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> *p = &amp;age;</span><br><span class="line">    <span class="comment">//*p = 30;</span></span><br><span class="line"><span class="meta"># 常引用可以指向临时数据</span></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> &amp;<span class="keyword">ref</span> = <span class="number">30</span>;</span><br><span class="line"><span class="meta"># 可以指向表达式</span></span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int</span> b =<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> &amp;<span class="keyword">ref</span> = a+b;</span><br><span class="line"><span class="meta"># 可以指向函数返回值</span></span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">fun</span>(<span class="params"></span>)</span>{</span><br><span class="line">     <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> &amp;<span class="keyword">ref</span> = fun();</span><br><span class="line"><span class="meta"># 可以指向不同类型的数据</span></span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">double</span> &amp;<span class="keyword">ref</span> = a;</span><br><span class="line"><span class="meta"># 作为函数参数时(此规则也适用于const指针)</span></span><br><span class="line">    可以接受<span class="keyword">const</span>和非<span class="keyword">const</span>实参(非<span class="keyword">const</span>引用,只能接受非<span class="keyword">const</span>实参)</span><br><span class="line">    可以跟非<span class="keyword">const</span>引用构成重载</span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">sum</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">int</span> &amp;v1,<span class="keyword">const</span> <span class="built_in">int</span> &amp;v2</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> v1+v2;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//重载</span></span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">sum</span>(<span class="params"><span class="built_in">int</span> &amp;v1,<span class="built_in">int</span> &amp;v2</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> v1+v2;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">int</span> a =<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">int</span> b =<span class="number">20</span>;</span><br><span class="line">    sum(a,b);</span><br><span class="line">    sum(<span class="number">10</span>,<span class="number">20</span>)<span class="comment">//报错</span></span><br><span class="line">    可以用<span class="keyword">const</span>做一下兼容</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> c = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">int</span> d = <span class="number">10</span>;</span><br><span class="line">    sum(c,d);</span><br><span class="line"> <span class="meta"># 当常引用指向了不同类型的数据,会生成临时变量,不是引用原来的对象了</span></span><br><span class="line">     <span class="built_in">int</span> c = <span class="number">10</span>;</span><br><span class="line">     <span class="keyword">const</span> <span class="built_in">long</span> a  = c</span><br><span class="line">     c =<span class="number">20</span>;</span><br><span class="line">     -- c=<span class="number">20</span> a还是<span class="number">10</span>,生成一个临时变量,a 指向之前的地址  </span><br></pre></td></tr></tbody></table></figure>
<h1 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h1></li>
</ul>
</li>
</ul>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>汇编语言的种类</li>
<li><ul>
<li> 8066 汇编 (16bit)</li>
</ul>
</li>
<li><ul>
<li>x86 汇编 (32bit)</li>
</ul>
</li>
<li><ul>
<li>x64 汇编 (64bit)</li>
</ul>
</li>
<li><ul>
<li>Arm 汇编 (嵌入式，移动设备)</li>
</ul>
</li>
<li>x64 汇编根据编译器不同，有两种书写格式</li>
<li><ul>
<li> Intel</li>
</ul>
</li>
<li><ul>
<li>AT&amp;T</li>
</ul>
</li>
<li> 汇编语言不区分大小写</li>
<li> Intel &amp; AT&amp;T 区别<br><img data-src="/images/c++/%E6%B1%87%E7%BC%961.png"></li>
</ul>
<h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><h3 id="程序的本质"><a href="#程序的本质" class="headerlink" title="程序的本质"></a>程序的本质</h3><p> <img data-src="/images/c++/%E6%B1%87%E7%BC%962.png"></p>
<h3 id="寄存器与内存"><a href="#寄存器与内存" class="headerlink" title="寄存器与内存"></a>寄存器与内存</h3><p> <img data-src="/images/c++/%E6%B1%87%E7%BC%963.png"></p>
<h3 id="X64汇编-寄存器"><a href="#X64汇编-寄存器" class="headerlink" title="X64汇编-寄存器"></a>X64 汇编 - 寄存器</h3><p> <img data-src="/images/c++/%E6%B1%87%E7%BC%964.png"><br> <img data-src="/images/c++/%E6%B1%87%E7%BC%965.png"></p>
<ul>
<li>一个寄存器存 8 个字节的数据</li>
<li> RAX\RBX\RCX\RDX: 64 位比较常见的通用寄存器</li>
<li> EAX\EBX\ECX\EDX: 32 位比较常见的通用寄存器</li>
<li> AX\BX\CX\DX: 16 位比较常见的通用寄存器</li>
<li> AH: A-HIGH AL: A-LOW 占 1 个字节</li>
</ul>
<h2 id="X64汇编要点"><a href="#X64汇编要点" class="headerlink" title="X64汇编要点"></a>X64 汇编要点</h2><p><img data-src="/images/c++/mov.png"></p>
<figure class="highlight x86asm"><table><tbody><tr><td class="code"><pre><span class="line"># 一个字节占<span class="number">8</span>位</span><br><span class="line"># <span class="number">1122h</span> - h表示<span class="number">16</span>进制</span><br><span class="line"># 将右边src的值赋值给左边,类似于dest = src // <span class="keyword">mov</span> dest,src</span><br><span class="line"># [地址值] 中都是内存地址值</span><br><span class="line"># <span class="built_in">word</span> 是<span class="number">2</span>字节,<span class="built_in">dword</span>是<span class="number">4</span>字节(double <span class="built_in">word</span>),<span class="built_in">qword</span>是<span class="number">8</span>字节(quad <span class="built_in">word</span>)</span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="number">1128h</span>] <span class="number">3</span> - 将<span class="number">3</span>赋值到<span class="number">1128h</span>地址往后<span class="number">4</span>个字节</span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">eax</span>, <span class="built_in">dword</span> <span class="built_in">ptr</span>[<span class="number">1128h</span>] - 将<span class="number">1128h</span>地址往后<span class="number">4</span>个字节的数据赋值到寄存器</span><br><span class="line">    <span class="number">4</span>个字节存储<span class="number">3</span></span><br><span class="line">        <span class="number">16</span>进制 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">03H</span></span><br><span class="line">        <span class="number">2</span>进制  <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000011</span>(<span class="meta">cpu</span>大小端模式: 大部分是小端模式,值在低位,所以某个变量的地址值,是它所有字节地址的最小值)</span><br><span class="line">    函数调用局部变量,所以需要[<span class="built_in">ebp</span>-<span class="number">0Ch</span>],地址相减,因为函数会动态分配地址</span><br><span class="line">    全局变量地址是不会变的,<span class="keyword">mov</span>时是固定的</span><br><span class="line"># <span class="keyword">call</span> 调用函数</span><br><span class="line"># <span class="keyword">lea</span> dest [地址值]</span><br><span class="line">    lead effect address 装载一个有效的地址值 , 直接将地址值复值给dest </span><br><span class="line"># <span class="keyword">ret</span> 函数返回</span><br><span class="line"># <span class="keyword">xor</span> op1,op2 将op1和op2异或的结果赋值给op1,类似于op1=op1^op2</span><br><span class="line"># <span class="keyword">add</span> op1,op2 将op1和op2相加的结果赋值给op1,类似于op1=op1+op2</span><br><span class="line"># <span class="keyword">sub</span> op1,op2 将op1和op2相减的结果赋值给op1,类似于op1=op1-op2</span><br><span class="line"># <span class="keyword">inc</span> op 自增,类似于op=op+<span class="number">1</span></span><br><span class="line"># <span class="keyword">dec</span> op 自增,类似于op=op-<span class="number">1</span></span><br><span class="line"># <span class="keyword">jmp</span> 内存地址 跳转到该地址执行命令</span><br><span class="line">    j开头(<span class="keyword">jne</span>,<span class="keyword">jle</span>...)的一般都是跳转,大多数是带条件的跳转,一般是跟<span class="keyword">test</span>,<span class="keyword">cmp</span>等指令配合使用</span><br><span class="line"># 为什么<span class="keyword">mov</span> 不能 内存到内存,要通过寄存器?</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">    <span class="keyword">int</span> b = a<span class="comment">;</span></span><br><span class="line">    不能直接 <span class="keyword">mov</span> [b],[a],必须要通过<span class="built_in">eax</span></span><br><span class="line">    imm 立即数 如<span class="number">1</span>,m 内存</span><br></pre></td></tr></tbody></table></figure>

<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><ul>
<li>struct 定义的类成员都是 public,class 定义的类默认都是 private, 其他无区别</li>
<li>类的大小和类成员变量大小相关，int 4 字节 指针 8 字节，类中的方法在内存中只有一份</li>
</ul>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p><img data-src="/images/c++/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8.png"></p>
<ul>
<li>this 指针存储着函数调用的地址</li>
<li> this 指向了函数的调用者</li>
<li> this 是指针，只能用 -&gt; 访问对象</li>
<li> cc-&gt;int3 (interrupt 中断): 起到断点的作用</li>
</ul>
<h2 id="内存空间的布局"><a href="#内存空间的布局" class="headerlink" title="内存空间的布局"></a>内存空间的布局</h2><p><img data-src="/images/c++/%E7%A9%BA%E9%97%B4.png"></p>
<ul>
<li>栈空间 / 堆空间 / 代码区 / 全局区</li>
<li>堆空间：为了自由控制内存的生命周期，大小，会经常使用堆空间内存 <figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"># 堆空间申请和释放 malloc\free</span><br><span class="line">  <span class="keyword">int</span> *p = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="number">4</span>);</span><br><span class="line">  *p = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">free</span>(p); </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">char</span> *p = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">4</span>);</span><br><span class="line">  *p = <span class="number">10</span>;</span><br><span class="line">  *(p+<span class="number">1</span>) = <span class="number">11</span>;</span><br><span class="line">  等价于</span><br><span class="line">  p[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">  p[<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">new</span> (向堆空间申请内存)</span><br><span class="line">  <span class="built_in"><span class="keyword">delete</span></span> (释放)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">  <span class="keyword">delete</span> p;</span><br><span class="line">  </span><br><span class="line">  []申请的需要配合使用</span><br><span class="line">  <span class="keyword">new</span>[]</span><br><span class="line">  <span class="keyword">delete</span>[]</span><br><span class="line"># 初始化 - memory <span class="built_in">set</span>(快速内存清零)</span><br><span class="line">    <span class="keyword">int</span> *p <span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)*<span class="number">10</span>)</span><br><span class="line">    <span class="built_in">memset</span>(p,<span class="number">1</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)*<span class="number">10</span>)# 从p地址开始,初始化<span class="number">40</span>个字节,每一个字节(<span class="number">8</span>位)全部都是<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> *p0 = <span class="keyword">new</span> <span class="keyword">int</span>; # 没有初始化</span><br><span class="line">    <span class="keyword">int</span> *p1 = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(); # 初始化为<span class="number">0</span></span><br><span class="line">    <span class="keyword">int</span> *p2 = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">5</span>); # 初始化为<span class="number">5</span></span><br><span class="line"># 布局</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span>{</span></span><br><span class="line">    <span class="keyword">int</span> m_age;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    Person person; # 栈空间</span><br><span class="line">    <span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="built_in">Person</span>(); # *p 在栈 / Person person在堆空间</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2></li>
<li> malloc 分配的对象不会调用构造函数</li>
<li>自定义了构造函数，实例就必须要通过自定义构造函数<br><img data-src="/images/c++/%E6%9E%84%E9%80%A0.png"><br><img data-src="/images/c++/%E6%9E%84%E9%80%A01.png"><br><img data-src="/images/c++/%E6%9E%84%E9%80%A02.png"><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">Person <span class="title">person</span>(<span class="params"></span>)</span>; 这是函数声明</span><br><span class="line"><span class="meta"># 无构造函数</span></span><br><span class="line">    <span class="meta"># 栈空间: 没有初始化成员变量</span></span><br><span class="line">    <span class="meta"># 全局区: 会初始化 0</span></span><br><span class="line">    <span class="meta"># Person *p0 = new Person # 没有初始化</span></span><br><span class="line">    <span class="meta"># Person *p0 = new Person() # 初始化0</span></span><br><span class="line"><span class="meta"># 自定义构造函数</span></span><br><span class="line">    <span class="meta"># 全局区: 会初始化0,其他均不会初始化,堆空间需要开发人员自己去初始化,栈空间更不会初始化了</span></span><br><span class="line"><span class="meta"># 初始化对象-构造函数</span></span><br><span class="line">Person(){</span><br><span class="line">    memset(<span class="keyword">this</span>,<span class="number">0</span>,<span class="keyword">sizeof</span>(Person))</span><br><span class="line">}    </span><br></pre></td></tr></tbody></table></figure>
<h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><img data-src="/images/c++/%E6%9E%90%E6%9E%84.png"><br><img data-src="/images/c++/%E6%9E%90%E6%9E%842.png"><br><img data-src="/images/c++/%E6%9E%90%E6%9E%843.png"><figure class="highlight vala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"># 对象内部生成的堆空间由对象自己delete回收</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 一个Person对象销毁的象征</span></span><br><span class="line">~People(){</span><br><span class="line">    cout&lt;&lt;<span class="string">"回收"</span>&lt;&lt;endl;</span><br><span class="line">}</span><br><span class="line"><span class="meta"># 用来做一些内存清理-清理内部生成的堆空间</span></span><br><span class="line"><span class="meta">## 对象包含了另一个对象的指针,并初始化了,需要做一些清理工作</span></span><br><span class="line">~People(){</span><br><span class="line">   delete people.m_car;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="声明和实现分离"><a href="#声明和实现分离" class="headerlink" title="声明和实现分离"></a>声明和实现分离</h2><img data-src="/images/c++/%E5%88%86%E7%A6%BB.png"><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><img data-src="/images/c++/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.png"><br><img data-src="/images/c++/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B41.png"><br><img data-src="/images/c++/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B42.png"><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><img data-src="/images/c++/%E7%BB%A7%E6%89%BF1.png"><br><img data-src="/images/c++/%E7%BB%A7%E6%89%BF2.png"><h2 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h2><img data-src="/images/c++/%E5%88%9D%E5%A7%8B%E5%8C%96.png"><figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"># 只对构造函数有效,且定义的顺序与类的成员变量顺序有关</span><br><span class="line"><span class="constructor">Person(<span class="params">int</span> <span class="params">age</span>,<span class="params">int</span> <span class="params">height</span>)</span>:m<span class="constructor">_age(<span class="params">age</span>)</span>,m<span class="constructor">_height(<span class="params">height</span>)</span>{}</span><br><span class="line">等价于</span><br><span class="line"><span class="constructor">Person(<span class="params">int</span> <span class="params">age</span>,<span class="params">int</span> <span class="params">height</span>)</span>{</span><br><span class="line">    m_age = age;</span><br><span class="line">    m_height = height;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="构造函数互相调用"><a href="#构造函数互相调用" class="headerlink" title="构造函数互相调用"></a>构造函数互相调用</h2></li>
<li>构造函数调用构造函数必须放在初始化列表里面</li>
<li> this 指向的都是同一个对象<br><img data-src="/images/c++/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.png"><h2 id="父类的构造函数"><a href="#父类的构造函数" class="headerlink" title="父类的构造函数"></a>父类的构造函数</h2><img data-src="/images/c++/%E5%87%BD%E6%95%B02.png"><figure class="highlight vala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"># 子类的构造函数之前会调用父类的无参的无参构造函数[先有父亲再有孩子]</span></span><br><span class="line"><span class="meta"># 如果子类构造函数显式调用了父亲的构造函数就不会调用无参的构造函数了</span></span><br><span class="line"><span class="meta"># 如果父类没有无参构造函数,子类必须自己手动调用有参构造函数</span></span><br><span class="line"><span class="meta"># 父亲没有构造函数,就没有调用</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 析构函数</span></span><br><span class="line">    * 析构函数是先子类释放,在调用父类</span><br></pre></td></tr></tbody></table></figure>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2></li>
<li>通过虚函数 virtual 实现，父类是虚函数，子类默认是虚函数<br><img data-src="/images/c++/%E5%A4%9A%E6%80%811.png"><br><img data-src="/images/c++/%E5%A4%9A%E6%80%812.png"><br><img data-src="/images/c++/%E5%A4%9A%E6%80%813.png"> <h3 id="虚表"><a href="#虚表" class="headerlink" title="虚表"></a>虚表</h3><img data-src="/images/c++/%E8%99%9A%E8%A1%A8.png"><br><img data-src="/images/c++/%E8%99%9A%E8%A1%A81.png"><br><img data-src="/images/c++/%E8%99%9A%E8%A1%A82.png"><figure class="highlight vala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"># 增加virtual, 会在对象增加4个虚表的地址头,通过虚表去调用子类的函数</span></span><br><span class="line"><span class="meta"># 虚表里面放着是虚函数的地址</span></span><br><span class="line"><span class="meta"># 所有的cat对象都共用一个虚表</span></span><br><span class="line"><span class="meta"># 只要有virtual就会生成虚表</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="子类调用父类"><a href="#子类调用父类" class="headerlink" title="子类调用父类"></a>子类调用父类</h3><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"># 直接把父类的名称拿过来用:Animal::<span class="built_in">speak</span>();</span><br></pre></td></tr></tbody></table></figure>
<h2 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h2><img data-src="/images/c++/%E8%99%9A%E6%9E%90%E6%9E%84.png"><figure class="highlight vala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"># 如果有父类指针指向子类对象,析构函数也应该是virtual虚函数类型</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="纯虚函数-抽象类"><a href="#纯虚函数-抽象类" class="headerlink" title="纯虚函数/抽象类"></a>纯虚函数 / 抽象类</h2><img data-src="/images/c++/%E6%8A%BD%E8%B1%A1%E7%B1%BB.png"></li>
<li>虚函数：函数不需要实现，只定义函数名称 [类似抽象类],virtual void speak () = 0;</li>
<li> 含有纯虚函数的类是抽象类，不允许被 new<h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><img data-src="/images/c++/%E5%A4%9A%E7%BB%A7%E6%89%BF.png"><h3 id="多继承的构造函数"><a href="#多继承的构造函数" class="headerlink" title="多继承的构造函数"></a>多继承的构造函数</h3></li>
<li>使用访问列表去初始化构造函数<h3 id="多继承的虚函数"><a href="#多继承的虚函数" class="headerlink" title="多继承的虚函数"></a>多继承的虚函数</h3></li>
<li>会生成对应的多张虚表，两个父类会生成 8 个字节的虚函树地址<br><img data-src="/images/c++/%E5%A4%9A%E7%BB%A7%E6%89%BF%E8%99%9A%E8%A1%A8.png"><h3 id="同名函数"><a href="#同名函数" class="headerlink" title="同名函数"></a>同名函数</h3><img data-src="/images/c++/%E5%90%8C%E5%90%8D%E5%87%BD%E6%95%B0.png"><h3 id="同名成员变量"><a href="#同名成员变量" class="headerlink" title="同名成员变量"></a>同名成员变量</h3><img data-src="/images/c++/%E5%90%8C%E5%90%8D%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F.png"><h3 id="菱形继承"><a href="#菱形继承" class="headerlink" title="菱形继承"></a>菱形继承</h3><img data-src="/images/c++/%E8%8F%B1%E5%BD%A2%E7%BB%A7%E6%89%BF.png"><h3 id="虚继承-解决菱形继承问题"><a href="#虚继承-解决菱形继承问题" class="headerlink" title="虚继承-解决菱形继承问题"></a>虚继承 - 解决菱形继承问题</h3></li>
<li>解决基类中成员变量重复的问题</li>
<li>会生成虚地址的指针，占用 4 字节<br><img data-src="/images/c++/%E8%99%9A%E7%BB%A7%E6%89%BF.png"><br><img data-src="/images/c++/%E8%99%9A%E7%BB%A7%E6%89%BF1.png"><br><img data-src="/images/c++/%E8%99%9A%E7%BB%A7%E6%89%BF2.png"><h3 id="应用价值"><a href="#应用价值" class="headerlink" title="应用价值"></a>应用价值</h3><img data-src="/images/c++/%E5%A4%9A%E7%BB%A7%E6%89%BF%E4%BB%B7%E5%80%BC.png"><h2 id="静态成员-static"><a href="#静态成员-static" class="headerlink" title="静态成员(static)"></a>静态成员 (static)</h2></li>
<li>ds 是数据段 data segment (全局区)<br><img data-src="/images/c++/%E9%9D%99%E6%80%81%E6%88%90%E5%91%98.png"><br><img data-src="/images/c++/%E9%9D%99%E6%80%81%E6%88%90%E5%91%981.png"><h2 id="const成员"><a href="#const成员" class="headerlink" title="const成员"></a>const 成员</h2><img data-src="/images/c++/const%E6%88%90%E5%91%98.png"><h2 id="引用类型成员"><a href="#引用类型成员" class="headerlink" title="引用类型成员"></a>引用类型成员</h2><img data-src="/images/c++/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E6%88%90%E5%91%98.png"><h2 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h2></li>
<li>需要深拷贝的时候需要实现一下拷贝构造函数<br><img data-src="/images/c++/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.png"><br><img data-src="/images/c++/%E8%B0%83%E7%94%A8%E7%88%B6%E7%B1%BB%E7%9A%84%E6%8B%B7%E8%B4%9D.png"><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 拷贝构造函数</span></span><br><span class="line"><span class="attribute">Car</span>(const Car &amp;car){}</span><br><span class="line"><span class="comment">#使用</span></span><br><span class="line"><span class="attribute">Car</span> car<span class="number">3</span>;</span><br><span class="line"><span class="attribute">Car</span> car<span class="number">4</span>(car<span class="number">3</span>);</span><br></pre></td></tr></tbody></table></figure>
<h2 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h2><img data-src="/images/c++/%E6%B7%B1%E6%8B%B7%E8%B4%9D.png"></li>
<li> 1. 指向统一空间，修改数值都修改</li>
<li> 2. 释放还会造成 dubble free<br><img data-src="/images/c++/%E6%B7%B1%E6%8B%B7%E8%B4%9D2.png"><br><img data-src="/images/c++/%E6%B7%B1%E6%8B%B7%E8%B4%9D3.png"><br><img data-src="/images/c++/%E6%B7%B1%E6%8B%B7%E8%B4%9D4.png"></li>
</ul>
<h2 id="对象作为返回值或者入参-会造成不必要的临时对象-进行拷贝"><a href="#对象作为返回值或者入参-会造成不必要的临时对象-进行拷贝" class="headerlink" title="对象作为返回值或者入参 会造成不必要的临时对象,进行拷贝"></a>对象作为返回值或者入参 会造成不必要的临时对象，进行拷贝</h2><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="function"><span class="title">test</span>(<span class="params">Car car</span>)</span>{}</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>Car <span class="function"><span class="title">th</span>(<span class="params"></span>)</span>{</span><br><span class="line">    Car car;</span><br><span class="line">    <span class="keyword">return</span> car;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="匿名对象-临时对象-Car"><a href="#匿名对象-临时对象-Car" class="headerlink" title="匿名对象(临时对象) Car();"></a>匿名对象 (临时对象) Car ();</h2><ul>
<li>匿名对象作为返回值或者入参，编译器会优化不再进行拷贝构造<br><img data-src="/images/c++/%E5%8C%BF%E5%90%8D%E5%AF%B9%E8%B1%A1.png"><h2 id="隐式构造-转换构造"><a href="#隐式构造-转换构造" class="headerlink" title="隐式构造(转换构造)"></a>隐式构造 (转换构造)</h2></li>
<li> 可以通过 explicit 禁止隐式构造<br><img data-src="/images/c++/%E9%9A%90%E5%BC%8F%E6%9E%84%E9%80%A0.png"><br><img data-src="/images/c++/%E9%9A%90%E5%BC%8F%E6%9E%84%E9%80%A02.png"><figure class="highlight armasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="symbol">Person</span> <span class="built_in">p1</span> = <span class="number">20</span><span class="comment">;</span></span><br><span class="line">等价于</span><br><span class="line"><span class="symbol">Person</span> <span class="built_in">p2</span>(<span class="number">20</span>)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="编译器生成构造函数-有事干就会生成"><a href="#编译器生成构造函数-有事干就会生成" class="headerlink" title="编译器生成构造函数 - 有事干就会生成"></a>编译器生成构造函数 - 有事干就会生成</h2><img data-src="/images/c++/%E7%BC%96%E8%AF%91%E5%99%A8.png"><h2 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h2></li>
<li> get 方法很频繁，想直接访问底油成员变量，使用友元函数 friend</li>
<li> 友元函数和友元类<br><img data-src="/images/c++/%E5%8F%8B%E5%85%83.png"><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2></li>
<li>类 A 定义在类 C 里面，类 A 就是内部类，也叫嵌套类</li>
<li>可以设置权限，public,private,protected<br><img data-src="/images/c++/%E5%86%85%E9%83%A8%E7%B1%BB.png"><h2 id="局部类"><a href="#局部类" class="headerlink" title="局部类"></a>局部类</h2></li>
<li>在一个函数内部定义的类</li>
<li>使用范围就是在函数内部<br><img data-src="/images/c++/%E5%B1%80%E9%83%A8%E7%B1%BB.png"><h1 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h1></li>
<li> operator+/operator- .. 等等</li>
<li>左边的 const 是保证 Point 不被修改，const 函数是保证 p1+p2+p3 可通过</li>
<li> ++a 是先对 a 进行 ++ 再返回 a  a++ 是将 a 赋值，最后再进行 ++</li>
<li>cout 构造函数私有，外面就不能去赋值</li>
<li>单利模式需要私有化运算符重载，拷贝构造</li>
<li>仿函数 Sum sum; sum (1,2);<figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = ++a +<span class="number">5</span>;</span><br><span class="line"><span class="comment">-- int b = a+1+5;</span></span><br><span class="line"><span class="type">int</span> b = a++ + <span class="number">5</span>;</span><br><span class="line"><span class="comment">-- int b = 10 +5; a+=1;</span></span><br></pre></td></tr></tbody></table></figure>
<img data-src="/images/c++/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD.png"><br><img data-src="/images/c++/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD1.png"><br><img data-src="/images/c++/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD2.png"><br><img data-src="/images/c++/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD3.png"><br><img data-src="/images/c++/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD4.png"><br><img data-src="/images/c++/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD5.png"><br><img data-src="/images/c++/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD6.png"><br><img data-src="/images/c++/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD7.png"><br><img data-src="/images/c++/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD8.png"><br><img data-src="/images/c++/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD9,.png"><h1 id="模板-template-泛型"><a href="#模板-template-泛型" class="headerlink" title="模板(template)-泛型"></a>模板 (template)- 泛型</h1><img data-src="/images/c++/%E6%A8%A1%E6%9D%BF1.png"></li>
<li>本质：是编译器生成多个不同类型的同名函数 <figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">template &lt;typename T&gt; T add(T <span class="selector-tag">a</span>, T <span class="selector-tag">b</span>){</span><br><span class="line">    return <span class="selector-tag">a</span>+<span class="selector-tag">b</span>;</span><br><span class="line">}</span><br><span class="line">template &lt;typename T,typename <span class="selector-tag">A</span>&gt; T add(T <span class="selector-tag">a</span>, <span class="selector-tag">A</span> <span class="selector-tag">b</span>){</span><br><span class="line">    return <span class="selector-tag">a</span>+<span class="selector-tag">b</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line">#隐式转换</span><br><span class="line"><span class="keyword">double</span> a = <span class="number">10</span>;</span><br><span class="line">#强制转换</span><br><span class="line"><span class="number">1.</span><span class="keyword">const_cast</span> - 将<span class="keyword">const</span>转成非<span class="keyword">const</span>  </span><br><span class="line">    <span class="keyword">const_cast</span>&lt;Person *&gt;(p1); </span><br><span class="line">    和(Person *) Person p1无区别</span><br><span class="line"><span class="number">2.</span><span class="keyword">dynamic_cast</span> - 多态集成转换函数</span><br><span class="line">    和(..)转换区别: 运行过程中会进行安全过滤,不安全的赋值会被清空</span><br><span class="line"><span class="number">3.</span><span class="keyword">static_cast</span></span><br><span class="line">    和<span class="keyword">dynamic_cast</span>相比,没有运行时安全检查</span><br><span class="line">    不支持交叉转换,不同类之间的转换</span><br><span class="line">    常用于基本数据类型转换,非<span class="keyword">const</span>转成<span class="keyword">const</span></span><br><span class="line"><span class="number">4.</span><span class="keyword">reinterpret_cast</span></span><br><span class="line">    - <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">double</span> d = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">double</span>&amp;&gt;(a)</span><br><span class="line">    - 直接将右边的二进制数据拷贝到左边</span><br><span class="line">    - <span class="keyword">int</span> *p = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">int</span> *&gt;(<span class="number">0x100</span>);</span><br></pre></td></tr></tbody></table></figure>
<h1 id="C-11新特性"><a href="#C-11新特性" class="headerlink" title="C++11新特性"></a>C++11 新特性</h1><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> 自动判断类型</span><br><span class="line"><span class="keyword">decltype</span> 判断类型</span><br><span class="line"><span class="literal">nullptr</span>  空指针</span><br></pre></td></tr></tbody></table></figure>
<img data-src="/images/c++/%E6%96%B0%E7%89%B9%E6%80%A7.png"><h1 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h1><img data-src="/images/c++/lambda.png"><br><img data-src="/images/c++/lambda1.png"><br><img data-src="/images/c++/%E5%8F%98%E9%87%8F%E6%8D%95%E8%8E%B7.png"><br><img data-src="/images/c++/%E6%8D%95%E8%8E%B7.png"><figure class="highlight nim"><table><tbody><tr><td class="code"><pre><span class="line">[]{}就是lambda的标志</span><br><span class="line"><span class="comment"># 示例1</span></span><br><span class="line"><span class="built_in">auto</span> p = [](<span class="built_in">int</span> a,<span class="built_in">int</span> b) -&gt; <span class="built_in">int</span> {</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># mutable - 值捕获也可以修改a的值,但是只在表达式里面有效</span></span><br><span class="line"><span class="built_in">auto</span> <span class="keyword">func</span> = [a]() mutable{</span><br><span class="line">    a++;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl; <span class="comment"># 11</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">func</span>();</span><br><span class="line">cout &lt;&lt; a&lt;&lt; endl; <span class="comment"># 10</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><figure class="highlight vala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"># 所有异常</span></span><br><span class="line"><span class="keyword">try</span>{}<span class="keyword">catch</span>(...){}</span><br><span class="line"><span class="meta"># C++ 没有finally</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h1><img data-src="/images/c++/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%881.png"><br><img data-src="/images/c++/shared_ptr.png"><br><img data-src="/images/c++/%E5%BC%B1%E5%BC%95%E7%94%A8.png"><br><img data-src="/images/c++/%E5%94%AF%E4%B8%80ptr.png"><figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line"># 传统指针</span><br><span class="line">    <span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>();</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    *p = <span class="literal">nullptr</span></span><br><span class="line">    容易忘记释放内存    </span><br><span class="line"># 智能指针</span><br><span class="line">    <span class="built_in">auto_ptr</span>(有缺陷,不能用于数组,因为析构函数 是<span class="keyword">delete</span>不是<span class="keyword">delete</span>[])</span><br><span class="line">        auto_ptr&lt;Person&gt; <span class="built_in">p</span>(<span class="keyword">new</span> <span class="built_in">Person</span>());</span><br><span class="line">        可以理解:智能指针p指向了堆空间的Person对象</span><br><span class="line">        重载了-&gt;的对象</span><br><span class="line">    shared_ptr</span><br><span class="line">        多个智能指针指向同一个对象</span><br><span class="line">        引用计数,当count为<span class="number">0</span> 就全部销毁</span><br><span class="line">        有可能会出现<span class="keyword">double</span> free 和循环引用,使用弱引用去解决weak_ptr</span><br><span class="line">    unique_ptr</span><br><span class="line">        不能同时指向一个对象,需要转移可以std::move      </span><br></pre></td></tr></tbody></table></figure>
<h1 id="MFC"><a href="#MFC" class="headerlink" title="MFC"></a>MFC</h1></li>
<li> 破解软件 OllyDBG 软件<h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><figure class="highlight axapta"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> CPVZCheaterDlg::OnBtnClickCourse() {</span><br><span class="line">	<span class="comment">//TRACE("AGE IS %d\n", 20);</span></span><br><span class="line">	<span class="built_in">int</span> a = <span class="number">20</span>;</span><br><span class="line">	CString <span class="built_in">str</span>;</span><br><span class="line">	<span class="built_in">str</span>.Format(CString(<span class="string">"AGE IS %d"</span>), a);</span><br><span class="line">	<span class="comment">//AfxMessageBox(str);</span></span><br><span class="line">	MessageBox(<span class="built_in">str</span>, CString(<span class="string">"AGE IS"</span>),MB_YESNOCANCEL|MB_HELP);</span><br><span class="line">}</span><br><span class="line"><span class="meta">#利用宏定义格式</span></span><br><span class="line"><span class="meta">#define log(fmt,...)\</span></span><br><span class="line">CString <span class="built_in">str</span>;\</span><br><span class="line"><span class="built_in">str</span>.Format(CString(fmt), __VA_ARGS__);\</span><br><span class="line">AfxMessageBox(<span class="built_in">str</span>);</span><br></pre></td></tr></tbody></table></figure>
<h2 id="访问网址"><a href="#访问网址" class="headerlink" title="访问网址"></a>访问网址</h2><figure class="highlight asciidoc"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//全局函数</span></span><br><span class="line"><span class="meta">::ShellExecute(NULL, CString("open"), CString("http://www.baidu.com"),</span> NULL, NULL, SW_NORMAL);</span><br></pre></td></tr></tbody></table></figure>
<h2 id="判断box-checked"><a href="#判断box-checked" class="headerlink" title="判断box-checked"></a>判断 box-checked</h2><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>判断方法</span><br><span class="line"><span class="regexp">//</span>bool checked = IsDlgButtonChecked(IDC_KILL);</span><br><span class="line"><span class="regexp">//</span>通过指针变量</span><br><span class="line"><span class="regexp">//</span>CButton *button = (CButton*)GetDlgItem(IDC_KILL);</span><br><span class="line"><span class="regexp">//</span>bool checked = button-&gt;GetCheck;</span><br><span class="line"><span class="regexp">//</span>绑定成员变量</span><br><span class="line"><span class="regexp">//</span>  DoDataExchange - 绑定成员变量  BEGIN_MESSAGE_MAP - 绑定点击事件</span><br><span class="line"><span class="regexp">//</span>	DDX_Control(pDX, IDC_KILL, m_bnKill);</span><br><span class="line"><span class="regexp">//</span>判断</span><br><span class="line">bool checked = m_bnKill.GetCheck;</span><br><span class="line"><span class="keyword">if</span> (checked) {</span><br><span class="line">    log(<span class="string">"checked"</span>);</span><br><span class="line">}<span class="keyword">else</span> {</span><br><span class="line">    log(<span class="string">"no"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Jina 安装</title>
    <url>/2021/05/25/4.4-Jina%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/4.jpg"></p>
</span>

<span id="more"></span>

<h1 id="Jina"><a href="#Jina" class="headerlink" title="Jina"></a>Jina</h1><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">export PYTHONHOME=<span class="regexp">/usr/</span>local<span class="regexp">/python3/</span></span><br><span class="line">export PYTHONPATH=<span class="regexp">/usr/</span>local<span class="regexp">/python3/</span>bin/</span><br><span class="line">export PATH=<span class="variable">$PYTHONPATH</span>:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">export LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:<span class="regexp">/usr/</span>local<span class="regexp">/openssl/</span>lib</span><br><span class="line"></span><br><span class="line">yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br><span class="line">yum install -y libffi-devel zlib1g-dev</span><br><span class="line">yum install zlib* -y</span><br><span class="line">yum -y install perl</span><br><span class="line">yum -y install gcc*</span><br><span class="line"></span><br><span class="line">wget http:<span class="regexp">//</span>www.openssl.org<span class="regexp">/source/</span>openssl-<span class="number">1.1</span>.<span class="number">1</span>.tar.gz</span><br><span class="line"></span><br><span class="line">.<span class="regexp">/config --prefix=/u</span>sr<span class="regexp">/local/</span>openssl shared zlib</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install  </span><br><span class="line"></span><br><span class="line">wget https:<span class="regexp">//</span>www.python.org<span class="regexp">/ftp/</span>python<span class="regexp">/3.10.0/</span>Python-<span class="number">3.10</span>.<span class="number">0</span>.tgz</span><br><span class="line"></span><br><span class="line">.<span class="regexp">/configure --prefix=/u</span>sr<span class="regexp">/local/</span>python3  --enable-optimizations --with-openssl=<span class="regexp">/usr/</span>local<span class="regexp">//</span>openssl</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">rm -rf  <span class="regexp">/usr/</span>bin/python</span><br><span class="line"></span><br><span class="line">rm -rf  <span class="regexp">/usr/</span>bin/pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修复yum</span></span><br><span class="line"></span><br><span class="line">vim <span class="regexp">/usr/</span>bin/yum</span><br><span class="line"><span class="comment">#!/usr/bin/python ==&gt; #!/usr/bin/python2.7</span></span><br><span class="line"></span><br><span class="line">vim <span class="regexp">/usr/</span>libexec/urlgrabber-ext-down</span><br><span class="line"><span class="comment">#!/usr/bin/python ==&gt; #!/usr/bin/python2.7</span></span><br><span class="line"></span><br><span class="line">ln -s <span class="regexp">/usr/</span>local<span class="regexp">/python3/</span>bin<span class="regexp">/python3.10 /u</span>sr<span class="regexp">/bin/</span>python</span><br><span class="line"></span><br><span class="line">ln -s <span class="regexp">/usr/</span>local<span class="regexp">/python3/</span>bin<span class="regexp">/pip3.10  /u</span>sr<span class="regexp">/bin/</span>pip</span><br><span class="line"></span><br><span class="line">python</span><br><span class="line">import ssl</span><br><span class="line">import _ssl</span><br><span class="line"></span><br><span class="line">python -m venv tutorial-env</span><br><span class="line"></span><br><span class="line">source tutorial-env<span class="regexp">/bin/</span>activate</span><br><span class="line"></span><br><span class="line">python -m pip install --upgrade pip -i http:<span class="regexp">//</span>pypi.douban.com/simple --trusted-host pypi.douban.com</span><br><span class="line"></span><br><span class="line">pip install wheel  -i http:<span class="regexp">//</span>pypi.douban.com/simple --trusted-host pypi.douban.com</span><br><span class="line"></span><br><span class="line">pip install jina  -i http:<span class="regexp">//</span>pypi.douban.com/simple --trusted-host pypi.douban.com</span><br><span class="line"></span><br><span class="line">jina new hello-jina</span><br><span class="line"></span><br><span class="line">cd hello-jina/</span><br><span class="line"></span><br><span class="line">jina flow --uses flow.yml</span><br><span class="line"></span><br><span class="line">CentOS使用yum指令显示<span class="string">"ImportError:Nomodulenamedsite"</span>错误</span><br><span class="line">unset PYTHONPATH</span><br><span class="line">unset PYTHONHOME</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Jina</category>
      </categories>
      <tags>
        <tag>Jina</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA 架构师</title>
    <url>/2021/05/25/4.3-JAVA%E6%9E%B6%E6%9E%84%E5%B8%88/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/4.jpg"></p>
</span>

<span id="more"></span>
<h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line">Java的数据类型主要分为 <span class="number">2</span> 大类</span><br><span class="line">    基本类型（Primitive Type）</span><br><span class="line">        ✓ <span class="keyword">byte</span>：<span class="number">8</span>-bit 的整数，取值范围是 [–<span class="number">128</span>, <span class="number">127</span>]</span><br><span class="line">        ✓ <span class="keyword">short</span>：<span class="number">16</span>-bit 的整数，取值范围是 [–<span class="number">32768</span>, <span class="number">32767</span>]</span><br><span class="line">        ✓ <span class="keyword">int</span>：<span class="number">32</span>-bit 的整数，取值范围是 [–<span class="number">231</span>, <span class="number">231</span> – <span class="number">1</span>]</span><br><span class="line">        ✓ <span class="keyword">long</span>：<span class="number">64</span>-bit 的整数，取值范围是 [–<span class="number">263</span>, <span class="number">263</span> – <span class="number">1</span>]</span><br><span class="line">        ✓ <span class="keyword">float</span>：单精度 <span class="number">32</span>-bit IEEE <span class="number">754</span> 浮点数，取值范围是 [<span class="number">1.40</span>E–<span class="number">45F</span>, <span class="number">3.4028235E38</span>F]</span><br><span class="line">        ✓ <span class="keyword">double</span>：双精度 <span class="number">64</span>-bit IEEE <span class="number">754</span> 浮点数，取值范围是 [<span class="number">4.9E-324</span>, <span class="number">1.7976931348623157E308</span>]</span><br><span class="line">        ✓ <span class="keyword">boolean</span>：布尔类型，有 <span class="literal">true</span>、<span class="literal">false</span> 两个取值</span><br><span class="line">        ✓ <span class="keyword">char</span>：单个 <span class="number">16</span>-bit 的 Unicode 字符</span><br><span class="line">    引用类型（Reference Type）</span><br><span class="line">        ✓ 引用类型的值是对对象的引用</span><br></pre></td></tr></tbody></table></figure>
<h1 id="字面量（Literal）"><a href="#字面量（Literal）" class="headerlink" title="字面量（Literal）"></a>字面量（Literal）</h1><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 整数</span></span><br><span class="line">    <span class="attribute">byte</span> v<span class="number">1</span> = <span class="number">123</span>; 十进制</span><br><span class="line">    <span class="attribute">short</span> v<span class="number">2</span> = ob<span class="number">11001</span>; 二进制</span><br><span class="line">    <span class="attribute">int</span> v<span class="number">3</span> = <span class="number">0</span>xF<span class="number">78</span>A; 十六进制</span><br><span class="line">    <span class="attribute">long</span> v<span class="number">4</span> = <span class="number">199</span>L;</span><br><span class="line"><span class="comment"># 浮点数</span></span><br><span class="line">    <span class="attribute">float</span> v<span class="number">1</span> = <span class="number">123</span>.<span class="number">4</span>F;</span><br><span class="line">    <span class="attribute">double</span> v<span class="number">2</span> = <span class="number">123</span>.<span class="number">4</span>D;</span><br><span class="line">    <span class="attribute">double</span> v<span class="number">3</span> = <span class="number">123</span>.<span class="number">4</span>;</span><br><span class="line">    <span class="attribute">float</span> v<span class="number">4</span> = <span class="number">1</span>.<span class="number">234</span>E<span class="number">2</span>F;</span><br><span class="line">    <span class="attribute">double</span> v<span class="number">5</span> = <span class="number">1</span>.<span class="number">234</span>e<span class="number">2</span>; 科学计数法e</span><br><span class="line"><span class="comment"># 字符和字符串</span></span><br><span class="line">    <span class="attribute">char</span> v<span class="number">1</span> = 'A' 单引号表示字符</span><br><span class="line">    <span class="attribute">String</span> v<span class="number">2</span> = <span class="string">"A"</span> 双引号是字符串</span><br><span class="line"><span class="comment"># true/false/null</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="转义序列"><a href="#转义序列" class="headerlink" title="转义序列"></a>转义序列</h1><figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">◼ <span class="symbol">\b</span>（退格，<span class="symbol">\u</span>0008）</span><br><span class="line">◼ <span class="symbol">\t</span>（制表符，<span class="symbol">\u</span>0009） </span><br><span class="line">◼ <span class="symbol">\n</span>（换行，<span class="symbol">\u</span>000a）</span><br><span class="line">◼ <span class="symbol">\f</span>（换页，<span class="symbol">\u</span>000c）</span><br><span class="line">◼ <span class="symbol">\r</span>（回车，<span class="symbol">\u</span>000d）</span><br><span class="line">◼ <span class="symbol">\"</span>（双引号，<span class="symbol">\u</span>0022）</span><br><span class="line">◼ <span class="symbol">\'</span>（单引号，<span class="symbol">\u</span>0027） </span><br><span class="line">◼ <span class="symbol">\\</span>（反斜杠，<span class="symbol">\u</span>005c）</span><br></pre></td></tr></tbody></table></figure>
<h1 id="在数字中使用下划线"><a href="#在数字中使用下划线" class="headerlink" title="在数字中使用下划线"></a>在数字中使用下划线</h1><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">int</span> v<span class="number">1</span> = <span class="number">1</span>_<span class="number">0000</span>_<span class="number">0000</span></span><br><span class="line"><span class="attribute">int</span> v<span class="number">2</span> = <span class="number">0</span>xFF_EC_DE_<span class="number">5</span>E</span><br><span class="line"><span class="attribute">int</span> V<span class="number">3</span> = ob<span class="number">11010010</span>_<span class="number">11010010</span>_<span class="number">11010010</span>_<span class="number">11010010</span></span><br><span class="line"><span class="attribute">double</span> v<span class="number">4</span> = <span class="number">1</span>.<span class="number">23</span>_<span class="number">45</span>_<span class="number">67</span></span><br><span class="line"><span class="attribute">long</span> v<span class="number">5</span> = <span class="number">1</span>___<span class="number">0000</span>_<span class="number">0000</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h1><figure class="highlight aspectj"><table><tbody><tr><td class="code"><pre><span class="line">◼ 任何变量在使用之前都必须要先初始化（赋值） </span><br><span class="line">局部变量：需要程序员手动初始化 </span><br><span class="line">非局部变量（实例变量、类变量）：编译器会自动给未初始化的变量设置一个初始值</span><br><span class="line">类型 默认初始值 </span><br><span class="line"><span class="keyword">byte</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">short</span> <span class="number">0</span> </span><br><span class="line"><span class="keyword">int</span> <span class="number">0</span> </span><br><span class="line"><span class="keyword">long</span> <span class="number">0</span>L</span><br><span class="line"><span class="keyword">float</span> <span class="number">0.0</span>F </span><br><span class="line"><span class="keyword">double</span> <span class="number">0.0</span>D</span><br><span class="line"><span class="keyword">char</span> <span class="string">'\u0000'</span> </span><br><span class="line"><span class="keyword">boolean</span> <span class="keyword">false</span></span><br><span class="line">对象（引用） <span class="keyword">null</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="运算符（Operator）"><a href="#运算符（Operator）" class="headerlink" title="运算符（Operator）"></a>运算符（Operator）</h1><figure class="highlight gauss"><table><tbody><tr><td class="code"><pre><span class="line">◼ 上面一行的优先级比下面一行高</span><br><span class="line">◼ 同一行的优先级一样</span><br><span class="line">◼ 当多个优先级一样的运算符一起使用时 按照结合性进行运算 </span><br><span class="line">✓只有赋值运算符的结合性是从右至左 ✓其他运算符的结合性都是从左至右</span><br><span class="line">◼ 为了保证运算符按照预期执行，尽量多使用小括号 比如 <span class="number">5</span> * ((a + b) / c)</span><br><span class="line">◼ 算数表达式的结果必须被使用 <span class="number">1</span>+<span class="number">1</span>是错的</span><br><span class="line"></span><br><span class="line">后缀 <span class="keyword">expr</span>++<span class="keyword">expr</span>--</span><br><span class="line">一元（单目） ++<span class="keyword">expr</span>--<span class="keyword">expr</span>+<span class="keyword">expr</span>-<span class="keyword">expr</span>~ ! 乘除模 * / %</span><br><span class="line">加减 + -</span><br><span class="line">位移 &lt;&lt; &gt;&gt; &gt;&gt;&gt;</span><br><span class="line">关系 &lt; &gt; &lt;= &gt;= instanceof </span><br><span class="line">等价 == !=</span><br><span class="line">按位与 &amp; </span><br><span class="line">按位异或 ^ 按位或 |</span><br><span class="line">逻辑与 &amp;&amp; 逻辑或 ||</span><br><span class="line">三元（三目） ? :</span><br><span class="line">赋值 = += -= *= /= %= &amp;= ^= |= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</span><br></pre></td></tr></tbody></table></figure>
<h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><figure class="highlight tap"><table><tbody><tr><td class="code"><pre><span class="line">◼ &gt;&gt; 与 &gt;&gt;&gt; </span><br><span class="line">   &gt;&gt;（有符号右移）：最左用符号位补齐 ,&gt;&gt;&gt;（无符号右移）：最左用<span class="number"> 0 </span>补齐</span><br><span class="line">  <span class="number"> 128 </span>          = 11111111111111110000000</span><br><span class="line">   -128 &gt;&gt; <span class="number"> 2 </span>   = 11111111111111111100000</span><br><span class="line">   -128 &gt;&gt;&gt;<span class="number"> 2 </span>   = 00111111111111111100000</span><br><span class="line">◼ &amp;、|、^ 也能用在 boolean 类型上 , 对比 &amp;&amp;、||，&amp;、| 少了短路功能</span><br><span class="line">    &amp; 位运算 双1为<span class="number"> 1 </span>其余全为0 </span><br><span class="line">    | 或运算 一个为1，其值为1。</span><br><span class="line">    ^ 异或运算 值相同为0 值不同为1</span><br></pre></td></tr></tbody></table></figure>
<h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line">◼ 拓宽基本类型转换（Widening Primitive Conversion） </span><br><span class="line">    数据范围小的转为数据范围大的（<span class="number">19</span>种），可以自动转换（隐式转换） </span><br><span class="line">    ✓<span class="keyword">byte</span> 转 <span class="keyword">short</span>、<span class="keyword">int</span>、<span class="keyword">long</span>、<span class="keyword">float</span>、<span class="keyword">double</span></span><br><span class="line">    ✓<span class="keyword">short</span> 转 <span class="keyword">int</span>、<span class="keyword">long</span>、<span class="keyword">float</span>、<span class="keyword">double</span></span><br><span class="line">    ✓<span class="keyword">char</span> 转 <span class="keyword">int</span>、<span class="keyword">long</span>、<span class="keyword">float</span>、<span class="keyword">double</span></span><br><span class="line">    ✓<span class="keyword">int</span> 转 <span class="keyword">long</span>、<span class="keyword">float</span>、<span class="keyword">double</span></span><br><span class="line">    ✓<span class="keyword">long</span> 转 <span class="keyword">float</span>、<span class="keyword">double</span></span><br><span class="line">    ✓<span class="keyword">float</span> 转 <span class="keyword">double</span></span><br><span class="line">◼ 窄化基本类型转换（Narrowing Primitive Conversion） </span><br><span class="line">    数据范围大的转为数据范围小的（<span class="number">22</span>种），可能会丢失精度和范围，需要强制转换 ✓<span class="keyword">short</span> 转 <span class="keyword">byte</span>、<span class="keyword">char</span></span><br><span class="line">    ✓<span class="keyword">char</span> 转 <span class="keyword">byte</span>、<span class="keyword">short</span></span><br><span class="line">    ✓<span class="keyword">int</span> 转 <span class="keyword">byte</span>、<span class="keyword">short</span>、<span class="keyword">char</span></span><br><span class="line">    ✓<span class="keyword">long</span> 转 <span class="keyword">byte</span>、<span class="keyword">short</span>、<span class="keyword">char</span>、<span class="keyword">int</span></span><br><span class="line">    ✓<span class="keyword">float</span> 转 <span class="keyword">byte</span>、<span class="keyword">short</span>、<span class="keyword">char</span>、<span class="keyword">int</span>、<span class="keyword">long</span></span><br><span class="line">    ✓<span class="keyword">double</span> 转 <span class="keyword">byte</span>、<span class="keyword">short</span>、<span class="keyword">char</span>、<span class="keyword">int</span>、<span class="keyword">long</span>、<span class="keyword">float</span></span><br><span class="line">◼ 一元数字提升：将 <span class="keyword">byte</span>、<span class="keyword">short</span>、<span class="keyword">char</span> 类型的一元数字自动提升为 <span class="keyword">int</span> 类型（拓宽基本类型转换）</span><br><span class="line">    ◼ 下面的情况会执行一元数字提升 数组的索引、创建数组时的数组长度 </span><br><span class="line">    一元运算符 +</span><br><span class="line">    一元运算符 –</span><br><span class="line">    按位取反（~） </span><br><span class="line">    位移（&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;）</span><br><span class="line">    <span class="keyword">char</span> c1 = <span class="string">'A'</span></span><br><span class="line">    System.out.<span class="keyword">println</span>(c1);<span class="comment">// A</span></span><br><span class="line">    System.out.<span class="keyword">println</span>(+c1); <span class="comment">// 65 因为自动提升int</span></span><br><span class="line">    <span class="keyword">char</span> c2 = +c1 <span class="comment">// error 需要强制转换 因为变成int了</span></span><br><span class="line">    <span class="keyword">char</span> c3 = <span class="number">65</span>  <span class="comment">// ok ,字面量</span></span><br><span class="line">◼ 二元数字提升：提升一个或者两个数字（拓宽基本类型转换） </span><br><span class="line">    如果任意一个数字是 <span class="keyword">double</span> 类型，那么另一个就会被转换为 <span class="keyword">double</span> 类型 </span><br><span class="line">    否则，如果任意一个数字是 <span class="keyword">float</span> 类型，那么另一个就会被转换为 <span class="keyword">float</span> 类型 </span><br><span class="line">    否则，如果任意一个数字是 <span class="keyword">long</span> 类型，那么另一个就会被转换为 <span class="keyword">long</span> 类型 </span><br><span class="line">    否则，两个数字都被转换为 <span class="keyword">int</span> 类型</span><br><span class="line">    ◼ 下面的情况会执行二元数字提升 乘（*）、除（/）、取余（%） 加法（+）、减法（–） </span><br><span class="line">    比较（&lt;、&lt;=、&gt;、&gt;=） </span><br><span class="line">    判等（==、!=） </span><br><span class="line">    位运算（&amp;、^、|）</span><br><span class="line">    三目（? :）</span><br><span class="line">    <span class="keyword">byte</span> v1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">byte</span> v2 = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">byte</span> v3 = v1+v2; <span class="comment">// 错 因为结果是int,需要强转</span></span><br><span class="line">    <span class="keyword">byte</span> v4 = v1+<span class="number">2</span>; <span class="comment">// 错 因为结果是int</span></span><br><span class="line">    <span class="keyword">byte</span> v5 = <span class="number">1</span>+v2; <span class="comment">// 错 因为结果是int</span></span><br><span class="line">    <span class="keyword">byte</span> v6 = <span class="number">1</span>+<span class="number">2</span>; <span class="comment">// ok 1+2 ==3 是字面量</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h1><figure class="highlight scss"><table><tbody><tr><td class="code"><pre><span class="line"># byte<span class="selector-attr">[1]</span> char<span class="selector-attr">[2]</span> short<span class="selector-attr">[2]</span> int<span class="selector-attr">[4]</span> <span class="attribute">float</span><span class="selector-attr">[4]</span> long<span class="selector-attr">[8]</span> double<span class="selector-attr">[8]</span> boolean  </span><br><span class="line"># 八大基础数据类型是值传递</span><br><span class="line"># 其他都是引用对象,所以是引用(地址)传递</span><br></pre></td></tr></tbody></table></figure>
<h1 id="java-程序的内存划分"><a href="#java-程序的内存划分" class="headerlink" title="java 程序的内存划分"></a>java 程序的内存划分</h1><figure class="highlight oxygene"><table><tbody><tr><td class="code"><pre><span class="line">PC寄存器(program Counter <span class="keyword">Register</span>):储存java虚拟机正在执行的字节码指令的地址</span><br><span class="line">虚拟机栈(stack):存储栈帧</span><br><span class="line">堆(heap): 存储GC所管理的各种对象</span><br><span class="line">方法区(<span class="function"><span class="keyword">method</span> <span class="title">area</span>):</span> 类的结构信息(方法信息,字段,构造方法的字节码)</span><br><span class="line">本地方法栈(native <span class="function"><span class="keyword">Method</span> <span class="title">Stack</span>):</span> 用来支持native方法调用(C语言方法)</span><br></pre></td></tr></tbody></table></figure>
<h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><figure class="highlight vala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"># 方法名必须和类名一样</span></span><br><span class="line"><span class="meta"># 没有返回值类型</span></span><br><span class="line"><span class="meta"># 可以重载</span></span><br><span class="line"><span class="meta"># 默认构造方法</span></span><br><span class="line">    ## 没有构造方法,编译器会自动构建一个无参的构造方法</span><br><span class="line">    ## 一旦自定义了构造方法,就不会默认生成了</span><br><span class="line"><span class="meta"># 子类的构造方法必须调用父类的构造方法,在执行后面的代码</span></span><br><span class="line"><span class="meta"># 没有显式的调用,编译器会主动调用无参的构造方法,没有,则报错   </span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">this</span>是当前对象的引用,常见用途</span><br><span class="line">    访问当前类的成员变量</span><br><span class="line">    调用当前类的方法,包括构造方法</span><br><span class="line"><span class="number">2.</span><span class="keyword">this</span>的本质是一个隐藏的,位置最靠前的方法参数 </span><br><span class="line">    方法有一个隐藏的对象<span class="keyword">this</span>,在最前面的隐藏参数</span><br><span class="line"><span class="number">3.</span>只能在构造方法中使用<span class="keyword">this</span>调用其他构造方法</span><br><span class="line"><span class="number">4.</span>构造方法调用别的构造方法必须在第一个调用  </span><br></pre></td></tr></tbody></table></figure>
<h1 id="包-package"><a href="#包-package" class="headerlink" title="包(package)"></a>包 (package)</h1><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1.</span>类似于文件夹,别的语言的命名空间</span><br><span class="line">    进行类的管理,权限控制</span><br><span class="line">    命令冲突解决</span><br><span class="line"><span class="number">2.</span>为了保证包名的唯一性,建议使用公司的域名倒写开头 com.baidu.*</span><br><span class="line"><span class="number">3.</span>全小写(不要包名和类名很像)</span><br><span class="line"><span class="number">4.</span><span class="keyword">package</span>是在第一行</span><br><span class="line"><span class="number">5.</span>域名有非法字符建议使用_来标识</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>如何使用一个类:</span><br><span class="line">   <span class="number">1.</span> 使用全名: <span class="keyword">new</span> com.baidu.model.Dog();</span><br><span class="line">   <span class="number">2.</span> 使用<span class="keyword">import</span> </span><br><span class="line">   <span class="number">3.</span> 使用<span class="keyword">import</span>导入所有类 <span class="keyword">import</span> *; </span><br><span class="line"><span class="number">7.</span>为了方便编译器会自动导入</span><br><span class="line">    <span class="keyword">import</span> java.lang.*</span><br><span class="line">    <span class="keyword">import</span> 源文件所在包.*</span><br><span class="line">    导入的只有直接在文件夹下的,不包含子文件</span><br></pre></td></tr></tbody></table></figure>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><figure class="highlight actionscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1.</span>父类的成员变量放在内存的最上面,依次排列</span><br><span class="line"><span class="number">2.</span>重写的子方法权限必须大于等于父亲的方法权限,返回值类型必须小于等于父亲方法的返回值类型</span><br><span class="line"><span class="number">3.</span><span class="keyword">super</span> - 构造方法才能调用别的构造方法</span><br><span class="line">    访问父类定义的成员变量</span><br><span class="line">    访问父亲的方法</span><br></pre></td></tr></tbody></table></figure>
<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><figure class="highlight less"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">@Override</span></span><br><span class="line"><span class="variable">@SuppressWarnings</span>({<span class="string">"unused"</span>,<span class="string">"rawtypes"</span>});</span><br></pre></td></tr></tbody></table></figure>
<h1 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h1><figure class="highlight aspectj"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> 在任何地方都可见</span><br><span class="line"><span class="keyword">protected</span> 仅在自己的包中,和子类中使用</span><br><span class="line">无修饰符(<span class="keyword">package</span>-<span class="keyword">private</span>) 仅在自己包中可见</span><br><span class="line"><span class="keyword">private</span> 仅在自己类中使用</span><br></pre></td></tr></tbody></table></figure>
<h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line">◼ 成员变量</span><br><span class="line">    被 <span class="keyword">static</span> 修饰：类变量，静态变量，静态字段 </span><br><span class="line">        ✓在程序运行过程中只占用一份固定的内存（存储在方法区） </span><br><span class="line">        ✓可以通过实例、类访问</span><br><span class="line">    没有被 <span class="keyword">static</span> 修饰：实例变量 </span><br><span class="line">        ✓在每个实例内部都有一份内存 </span><br><span class="line">        ✓只能通过实例访问，不可以通过类访问</span><br><span class="line">◼ 方法</span><br><span class="line">    被 <span class="keyword">static</span> 修饰：类方法、静态方法 </span><br><span class="line">        ✓可以通过实例、类访问 </span><br><span class="line">        ✓内部不可以使用 <span class="keyword">this</span> </span><br><span class="line">        ✓可以直接访问类变量、类方法 </span><br><span class="line">        ✓不可以直接访问实例变量、实例方法</span><br><span class="line">    没有被 <span class="keyword">static</span> 修饰：实例方法 </span><br><span class="line">        ✓只能通过实例访问，不可以通过类访问 </span><br><span class="line">        ✓内部可以使用 <span class="keyword">this</span> </span><br><span class="line">        ✓可以直接访问实例变量、实例方法</span><br><span class="line">◼ 不推荐使用实例访问类变量、类方法 </span><br><span class="line">    ✓可以直接访问类变量、类方法 </span><br><span class="line">◼ 在同一个类中</span><br><span class="line">    不能有同名的实例变量和类变量，不能有相同签名的实例方法和类方法</span><br><span class="line">◼ 静态导入</span><br><span class="line">    <span class="keyword">import</span> <span class="keyword">static</span> com.baidu.Test.*;</span><br><span class="line">    可以直接使用静态变量,方法</span><br></pre></td></tr></tbody></table></figure>
<h1 id="成员变量的初始化"><a href="#成员变量的初始化" class="headerlink" title="成员变量的初始化"></a>成员变量的初始化</h1><figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line">◼ 编译器会自动为未初始化的成员变量设置初始值</span><br><span class="line">◼ 如何手动给实例变量提供初始值？</span><br><span class="line">    在声明中 <span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">    在构造方法中</span><br><span class="line">    在初始化块中 </span><br><span class="line">        ✓编译器会将初始化块复制到每个构造方法的头部（每创建一个实例对象，就会执行一次初始化块)</span><br><span class="line">        ✓会放在构造方法的第一行,每一个构造方法都会放一个</span><br><span class="line">        {</span><br><span class="line">            age = <span class="number">10</span>;</span><br><span class="line">        }</span><br><span class="line">◼ 如何手动给类变量提供初始值？</span><br><span class="line">    在声明中  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">    在静态初始化块中</span><br><span class="line">        <span class="keyword">static</span> {</span><br><span class="line">            age = <span class="number">10</span>;</span><br><span class="line">        }</span><br><span class="line">        ✓当一个类被初始化的时候执行静态初始化块 </span><br><span class="line">        ✓当一个类第一次被主动使用时，JVM 会对类进行初始化</span><br><span class="line">◼ 可以有多个（静态）初始化块，按照在源码中出现的顺序被执行</span><br><span class="line">    \先初始化父类,在初始化子类 </span><br><span class="line">    <span class="keyword">static</span> {}  先于构造 ,父类执行,再子类,再构造</span><br><span class="line">◼ 父类的<span class="keyword">private</span>再子类中依旧存在,不影响内存布局             </span><br></pre></td></tr></tbody></table></figure>
<h1 id="final"><a href="#final" class="headerlink" title="final"></a>final</h1><figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line">◼ 被 <span class="keyword">final</span> 修饰的类：不能被子类化，不能被继承</span><br><span class="line">◼ 被 <span class="keyword">final</span> 修饰的方法：不能被重写</span><br><span class="line">◼ 被 <span class="keyword">final</span> 修饰的变量：只能进行<span class="number">1</span>次赋值</span><br><span class="line">◼ 常量（Constant）</span><br><span class="line">    ◼ 如果将基本类型或字符串定义为常量，并且在编译时就能确定值 </span><br><span class="line">         编译器会使用常量值替代各处的常量名（类似于 C 语言的宏替换） </span><br><span class="line">         称为编译时常量（ <span class="keyword">compile</span>-time constant）</span><br></pre></td></tr></tbody></table></figure>
<h1 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h1><figure class="highlight vala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"># 定义在另一个类的类,静态嵌套类/非静态嵌套类(内部类)</span></span><br><span class="line">    ◼ 在嵌套类外层的类，称为：外部类（Outer Class）</span><br><span class="line">    ◼ 最外层的外部类，称为：顶级类（Top-level Class）</span><br><span class="line"><span class="meta"># 内部类</span></span><br><span class="line">   ◼ 内部类：没有被 <span class="keyword">static</span> 修饰的嵌套类，非静态嵌套类</span><br><span class="line">   ◼ 跟实例变量、实例方法一样，内部类与外部类的实例相关联</span><br><span class="line">        必须先创建外部类实例，然后再用外部类实例创建内部类实例 </span><br><span class="line">        内部类不能定义除编译时常量以外的任何 <span class="keyword">static</span> 成员</span><br><span class="line">   ◼ 内部类可以直接访问外部类中的所有成员（即使被声明为 <span class="keyword">private</span>）</span><br><span class="line">   ◼ 外部类可以直接访问内部类实例的成员变量、方法（即使被声明为 <span class="keyword">private</span>）</span><br><span class="line"><span class="meta"># 静态嵌套类（Static Nested Class）</span></span><br><span class="line">    ◼ 静态嵌套类：被 <span class="keyword">static</span> 修饰的嵌套类</span><br><span class="line">    ◼ 静态嵌套类在行为上就是一个顶级类，只是定义的代码写在了另一个类中</span><br><span class="line">    ◼ 对比一般的顶级类，静态嵌套类多了一些特殊权限 </span><br><span class="line">        可以直接访问外部类中的成员（即使被声明为 <span class="keyword">private</span>）</span><br><span class="line"><span class="meta"># 什么情况使用嵌套类</span></span><br><span class="line">    ◼ 如果类 A 只用在类 C 内部，可以考虑将类 A 嵌套到类 C 中 </span><br><span class="line">        封装性更好</span><br><span class="line">        程序包更加简化</span><br><span class="line">        增强可读性、维护性</span><br><span class="line">    ◼ 如果类 A 需要经常访问类 C 的非公共成员，可以考虑将类 A嵌套到类 C 中</span><br><span class="line">        另外也可以根据需要将类 A 隐藏起来，不对外暴露</span><br><span class="line">    ◼ 如果需要经常访问非公共的实例成员，设计成内部类（非静态嵌套类），否则设计成静态嵌套类 </span><br><span class="line">        如果必须先有 C 实例，才能创建 A 实例，那么可以将 A 设计为 C 的内部类</span><br><span class="line"><span class="meta"># 局部类（Local Class）</span></span><br><span class="line">    ◼ 局部类：定义在代码块中的类（可以定义在方法中、<span class="keyword">for</span> 循环中、<span class="keyword">if</span> 语句中等）</span><br><span class="line">    ◼ 局部类不能定义除编译时常量以外的任何 <span class="keyword">static</span> 成员</span><br><span class="line">    ◼ 局部类只能访问 final 或者 有效 final 的局部变量</span><br><span class="line">        从 Java <span class="number">8</span> 开始，如果局部变量没有被第二次赋值，就认定为是有效 final</span><br><span class="line">    ◼ 局部类可以直接访问外部类中的所有成员（即使被声明为 <span class="keyword">private</span>） </span><br><span class="line">        局部类只有定义在实例相关的代码块中，才能直接访问外部类中的实例成员（实例变量、实例方法）</span><br></pre></td></tr></tbody></table></figure>
<h1 id="抽象-amp-接口"><a href="#抽象-amp-接口" class="headerlink" title="抽象&amp;接口"></a>抽象 &amp; 接口</h1><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"># 抽象方法（Abstract Method）</span><br><span class="line">◼ 抽象方法：被 <span class="keyword">abstract</span> 修饰的实例方法 </span><br><span class="line">    只有方法声明，没有方法实现（参数列表后面没有大括号，而是分号） </span><br><span class="line">    不能是 <span class="keyword">private</span> 权限（因为定义抽象方法的目的让子类去实现） </span><br><span class="line">    只能定义在抽象类、接口中</span><br><span class="line"># 抽象类（Abstract Class）</span><br><span class="line">◼ 抽象类：被 <span class="keyword">abstract</span> 修饰的类</span><br><span class="line">    可以定义抽象方法</span><br><span class="line">    不能实例化，但可以自定义构造方法 </span><br><span class="line">    子类必须实现抽象父类中的所有抽象方法（除非子类也是一个抽象类） </span><br><span class="line">    可以像非抽象类一样定义成员变量、常量、嵌套类型、初始化块、非抽象方法等 ✓也就说，抽象类也可以完全不定义抽象方法</span><br><span class="line">◼ 常见使用场景 </span><br><span class="line">    抽取子类的公共实现到抽象父类中，要求子类必须要单独实现的定义成抽象方法</span><br><span class="line"># 接口(<span class="keyword">interface</span>)</span><br><span class="line">    ◼ 可以定义：抽象方法、常量(<span class="symbol">static</span> <span class="symbol">final</span>)、嵌套类型，从<span class="symbol">Java</span> <span class="symbol">8</span>开始可以定义：默认方法、静态方法（类方法） 上述可以定义的内容都是隐式 <span class="symbol">public</span> 的，因此可以省略 <span class="symbol">public</span> 关键字</span><br><span class="line">        从 <span class="symbol">Java</span> <span class="symbol">9</span> 开始可以定义 <span class="symbol">private</span> 方法</span><br><span class="line">    ◼ 常量可以省略 <span class="symbol">static</span>、<span class="symbol">final</span></span><br><span class="line">    ◼ 抽象方法可以省略 <span class="symbol">abstract</span></span><br><span class="line">    ◼ 不能自定义构造方法、不能定义（静态）初始化块、不能实例化</span><br><span class="line">    ◼ 接口名称可以在任何使用类型的地方使用</span><br><span class="line">    ◼ 一个类可以通过 <span class="symbol">implements</span> 关键字实现一个或多个接口 </span><br><span class="line">        实现接口的类必须实现接口中定义的所有抽象方法，除非它是个抽象类 </span><br><span class="line">        如果一个类实现的多个接口中有相同的抽象方法，只需要实现此方法一次 </span><br><span class="line">        <span class="symbol">extends</span> 和 <span class="symbol">implements</span> 可以一起使用，<span class="symbol">implements</span> 必须写在 <span class="symbol">extends</span> 的后面 </span><br><span class="line">        当父类、接口中的方法签名一样时，那么返回值类型也必须一样</span><br><span class="line">    ◼ 一个接口可以通过 <span class="symbol">extends</span> 关键字继承一个或者多个接口 </span><br><span class="line">        当多个父接口中的方法签名一样时，那么返回值类型也必须一样</span><br><span class="line">    ◼ 若想在不改动以前实现类的前提下进行接口升级，从 <span class="symbol">Java</span> <span class="symbol">8</span> 开始，有 <span class="symbol">2</span> 种方案</span><br><span class="line">        默认方法（<span class="symbol">Default</span> <span class="symbol">Method</span>）</span><br><span class="line">            ◼ 当一个类实现的接口中有默认方法时，这个类可以 </span><br><span class="line">                啥也不干，沿用接口的默认实现 </span><br><span class="line">                重新定义默认方法，覆盖默认方法的实现 </span><br><span class="line">                重新声明默认方法，将默认方法声明为抽象方法（此类必须是抽象类)</span><br><span class="line">            ◼ 当一个接口继承的父接口中有默认方法时，这个接口可以 </span><br><span class="line">                啥也不干，沿用接口的默认实现 </span><br><span class="line">                重新定义默认方法，覆盖默认方法的实现 </span><br><span class="line">                重新声明默认方法，将默认方法声明为抽象方法    </span><br><span class="line">        静态方法（<span class="symbol">Static</span> <span class="symbol">Method</span>）</span><br><span class="line">            ◼ 接口中定义的静态方法只能通过接口名调用，不能被继承</span><br><span class="line"># 抽象类与接口对比</span><br><span class="line">    ◼ 抽象类和接口的用途还是有点类似，该如何选择？</span><br><span class="line">    ◼ 何时选择抽象类？ </span><br><span class="line">        在紧密相关的类之间共享代码</span><br><span class="line">        需要除 <span class="symbol">public</span> 之外的访问权限 </span><br><span class="line">        需要定义实例变量、非 <span class="symbol">final</span> 的静态变量</span><br><span class="line">    ◼ 何时选择接口？ </span><br><span class="line">        不相关的类实现相同的方法 </span><br><span class="line">        只是定义行为，不关心具体是谁实现了行为</span><br><span class="line">        想实现类型的多重继承   </span><br></pre></td></tr></tbody></table></figure>
<h1 id="匿名类（Anonymous-Class）"><a href="#匿名类（Anonymous-Class）" class="headerlink" title="匿名类（Anonymous Class）"></a>匿名类（Anonymous Class）</h1><p><img data-src="/images/java/%E5%9B%9E%E8%B0%83.png"><br><img data-src="/images/java/%E8%BF%87%E6%BB%A4%E5%99%A8.png"></p>
<figure class="highlight axapta"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"># 匿名类</span></span><br><span class="line">     当接口、抽象类的实现类，在整个项目中只用过一次，可以考虑使用匿名类</span><br><span class="line">     匿名类不能定义除编译时常量以外的任何 <span class="keyword">static</span> 成员</span><br><span class="line">     匿名类只能访问 <span class="keyword">final</span> 或者 有效 <span class="keyword">final</span> 的局部变量</span><br><span class="line">     匿名类可以直接访问外部类中的所有成员（即使被声明为 <span class="keyword">private</span>）</span><br><span class="line">        匿名类只有在实例相关的代码块中使用，才能直接访问外部类中的实例成员（实例变量、实例方法）</span><br><span class="line">     匿名类不能自定义构造方法，但可以有初始化块</span><br><span class="line">     匿名类的常见用途</span><br><span class="line">        代码传递 - 时间耗时工具类</span><br><span class="line">        过滤器 - 根据条件过滤</span><br><span class="line">        回调- 异步请求callback</span><br><span class="line"><span class="meta"># Comparable vs Comparator</span></span><br><span class="line">     如果数组元素本身具备可比较性（实现了 java.util.Comparable 接口）</span><br><span class="line">        可以直接使用 Arrays.sort 方法进行排序</span><br><span class="line">     java.util.Comparator 的存在意义？</span><br><span class="line">        可以在不修改类源代码的前提下，修改默认的比较方式（比如官方类、第三方类）</span><br><span class="line">        可以让一个类提供多种比较方式</span><br><span class="line"><span class="meta"># Lambda Expression</span></span><br><span class="line">     Lambda 表达式是 Java <span class="number">8</span> 开始才有的语法，发音：美 [ˈlæmdə]</span><br><span class="line">     函数式接口（Functional Interface）：只包含 <span class="number">1</span> 个抽象方法的接口</span><br><span class="line">        可以在接口上面加上 @FunctionalInterface 注解，表示它是一个函数式接口</span><br><span class="line">     当匿名类实现的是函数式接口时，可以使用 Lambda 表达式进行简化 </span><br><span class="line"><span class="meta"># Lambda 的使用注意   </span></span><br><span class="line">     Lambda 只能访问 <span class="keyword">final</span> 或者 有效 <span class="keyword">final</span> 的局部变量</span><br><span class="line">     Lambda 没有引入新的作用域 </span><br><span class="line"><span class="meta"># Lambda 和匿名内部类区别</span></span><br><span class="line">     <span class="keyword">this</span>指向有问题[没有引入新的作用域]</span><br><span class="line"><span class="meta"># 方法引用</span></span><br><span class="line">     如果 Lambda 中的内容仅仅是调用某个方法，可以使用方法引用（Method Reference）来简化</span><br><span class="line">        引用静态方法 ClassName::staticMethodName</span><br><span class="line">        引用特定对象的实例方法 ObjectName::instanceMethodName</span><br><span class="line">        引用特定类型的任意对象的实例方法 ClassName::methodName</span><br><span class="line">        引用构造方法 ClassName::<span class="keyword">new</span></span><br><span class="line">        引用当前类中定义的实例方法 <span class="keyword">this</span>::instanceMethodName</span><br><span class="line">        引用父类中定义的实例方法 <span class="keyword">super</span>::instanceMethodName</span><br><span class="line"><span class="meta"># 其他函数式接口</span></span><br><span class="line">    <span class="meta">#Supplier </span></span><br><span class="line">        -- 理解为系统自带的一个空接口函数式实现,不用在类里面自己写接口了</span><br><span class="line">    <span class="meta">#Consumer</span></span><br><span class="line">        -- 带参数的函数式接口 + andThen</span><br><span class="line">    <span class="meta">#Predicate</span></span><br><span class="line">        -- 带参数返回<span class="built_in">boolean</span>  , and 多条件同时 or | negate 取反</span><br><span class="line">    <span class="meta">#Function  </span></span><br><span class="line">        -- 参数和入参都是泛型           </span><br></pre></td></tr></tbody></table></figure>
<h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><figure class="highlight fortran"><table><tbody><tr><td class="code"><pre><span class="line">◼ 如果一个变量的取值只可能是固定的几个值，可以考虑使用枚举类型</span><br><span class="line">    枚举由一组预定义的常量构成</span><br><span class="line">◼ 枚举的本质是类，所有枚举类型最终都隐式继承自 java.lang.<span class="keyword">Enum</span></span><br><span class="line">◼ 枚举定义完常量后，可以再定义成员变量、方法等内容（这时最后一个常量要以分号结束）</span><br><span class="line">◼ 枚举的构造方法权限必须是 无修饰符 或者 <span class="keyword">private</span></span><br><span class="line">    Java 会主动调用构造方法初始化每一个常量，你不能主动调用构造方法</span><br></pre></td></tr></tbody></table></figure>
<h1 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h1><figure class="highlight vbnet"><table><tbody><tr><td class="code"><pre><span class="line">◼ 对比引用类型，基本类型存在的一些缺陷</span><br><span class="line">    无法表示不存在的值（null 值）</span><br><span class="line">    不能利用面向对象的方式去操作基本类型（比如直接用基本类型调用方法）</span><br><span class="line">    当方法参数是引用类型时，基本类型无法传递</span><br><span class="line">    可以自己将基本类型包装成引用类型</span><br><span class="line">◼ 其实 Java 中已经内置了基本类型的包装类（都在 java.lang 包中）</span><br><span class="line">    <span class="type">byte</span> <span class="type">Byte</span></span><br><span class="line">    <span class="type">char</span> Character</span><br><span class="line">    <span class="type">short</span> <span class="type">Short</span></span><br><span class="line">    int <span class="type">Integer</span></span><br><span class="line">    <span class="type">long</span> <span class="type">Long</span></span><br><span class="line">    float Float</span><br><span class="line">    <span class="type">double</span> <span class="type">Double</span></span><br><span class="line">    <span class="type">boolean</span> <span class="type">Boolean</span></span><br><span class="line">◼ 数字类型的包装类（<span class="type">Byte</span>\<span class="type">Short</span>\<span class="type">Integer</span>\<span class="type">Long</span>\Float\<span class="type">Double</span>）最终都继承自 java.lang.Number</span><br><span class="line">◼ 自动装箱：Java 编译器会自动将基本类型转换为包装类（调用 valueOf 方法）</span><br><span class="line">◼ 自动拆箱：Java 编译器会自动将包装类转换为基本类型（调用 xxxValue 方法）</span><br><span class="line">◼ 包装类的判等，不要使用 ==、!= 运算符，应该使用 <span class="keyword">equals</span> 方法</span><br><span class="line">◼ IntegerCache 类中缓存了 [-<span class="number">128</span>, <span class="number">127</span>] 范围的 <span class="type">Integer</span> 对象</span><br><span class="line">     <span class="type">Integer</span>.valueOf 方法会优先去 IntegerCache 缓存中获取 <span class="type">Integer</span> 对象</span><br><span class="line">◼ 【基本类型数组】与【包装类数组】之间是不能自动装箱、拆箱的</span><br><span class="line">◼ 建议使用字符串初始化 BigDecimal，因为 float、<span class="type">double</span> 存储的是近似值，不是精确值</span><br><span class="line">◼ == 和 equal</span><br><span class="line">    基本数据类型  == 比较数值是否相等 </span><br><span class="line">    引用类型      == 比较内存地址</span><br><span class="line">    equal是引用对象才有的方法,继承于<span class="type">Object</span> 没有重写就是==</span><br><span class="line">    基本数据类型重写了,直接判断值</span><br><span class="line">◼ 字符串转数字</span><br><span class="line">    ◼ 使用包装类的 valueOf、parseXX 方法</span><br><span class="line">    <span class="type">Integer</span> i1= <span class="type">Integer</span>.valueOf(<span class="string">"12"</span>) # 包装用 valueOf</span><br><span class="line">    int i2 = <span class="type">Integer</span>.parseInt(<span class="string">"12"</span>) # 基本类型用 parseInt</span><br><span class="line">数字转字符串</span><br><span class="line">    ◼ 使用字符串的 valueOf 方法、包装类的 toString 方法    </span><br></pre></td></tr></tbody></table></figure>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p><img data-src="/images/java/%E5%AD%97%E7%AC%A6%E4%B8%B2.png"><br><img data-src="/images/java/%E5%AD%97%E7%AC%A6%E4%B8%B21.png"></p>
<figure class="highlight mipsasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 当遇到字符串常面量,才会去常量池找,没有就加进去</span></span><br><span class="line"><span class="comment"># intern方法和字面量一样,会把字符串加进去常量池</span></span><br><span class="line">字符串</span><br><span class="line">    ◼ <span class="keyword">Java </span>中用 <span class="keyword">java.lang.String </span>类代表字符串</span><br><span class="line">        底层使用 char[] 存储字符数据，从 <span class="keyword">Java </span><span class="number">9</span> 开始，底层使用 <span class="keyword">byte[] </span>存储字符数据</span><br><span class="line">        所有字符串字面量（比如 ）都是 String 类的实例</span><br><span class="line">        String 对象一旦创建完毕，它的字符内容是不可以修改的</span><br><span class="line">字符串常量池（String Constant Pool）</span><br><span class="line">    ◼ <span class="keyword">Java </span>中有个字符串常量池（String Constant Pool，简称 <span class="keyword">SCP）</span></span><br><span class="line"><span class="keyword"></span>        从 <span class="keyword">Java </span><span class="number">7</span> 开始属于堆空间的一部分（以前放在方法区）</span><br><span class="line">    ◼ 当遇到字符串字面量时，会去查看 <span class="keyword">SCP</span></span><br><span class="line"><span class="keyword"></span>        如果 <span class="keyword">SCP </span>中存在与字面量内容一样的字符串对象 A 时，就返回 A</span><br><span class="line">        否则，创建一个新的字符串对象 D，并加入到 <span class="keyword">SCP </span>中，返回 D  </span><br><span class="line">intern 方法</span><br><span class="line">    ◼ A.intern 方法的作用</span><br><span class="line">        如果 <span class="keyword">SCP </span>中存在与 A 内容一样的字符串对象 C 时，就返回 C</span><br><span class="line">        否则，将 A 加入到 <span class="keyword">SCP </span>中，返回 A</span><br><span class="line">StringBuilder</span><br><span class="line">    ◼ 在进行大量字符串的改动操作时（比如拼接、替换）</span><br><span class="line">        使用 String 会非常消耗内存、降低程序性能</span><br><span class="line">        使用 StringBuilder 可以节省内存、提高程序性能</span><br><span class="line">    ◼ StringBuilder 的常用方法有：append、<span class="keyword">insert、delete、replace、reverse等</span></span><br><span class="line"><span class="keyword"></span>    ◼ 注意</span><br><span class="line">        StringBuilder 并不是 String 的子类 或者 父类</span><br><span class="line">        StringBuilder、String 都实现了 CharSequence 接口</span><br><span class="line">    ◼ StringBuilder 的默认容量是 <span class="number">16</span>，扩容后的新容量是原来容量的 <span class="number">2</span> 倍 + <span class="number">2</span></span><br><span class="line">        <span class="number">16</span> 扩容为 <span class="number">34</span></span><br><span class="line">        <span class="number">34</span> 扩容为 <span class="number">70</span></span><br><span class="line">        <span class="number">70</span> 扩容为 <span class="number">142</span></span><br><span class="line"><span class="keyword">SubString </span>截取 [左闭右开]</span><br></pre></td></tr></tbody></table></figure>
<h1 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h1><p><img data-src="/images/java/%E6%97%A5%E6%9C%9F1.png"><br><img data-src="/images/java/%E6%97%A5%E6%9C%9F2.png"></p>
<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p><img data-src="/images/java/%E5%BC%82%E5%B8%B8.png"><br><img data-src="/images/java/%E5%BC%82%E5%B8%B81.png"><br><img data-src="/images/java/%E5%BC%82%E5%B8%B82.png"><br><img data-src="/images/java/%E5%BC%82%E5%B8%B83.png"></p>
<figure class="highlight vala"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"># 以finally中return为最后</span></span><br><span class="line"><span class="meta"># 检查型异常:   编译器需要你去手动处理异常,不处理就报错</span></span><br><span class="line"><span class="meta"># 非检查型异常: 可以自己去避免的异常,比如分配堆空间不够,栈空间不够,运行中异常runtime + error </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> au(){</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">try</span>{</span><br><span class="line">			<span class="keyword">return</span> ++i;</span><br><span class="line">		}<span class="keyword">catch</span> (Exception e){</span><br><span class="line">			<span class="keyword">return</span> ++i;</span><br><span class="line">		}finally {</span><br><span class="line">			<span class="keyword">return</span> ++i;</span><br><span class="line">		}</span><br><span class="line">		<span class="comment">//return ++i; 报错</span></span><br><span class="line">}</span><br><span class="line">i == <span class="number">3</span></span><br><span class="line"><span class="meta"># throws RuntimeException 编译器不会报异常,因为是非检查型异常</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><figure class="highlight tp"><table><tbody><tr><td class="code"><pre><span class="line"># 单字符匹配</span><br><span class="line">    [abc]           a、b、c / (a|b|c) == [a|b|c] 小括号必须要|</span><br><span class="line">    [^abc]          除了 a、b、c 以外的任意字符 </span><br><span class="line">    [a-zA-<span class="keyword">Z</span>]        从 a 到 z、从 A 到 <span class="keyword">Z</span></span><br><span class="line">    [a-d[m-p]]      [a-dm-p]（并集） </span><br><span class="line">    [a-z&amp;&amp;[def]]    d、e、f（交集） </span><br><span class="line">    [a-z&amp;&amp;[^bc]]    [ad-z]（差集，从 [a-z] 中减去 [bc]）</span><br><span class="line">    [a-z&amp;&amp;[^m-p]]   [a-lq-z]（差集，从 [a-z] 中减去 [m-p]）</span><br><span class="line"># 预定义字符</span><br><span class="line">    .  任意字符</span><br><span class="line">    \d [<span class="number">0</span><span class="number">-9</span>]（数字）</span><br><span class="line">    \D [^<span class="number">0</span><span class="number">-9</span>]（非数字） </span><br><span class="line">    \s [ \t\n\f\r]（空白） </span><br><span class="line">    \S [^\s]（非空白） </span><br><span class="line">    \w [a-zA-Z_<span class="number">0</span><span class="number">-9</span>]（单词） </span><br><span class="line">    \<span class="keyword">W</span> [^\w]（非单词）</span><br><span class="line">    ◼ 以 <span class="number">1</span> 个反斜杠（\）开头的字符会被当做转义字符处理 </span><br><span class="line">        因此，为了在正则表达式中完整地表示预定义字符，需要以 <span class="number">2</span> 个反斜杠开头，比如<span class="string">"\\d"</span></span><br><span class="line"># 量词 *表示<span class="number">0</span>~多次，+表示<span class="number">1</span>~多次，？表示<span class="number">0</span>或<span class="number">1</span>次</span><br><span class="line">    贪婪(Greedy)    勉强(Reluctant)  独占(Possessive) 含义   </span><br><span class="line">    <span class="keyword">X</span>{n}            <span class="keyword">X</span>{n}?           <span class="keyword">X</span>{n}+           <span class="keyword">X</span>出现 n 次</span><br><span class="line">    <span class="keyword">X</span>{n,m}          <span class="keyword">X</span>{n,m}?         <span class="keyword">X</span>{n,m}+         <span class="keyword">X</span>出现 n 到 m 次 </span><br><span class="line">    <span class="keyword">X</span>{n,}           <span class="keyword">X</span>{n,}?          <span class="keyword">X</span>{n,}+ <span class="keyword">X</span>        出现至少 n 次</span><br><span class="line">    <span class="keyword">X</span>?              <span class="keyword">X</span>??             <span class="keyword">X</span>?+             <span class="keyword">X</span>{<span class="number">0</span>,<span class="number">1</span>} （<span class="keyword">X</span> 出现 <span class="number">0</span> 次或者 <span class="number">1</span> 次）</span><br><span class="line">    <span class="keyword">X</span>*              <span class="keyword">X</span>*?             <span class="keyword">X</span>*+             <span class="keyword">X</span>{<span class="number">0</span>,}  （<span class="keyword">X</span> 出现任意次）</span><br><span class="line">    <span class="keyword">X</span>+              <span class="keyword">X</span>+?             <span class="keyword">X</span>++             <span class="keyword">X</span>{<span class="number">1</span>,}  （<span class="keyword">X</span> 至少出现 <span class="number">1</span> 次）</span><br><span class="line"># Matcher – 贪婪、勉强、独占的区别</span><br><span class="line">    ◼ 贪婪 - 最长</span><br><span class="line">        先吞掉整个 input 进行匹配 </span><br><span class="line">        ✓若匹配失败，则吐出最后一个字符 </span><br><span class="line">        然后再次尝试匹配，重复此过程，直到匹配成功</span><br><span class="line">    ◼ 勉强 - 最短</span><br><span class="line">        先吞掉 input 的第一个字符进行匹配 </span><br><span class="line">        ✓若匹配失败，则再吞掉下一个字符 </span><br><span class="line">        然后再次尝试匹配，重复此过程，直到匹配成功</span><br><span class="line">    ◼ 独占</span><br><span class="line">        吞掉整个 input 进行唯一的一次匹配</span><br><span class="line"># 捕获组 – 反向引用（Backreference）()-表示组 里面是整体 里面是|还是或的意思</span><br><span class="line">    ◼ 反向引用（Backreference）</span><br><span class="line">        可以使用反斜杠（\）+ 组编号（从 <span class="number">1</span> 开始）来引用组的内容 </span><br><span class="line">        (\\d\\d)\\<span class="number">1</span> <span class="number">1212</span>-true <span class="number">1234</span>-false</span><br><span class="line">    ◼ ((A)(B(C))) 一共有 <span class="number">4</span> 个组  </span><br><span class="line">        左括号从左往右进行进组</span><br><span class="line">        编号<span class="number">1</span>：((A)(B(C))) </span><br><span class="line">        编号<span class="number">2</span>：(A) </span><br><span class="line">        编号<span class="number">3</span>：(B(C)) </span><br><span class="line">        编号<span class="number">4</span>：(C)</span><br><span class="line"># 边界匹配符（ Boundary Matcher）</span><br><span class="line">    \b 单词边界</span><br><span class="line">    \B 非单词边界 </span><br><span class="line">    ^  一行的开头 </span><br><span class="line">    $  一行的结尾</span><br><span class="line">    \A 输入的开头 </span><br><span class="line">    \z 输入的结尾 </span><br><span class="line">    \<span class="keyword">Z</span> 输入的结尾（结尾可以有终止符）</span><br><span class="line">    \G 上一次匹配的结尾 \\Gdog 上一次结尾必须是d开头</span><br><span class="line"># 概念    </span><br><span class="line">    ◼ 终止符（Final Terminator、Line Terminator） </span><br><span class="line">        \r（回车符）、\n（换行符）、\r\n（回车换行符</span><br><span class="line">    ◼ 输入：整个字符串</span><br><span class="line">    ◼ 一行：以终止符（或整个输入的结尾）结束的字符串片段 </span><br><span class="line">        如果输入是<span class="string">"dog\ndog\rdog"</span></span><br><span class="line">        那么<span class="number">3</span>个dog是<span class="number">3</span>行</span><br><span class="line"># 常用模式</span><br><span class="line">模式                 含义                                      等价的正则写法</span><br><span class="line">DOTALL              单行模式（.可以匹配任意字符，包括终止符）        (?s)</span><br><span class="line">MULTILINE           多行模式（^、$ 才能真正匹配一行的开头和结尾）    (?m) </span><br><span class="line">CASE_INSENSITIVE    常用模式 不区分大小写                        (?i)</span><br></pre></td></tr></tbody></table></figure>
<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><figure class="highlight processing"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">static</span> 方法 要使用泛型必须自己是泛型方法</span><br><span class="line"><span class="number">2.</span>extend 限制类型参数</span><br><span class="line">    &lt;T extend A&gt;</span><br><span class="line">    可以跟上类名,接口,代表T必须是A类型,或者继承,实现A</span><br><span class="line">    &lt;T extend A&amp;B&amp;C&gt; 同时满足ABC</span><br><span class="line"><span class="number">3.</span>通配符 ?</span><br><span class="line">     <span class="keyword">super</span> 是下界 大于等于 &lt;a <span class="keyword">super</span> Integer&gt;  只能在?下使用</span><br><span class="line">     泛型类型不能是? 即类上的&lt;T&gt;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> test(List&lt;?&gt; list){</span><br><span class="line">        <span class="keyword">Object</span> obj = list.<span class="built_in">get</span>(<span class="number">0</span>);</span><br><span class="line">        # 编译在编译的时候就需要知道类型,不确定类型,所以报错</span><br><span class="line">        list.<span class="built_in">set</span>(<span class="number">0</span>,obj); <span class="comment">//error</span></span><br><span class="line">        list.<span class="built_in">set</span>(<span class="number">0</span>,list.<span class="built_in">get</span>(<span class="number">0</span>)); <span class="comment">//error</span></span><br><span class="line">     }</span><br></pre></td></tr></tbody></table></figure>
<h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><figure class="highlight mipsasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#什么是多线程</span></span><br><span class="line">     <span class="number">1</span> 个进程中可以 开启多线，所有并行（同时） 执行不同的任务</span><br><span class="line">     进程  车间，线程  车间工人</span><br><span class="line">     多线程技术可以提高序的执行效率</span><br><span class="line"> 比如同时开启 <span class="number">3</span> 个线程分别下载 <span class="number">3</span> 个文件 （分别是A、文件 <span class="keyword">B、文件 </span>C）</span><br><span class="line"> 同一时间， CPU 的 <span class="number">1</span> 个核心只能处理 <span class="number">1</span> 个线程（只有 <span class="number">1</span> 个线程在工作）</span><br><span class="line"> 多线程并发（同时）执行，其实是 CPU 快速地在多个线程之间 调度 （切换）</span><br><span class="line"> 如果 CPU 调度线程的速足够快，就造成了多并发执行假象</span><br><span class="line"> 如果是多核 CPUCPU，才是真正地实现了多个线程同时执行</span><br><span class="line"> 思考：如果线程非常多，会发生什么情况？</span><br><span class="line">     CPU 会在 N 个线程之间调度，消耗大量的 CPU 资源， CPU 会累死</span><br><span class="line">     每条线程被调度执行的频次会降低（效率）</span><br><span class="line"> 优点</span><br><span class="line">     能适当提高程序的执行效率</span><br><span class="line">     能适当提高资源利用率（ CPU 、内存利用率）</span><br><span class="line"> 缺点</span><br><span class="line">     开启线程需要占用一定的内存空间 ，如果开启大量的线程 ，会占用大量的内存空间，降低程序性能</span><br><span class="line">     线程越多， CPU 在调度线程上的开销就越大</span><br><span class="line">     程序设计更加复杂</span><br><span class="line">     比如线程之间的通信问题 </span><br><span class="line"> 每一个 <span class="keyword">Java </span>程序启动后，会默认开一个线称为主（ main 方法所在的线程）</span><br><span class="line"> 每一个 线程都是<span class="keyword">java.lang.Thread </span>对象，可以通过 Thread. currentThread    </span><br><span class="line"> 多线程的内存布局</span><br><span class="line">     PC 寄存器 （Program Counter Register Register）：每一个线程都有自己的 PC 寄存器</span><br><span class="line">     <span class="keyword">Java </span>虚拟机栈 （<span class="keyword">Java </span>Virtual Machine Stack Stack）：每一个线程都有自己的 <span class="keyword">Java </span>虚拟机栈</span><br><span class="line">     堆（HeapHeap）：多个线程共享 堆</span><br><span class="line">     方法区 （Method Area Area）：多个线程共享 方法区</span><br><span class="line">     本地方法栈 （Native Method Stack Stack）：每一个线程都有自己的 </span><br><span class="line"><span class="comment"># 线程状态</span></span><br><span class="line">    可以通过 Thread.getState 方法获得线程的状态（一共有 <span class="number">6</span> 种状态）</span><br><span class="line">     （定时等待状态）</span><br><span class="line">         调用以下方法会处于定时等待状态</span><br><span class="line">         Thread. sleep</span><br><span class="line">         有超时值的 Object.<span class="keyword">wait</span></span><br><span class="line"><span class="keyword"></span>         有超时值的 Thread.<span class="keyword">join</span></span><br><span class="line"><span class="keyword"></span>         LockSupport. parkNanos</span><br><span class="line">         LockSupport. parkUntil</span><br><span class="line">     （终止状态）：已经执行完毕</span><br><span class="line">     （新建）：尚未启动</span><br><span class="line">     （可运行状态）：正在 <span class="keyword">JVM </span>中运行</span><br><span class="line">         或者正在等待操作系统的其他资源（比如处理器）</span><br><span class="line">     （阻塞状态）：正在等待监视器锁内部）</span><br><span class="line">     （等待状态）：在另一个线程</span><br><span class="line">     调用以下方法会处于等待状态</span><br><span class="line">         没有超时值的 Object.<span class="keyword">wait</span></span><br><span class="line"><span class="keyword"></span>         没有超时值的 Thread.<span class="keyword">join</span></span><br><span class="line"><span class="keyword"></span>         LockSupport. park   </span><br><span class="line"><span class="comment"># 死锁</span></span><br><span class="line">    <span class="number">1</span>.请求保持</span><br><span class="line">    <span class="number">2</span>.循环依赖</span><br><span class="line">    <span class="number">3</span>.不剥夺 </span><br><span class="line">    <span class="number">3</span>.条件互斥        </span><br><span class="line"><span class="comment"># synchronized obj ) 的原理</span></span><br><span class="line">     每个对象都有一与它相关的 内部 锁（intrinsic lock lock）或者叫监视器锁（ monitor lock lock）</span><br><span class="line">     第一个执行到同步语句的线程可以获得 obj 的内部锁</span><br><span class="line">        ，在执行完同步语句中代码后释放此 只要一个线程持有了内部锁</span><br><span class="line">        ，那么其它在同时刻将无法再获得此 当它们试图获取此锁时，将会进入 状态</span><br><span class="line">     多个 线程访问同一<span class="keyword">synchronized </span>obj )语句时</span><br><span class="line">     obj 必须是一个对象,字符串<span class="string">"1"</span>也行    </span><br><span class="line"><span class="comment"># 线程间通信</span></span><br><span class="line">    可以使用 Object.<span class="keyword">wait </span>、Object.notify 、Object.notifyAll 方法实现线程之间的通信</span><br><span class="line">     若想在线程 A 中成功调用 obj.<span class="keyword">wait </span>、obj.notify 、obj.notifyAll 方法</span><br><span class="line">         线程 A 必须要持有 obj 的内部锁</span><br><span class="line">     obj.<span class="keyword">wait </span><span class="keyword">wait：释放 </span>obj 的内部锁，当前线程进入 或 状态</span><br><span class="line">     obj.notifyAll notifyAll：唤醒所有因为 obj.<span class="keyword">wait </span>进入 或 状态的线程</span><br><span class="line">     obj.notify notify：随机唤醒 <span class="number">1</span> 个因为 obj.<span class="keyword">wait </span>进入 或 状态的线程 </span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>架构师</category>
      </categories>
      <tags>
        <tag>架构师</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti5 之个人任务分配</title>
    <url>/2021/06/04/40-Activiti5%E4%B9%8B%E4%B8%AA%E4%BA%BA%E4%BB%BB%E5%8A%A1%E5%88%86%E9%85%8D/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/40.jpg"></p>
</span>

<span id="more"></span>

<h1 id="Activiti5之个人任务分配"><a href="#Activiti5之个人任务分配" class="headerlink" title="Activiti5之个人任务分配"></a>Activiti5 之个人任务分配</h1><h2 id="分配方式一-直接流程图配置中写死"><a href="#分配方式一-直接流程图配置中写死" class="headerlink" title="分配方式一 直接流程图配置中写死"></a>分配方式一 直接流程图配置中写死</h2><p><img data-src="/images/activiti/activiti5/user/1.jpg"></p>
<ul>
<li>这种方式前面讲过 直接在流程图中 Main config Assignee 中写死具体分配的任务执行人；  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">import java.util.List;</span><br><span class="line"> </span><br><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.activiti.engine.ProcessEngines;</span><br><span class="line">import org.activiti.engine.repository.Deployment;</span><br><span class="line">import org.activiti.engine.runtime.ProcessInstance;</span><br><span class="line">import org.activiti.engine.task.Task;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"> </span><br><span class="line">public <span class="keyword">class</span> AssignTest01 {</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取默认流程引擎实例，会自动读取activiti.cfg.xml文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ProcessEngine processEngine=<span class="module-access"><span class="module"><span class="identifier">ProcessEngines</span>.</span></span>get<span class="constructor">DefaultProcessEngine()</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 部署流程定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void deploy<span class="literal">()</span>{</span><br><span class="line">        Deployment deployment=processEngine.get<span class="constructor">RepositoryService()</span> <span class="comment">// 获取部署相关Service</span></span><br><span class="line">                .create<span class="constructor">Deployment()</span> <span class="comment">// 创建部署</span></span><br><span class="line">                .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/StudentLeaveProcess5.bpmn"</span>)</span> <span class="comment">// 加载资源文件</span></span><br><span class="line">                .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/StudentLeaveProcess5.png"</span>)</span> <span class="comment">// 加载资源文件</span></span><br><span class="line">                .name(<span class="string">"学生请假流程5"</span>) <span class="comment">// 流程名称</span></span><br><span class="line">                .deploy<span class="literal">()</span>; <span class="comment">// 部署</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署ID:"</span>+deployment.get<span class="constructor">Id()</span>); </span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署Name:"</span>+deployment.get<span class="constructor">Name()</span>);</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动流程实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void start<span class="literal">()</span>{</span><br><span class="line">        ProcessInstance pi=processEngine.get<span class="constructor">RuntimeService()</span> <span class="comment">// 运行时Service</span></span><br><span class="line">            .start<span class="constructor">ProcessInstanceByKey(<span class="string">"studentLevaeProcess5"</span>)</span>; <span class="comment">// 流程定义表的KEY字段值</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+pi.get<span class="constructor">Id()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程定义ID:"</span>+pi.get<span class="constructor">ProcessDefinitionId()</span>); </span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void find<span class="constructor">Task()</span>{</span><br><span class="line">        List&lt;Task&gt; taskList=processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .create<span class="constructor">TaskQuery()</span> <span class="comment">// 创建任务查询</span></span><br><span class="line">            .task<span class="constructor">Assignee(<span class="string">"张三"</span>)</span> <span class="comment">// 指定某个人</span></span><br><span class="line">            .<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">for</span>(Task task:taskList){</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务ID:"</span>+task.get<span class="constructor">Id()</span>); </span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务名称:"</span>+task.get<span class="constructor">Name()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务创建时间:"</span>+task.get<span class="constructor">CreateTime()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务委派人:"</span>+task.get<span class="constructor">Assignee()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+task.get<span class="constructor">ProcessInstanceId()</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void complete<span class="constructor">Task()</span>{</span><br><span class="line">        processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .complete(<span class="string">"272504"</span>);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="分配方式二-使用流程变量"><a href="#分配方式二-使用流程变量" class="headerlink" title="分配方式二 使用流程变量"></a>分配方式二 使用流程变量</h2><p><img data-src="/images/activiti/activiti5/user/2.jpg"></p>
<ul>
<li><p>我们设置流程变量  Assignee  ${userId}</p>
</li>
<li><p>我们在启动流程的时候设置流程变量即可；</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"> </span><br><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.activiti.engine.ProcessEngines;</span><br><span class="line">import org.activiti.engine.repository.Deployment;</span><br><span class="line">import org.activiti.engine.runtime.ProcessInstance;</span><br><span class="line">import org.activiti.engine.task.Task;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"> </span><br><span class="line">public <span class="keyword">class</span> AssignTest2 {</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取默认流程引擎实例，会自动读取activiti.cfg.xml文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ProcessEngine processEngine=<span class="module-access"><span class="module"><span class="identifier">ProcessEngines</span>.</span></span>get<span class="constructor">DefaultProcessEngine()</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 部署流程定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void deploy<span class="literal">()</span>{</span><br><span class="line">        Deployment deployment=processEngine.get<span class="constructor">RepositoryService()</span> <span class="comment">// 获取部署相关Service</span></span><br><span class="line">                .create<span class="constructor">Deployment()</span> <span class="comment">// 创建部署</span></span><br><span class="line">                .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/StudentLeaveProcess6.bpmn"</span>)</span> <span class="comment">// 加载资源文件</span></span><br><span class="line">                .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/StudentLeaveProcess6.png"</span>)</span> <span class="comment">// 加载资源文件</span></span><br><span class="line">                .name(<span class="string">"学生请假流程6"</span>) <span class="comment">// 流程名称</span></span><br><span class="line">                .deploy<span class="literal">()</span>; <span class="comment">// 部署</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署ID:"</span>+deployment.get<span class="constructor">Id()</span>); </span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署Name:"</span>+deployment.get<span class="constructor">Name()</span>);</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动流程实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void start<span class="literal">()</span>{</span><br><span class="line">        Map&lt;String,Object&gt; variables=<span class="keyword">new</span> HashMap&lt;String,Object&gt;<span class="literal">()</span>;</span><br><span class="line">        variables.put(<span class="string">"userId"</span>, <span class="string">"张三2"</span>);</span><br><span class="line">        ProcessInstance pi=processEngine.get<span class="constructor">RuntimeService()</span> <span class="comment">// 运行时Service</span></span><br><span class="line">            .start<span class="constructor">ProcessInstanceByKey(<span class="string">"studentLevaeProcess6"</span>,<span class="params">variables</span>)</span>; <span class="comment">// 流程定义表的KEY字段值</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+pi.get<span class="constructor">Id()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程定义ID:"</span>+pi.get<span class="constructor">ProcessDefinitionId()</span>); </span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void find<span class="constructor">Task()</span>{</span><br><span class="line">        List&lt;Task&gt; taskList=processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .create<span class="constructor">TaskQuery()</span> <span class="comment">// 创建任务查询</span></span><br><span class="line">            .task<span class="constructor">Assignee(<span class="string">"张三2"</span>)</span> <span class="comment">// 指定某个人</span></span><br><span class="line">            .<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">for</span>(Task task:taskList){</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务ID:"</span>+task.get<span class="constructor">Id()</span>); </span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务名称:"</span>+task.get<span class="constructor">Name()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务创建时间:"</span>+task.get<span class="constructor">CreateTime()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务委派人:"</span>+task.get<span class="constructor">Assignee()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+task.get<span class="constructor">ProcessInstanceId()</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void complete<span class="constructor">Task()</span>{</span><br><span class="line">        processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .complete(<span class="string">"282505"</span>);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="分配方式三-TaskListener监听实现"><a href="#分配方式三-TaskListener监听实现" class="headerlink" title="分配方式三 TaskListener监听实现"></a>分配方式三 TaskListener 监听实现</h2><ul>
<li><p>我们定义一个监听类 MyTaskListener 实现 TaskListener 接口：</p>
  <figure class="highlight d"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.activiti.engine.<span class="built_in">delegate</span>.DelegateTask;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.<span class="built_in">delegate</span>.TaskListener;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> MyTaskListener implements TaskListener{</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> notify(DelegateTask delegateTask) {</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        delegateTask.setAssignee(<span class="string">"李四"</span>); <span class="comment">// 指定办理人</span></span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<p><img data-src="/images/activiti/activiti5/user/3.jpg"></p>
<ul>
<li><p>这边指定下 定义的类</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">import java.util.List;</span><br><span class="line"> </span><br><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.activiti.engine.ProcessEngines;</span><br><span class="line">import org.activiti.engine.repository.Deployment;</span><br><span class="line">import org.activiti.engine.runtime.ProcessInstance;</span><br><span class="line">import org.activiti.engine.task.Task;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"> </span><br><span class="line">public <span class="keyword">class</span> AssignTest3 {</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取默认流程引擎实例，会自动读取activiti.cfg.xml文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ProcessEngine processEngine=<span class="module-access"><span class="module"><span class="identifier">ProcessEngines</span>.</span></span>get<span class="constructor">DefaultProcessEngine()</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 部署流程定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void deploy<span class="literal">()</span>{</span><br><span class="line">        Deployment deployment=processEngine.get<span class="constructor">RepositoryService()</span> <span class="comment">// 获取部署相关Service</span></span><br><span class="line">                .create<span class="constructor">Deployment()</span> <span class="comment">// 创建部署</span></span><br><span class="line">                .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/StudentLeaveProcess7.bpmn"</span>)</span> <span class="comment">// 加载资源文件</span></span><br><span class="line">                .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/StudentLeaveProcess7.png"</span>)</span> <span class="comment">// 加载资源文件</span></span><br><span class="line">                .name(<span class="string">"学生请假流程6"</span>) <span class="comment">// 流程名称</span></span><br><span class="line">                .deploy<span class="literal">()</span>; <span class="comment">// 部署</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署ID:"</span>+deployment.get<span class="constructor">Id()</span>); </span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署Name:"</span>+deployment.get<span class="constructor">Name()</span>);</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动流程实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void start<span class="literal">()</span>{</span><br><span class="line">        ProcessInstance pi=processEngine.get<span class="constructor">RuntimeService()</span> <span class="comment">// 运行时Service</span></span><br><span class="line">            .start<span class="constructor">ProcessInstanceByKey(<span class="string">"studentLevaeProcess7"</span>)</span>; <span class="comment">// 流程定义表的KEY字段值</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+pi.get<span class="constructor">Id()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程定义ID:"</span>+pi.get<span class="constructor">ProcessDefinitionId()</span>); </span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void find<span class="constructor">Task()</span>{</span><br><span class="line">        List&lt;Task&gt; taskList=processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .create<span class="constructor">TaskQuery()</span> <span class="comment">// 创建任务查询</span></span><br><span class="line">            .task<span class="constructor">Assignee(<span class="string">"李四"</span>)</span> <span class="comment">// 指定某个人</span></span><br><span class="line">            .<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">for</span>(Task task:taskList){</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务ID:"</span>+task.get<span class="constructor">Id()</span>); </span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务名称:"</span>+task.get<span class="constructor">Name()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务创建时间:"</span>+task.get<span class="constructor">CreateTime()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务委派人:"</span>+task.get<span class="constructor">Assignee()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+task.get<span class="constructor">ProcessInstanceId()</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void complete<span class="constructor">Task()</span>{</span><br><span class="line">        processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .complete(<span class="string">"290004"</span>);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="来源地址"><a href="#来源地址" class="headerlink" title="来源地址"></a>来源地址</h1><blockquote>
<p><a href="http://blog.java1234.com/blog/articles/84.html">java1234.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Activti5</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti5 之多用户任务分配</title>
    <url>/2021/06/04/41-Activiti5%E4%B9%8B%E5%A4%9A%E7%94%A8%E6%88%B7%E4%BB%BB%E5%8A%A1%E5%88%86%E9%85%8D/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/41.jpg"></p>
</span>

<span id="more"></span>

<h1 id="Activiti5之多用户任务分配"><a href="#Activiti5之多用户任务分配" class="headerlink" title="Activiti5之多用户任务分配"></a>Activiti5 之多用户任务分配</h1><blockquote>
<p>我们在开发的时候，有一种情况是这样的，</p>
</blockquote>
<blockquote>
<p>我们有一个任务，可以让多个用户中的任何一个人办理即可，比如某个审批任务，</p>
</blockquote>
<blockquote>
<p>张三，李四，王五他们中的任何一人办理下都行，这时候，我们用到多用户任务分配。</p>
</blockquote>
<h1 id="方式一，直接流程图配置中写死"><a href="#方式一，直接流程图配置中写死" class="headerlink" title="方式一，直接流程图配置中写死"></a>方式一，直接流程图配置中写死</h1><p><img data-src="/images/activiti/activiti5/user/4.jpg"></p>
<ul>
<li><p>这里我们分配三个人 中间用逗号隔开。</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">import java.util.List;</span><br><span class="line"> </span><br><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.activiti.engine.ProcessEngines;</span><br><span class="line">import org.activiti.engine.repository.Deployment;</span><br><span class="line">import org.activiti.engine.runtime.ProcessInstance;</span><br><span class="line">import org.activiti.engine.task.Task;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"> </span><br><span class="line">public <span class="keyword">class</span> AssignTest1 {</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取默认流程引擎实例，会自动读取activiti.cfg.xml文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ProcessEngine processEngine=<span class="module-access"><span class="module"><span class="identifier">ProcessEngines</span>.</span></span>get<span class="constructor">DefaultProcessEngine()</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 部署流程定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void deploy<span class="literal">()</span>{</span><br><span class="line">        Deployment deployment=processEngine.get<span class="constructor">RepositoryService()</span> <span class="comment">// 获取部署相关Service</span></span><br><span class="line">                .create<span class="constructor">Deployment()</span> <span class="comment">// 创建部署</span></span><br><span class="line">                .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/multiUserProcess.bpmn"</span>)</span> <span class="comment">// 加载资源文件</span></span><br><span class="line">                .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/multiUserProcess.png"</span>)</span> <span class="comment">// 加载资源文件</span></span><br><span class="line">                .name(<span class="string">"学生请假流程5"</span>) <span class="comment">// 流程名称</span></span><br><span class="line">                .deploy<span class="literal">()</span>; <span class="comment">// 部署</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署ID:"</span>+deployment.get<span class="constructor">Id()</span>); </span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署Name:"</span>+deployment.get<span class="constructor">Name()</span>);</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动流程实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void start<span class="literal">()</span>{</span><br><span class="line">        ProcessInstance pi=processEngine.get<span class="constructor">RuntimeService()</span> <span class="comment">// 运行时Service</span></span><br><span class="line">            .start<span class="constructor">ProcessInstanceByKey(<span class="string">"multiUserProcess"</span>)</span>; <span class="comment">// 流程定义表的KEY字段值</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+pi.get<span class="constructor">Id()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程定义ID:"</span>+pi.get<span class="constructor">ProcessDefinitionId()</span>); </span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void find<span class="constructor">Task()</span>{</span><br><span class="line">        List&lt;Task&gt; taskList=processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .create<span class="constructor">TaskQuery()</span> <span class="comment">// 创建任务查询</span></span><br><span class="line">            <span class="comment">//.taskAssignee("李四") // 指定某个人</span></span><br><span class="line">            .task<span class="constructor">CandidateUser(<span class="string">"张三"</span>)</span> <span class="comment">// 候选人查询</span></span><br><span class="line">            .<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">for</span>(Task task:taskList){</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务ID:"</span>+task.get<span class="constructor">Id()</span>); </span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务名称:"</span>+task.get<span class="constructor">Name()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务创建时间:"</span>+task.get<span class="constructor">CreateTime()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务委派人:"</span>+task.get<span class="constructor">Assignee()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+task.get<span class="constructor">ProcessInstanceId()</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void complete<span class="constructor">Task()</span>{</span><br><span class="line">        processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .complete(<span class="string">"305004"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>这里有几点说明下：</p>
</li>
<li><ul>
<li>1，任务查询的时候 ，我们用 taskCandidateUser 候选人查询方法，不能用 taskAssignee </li>
</ul>
</li>
<li><ul>
<li>2，启动流程实例后，我们在 act_ru_identitylink 表，<br><img data-src="/images/activiti/activiti5/user/5.jpg"></li>
</ul>
</li>
<li><p>我们可以看到 activit 的设计很巧妙， 在流程图里配置的用户 全是参与者 participant，然后还有一份候选人 candidate，</p>
</li>
<li><p>候选人绑定任务 id，参与者绑定流程实例 ID，这里我们可以通过 Activiti 的接口来增加或者减少候选人，大家自行查下文档。</p>
</li>
<li><p>我们用张三，李四，王五中的任何一人，都能查询到任务，最后任何一人完整任务即可；</p>
</li>
</ul>
<h2 id="方式二：使用流程变量"><a href="#方式二：使用流程变量" class="headerlink" title="方式二：使用流程变量"></a>方式二：使用流程变量</h2><p><img data-src="/images/activiti/activiti5/user/6.jpg"></p>
<ul>
<li><p>我们启动流程的时候设置流程变量的值，其他的和上面一样，</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"> </span><br><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.activiti.engine.ProcessEngines;</span><br><span class="line">import org.activiti.engine.repository.Deployment;</span><br><span class="line">import org.activiti.engine.runtime.ProcessInstance;</span><br><span class="line">import org.activiti.engine.task.Task;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"> </span><br><span class="line">public <span class="keyword">class</span> AssignTest2 {</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取默认流程引擎实例，会自动读取activiti.cfg.xml文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ProcessEngine processEngine=<span class="module-access"><span class="module"><span class="identifier">ProcessEngines</span>.</span></span>get<span class="constructor">DefaultProcessEngine()</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 部署流程定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void deploy<span class="literal">()</span>{</span><br><span class="line">        Deployment deployment=processEngine.get<span class="constructor">RepositoryService()</span> <span class="comment">// 获取部署相关Service</span></span><br><span class="line">                .create<span class="constructor">Deployment()</span> <span class="comment">// 创建部署</span></span><br><span class="line">                .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/multiUserProcess2.bpmn"</span>)</span> <span class="comment">// 加载资源文件</span></span><br><span class="line">                .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/multiUserProcess2.png"</span>)</span> <span class="comment">// 加载资源文件</span></span><br><span class="line">                .name(<span class="string">"学生请假流程5"</span>) <span class="comment">// 流程名称</span></span><br><span class="line">                .deploy<span class="literal">()</span>; <span class="comment">// 部署</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署ID:"</span>+deployment.get<span class="constructor">Id()</span>); </span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署Name:"</span>+deployment.get<span class="constructor">Name()</span>);</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动流程实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void start<span class="literal">()</span>{</span><br><span class="line">        Map&lt;String,Object&gt; variables=<span class="keyword">new</span> HashMap&lt;String,Object&gt;<span class="literal">()</span>;</span><br><span class="line">        variables.put(<span class="string">"userIds"</span>, <span class="string">"张三,李四,王五"</span>);</span><br><span class="line">        ProcessInstance pi=processEngine.get<span class="constructor">RuntimeService()</span> <span class="comment">// 运行时Service</span></span><br><span class="line">            .start<span class="constructor">ProcessInstanceByKey(<span class="string">"multiUserProcess2"</span>,<span class="params">variables</span>)</span>; <span class="comment">// 流程定义表的KEY字段值</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+pi.get<span class="constructor">Id()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程定义ID:"</span>+pi.get<span class="constructor">ProcessDefinitionId()</span>); </span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void find<span class="constructor">Task()</span>{</span><br><span class="line">        List&lt;Task&gt; taskList=processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .create<span class="constructor">TaskQuery()</span> <span class="comment">// 创建任务查询</span></span><br><span class="line">            <span class="comment">//.taskAssignee("李四") // 指定某个人</span></span><br><span class="line">            .task<span class="constructor">CandidateUser(<span class="string">"张三"</span>)</span> <span class="comment">// 候选人查询</span></span><br><span class="line">            .<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">for</span>(Task task:taskList){</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务ID:"</span>+task.get<span class="constructor">Id()</span>); </span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务名称:"</span>+task.get<span class="constructor">Name()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务创建时间:"</span>+task.get<span class="constructor">CreateTime()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务委派人:"</span>+task.get<span class="constructor">Assignee()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+task.get<span class="constructor">ProcessInstanceId()</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void complete<span class="constructor">Task()</span>{</span><br><span class="line">        processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .complete(<span class="string">"317505"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="分配方式三-TaskListener监听实现"><a href="#分配方式三-TaskListener监听实现" class="headerlink" title="分配方式三 TaskListener监听实现"></a>分配方式三 TaskListener 监听实现</h2><ul>
<li>我们定义一个监听类 MyTaskListener 实现 TaskListener 接口：</li>
</ul>
<figure class="highlight d"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.activiti.engine.<span class="built_in">delegate</span>.DelegateTask;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.<span class="built_in">delegate</span>.TaskListener;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> MyTaskListener implements TaskListener{</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> notify(DelegateTask delegateTask) {</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        delegateTask.addCandidateUser(<span class="string">"张三"</span>);</span><br><span class="line">        delegateTask.addCandidateUser(<span class="string">"李四"</span>);</span><br><span class="line">        delegateTask.addCandidateUser(<span class="string">"王五"</span>);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="/images/activiti/activiti5/user/7.jpg"></p>
<ul>
<li><p>这边指定下 定义的类</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">import java.util.List;</span><br><span class="line"> </span><br><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.activiti.engine.ProcessEngines;</span><br><span class="line">import org.activiti.engine.repository.Deployment;</span><br><span class="line">import org.activiti.engine.runtime.ProcessInstance;</span><br><span class="line">import org.activiti.engine.task.Task;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"> </span><br><span class="line">public <span class="keyword">class</span> AssignTest3 {</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取默认流程引擎实例，会自动读取activiti.cfg.xml文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ProcessEngine processEngine=<span class="module-access"><span class="module"><span class="identifier">ProcessEngines</span>.</span></span>get<span class="constructor">DefaultProcessEngine()</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 部署流程定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void deploy<span class="literal">()</span>{</span><br><span class="line">        Deployment deployment=processEngine.get<span class="constructor">RepositoryService()</span> <span class="comment">// 获取部署相关Service</span></span><br><span class="line">                .create<span class="constructor">Deployment()</span> <span class="comment">// 创建部署</span></span><br><span class="line">                .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/multiUserProcess3.bpmn"</span>)</span> <span class="comment">// 加载资源文件</span></span><br><span class="line">                .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/multiUserProcess3.png"</span>)</span> <span class="comment">// 加载资源文件</span></span><br><span class="line">                .name(<span class="string">"学生请假流程5"</span>) <span class="comment">// 流程名称</span></span><br><span class="line">                .deploy<span class="literal">()</span>; <span class="comment">// 部署</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署ID:"</span>+deployment.get<span class="constructor">Id()</span>); </span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署Name:"</span>+deployment.get<span class="constructor">Name()</span>);</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动流程实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void start<span class="literal">()</span>{</span><br><span class="line">        ProcessInstance pi=processEngine.get<span class="constructor">RuntimeService()</span> <span class="comment">// 运行时Service</span></span><br><span class="line">            .start<span class="constructor">ProcessInstanceByKey(<span class="string">"multiUserProcess3"</span>)</span>; <span class="comment">// 流程定义表的KEY字段值</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+pi.get<span class="constructor">Id()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程定义ID:"</span>+pi.get<span class="constructor">ProcessDefinitionId()</span>); </span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void find<span class="constructor">Task()</span>{</span><br><span class="line">        List&lt;Task&gt; taskList=processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .create<span class="constructor">TaskQuery()</span> <span class="comment">// 创建任务查询</span></span><br><span class="line">            <span class="comment">//.taskAssignee("李四") // 指定某个人</span></span><br><span class="line">            .task<span class="constructor">CandidateUser(<span class="string">"张三"</span>)</span> <span class="comment">// 候选人查询</span></span><br><span class="line">            .<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">for</span>(Task task:taskList){</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务ID:"</span>+task.get<span class="constructor">Id()</span>); </span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务名称:"</span>+task.get<span class="constructor">Name()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务创建时间:"</span>+task.get<span class="constructor">CreateTime()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务委派人:"</span>+task.get<span class="constructor">Assignee()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+task.get<span class="constructor">ProcessInstanceId()</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void complete<span class="constructor">Task()</span>{</span><br><span class="line">        processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .complete(<span class="string">"325004"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="来源地址"><a href="#来源地址" class="headerlink" title="来源地址"></a>来源地址</h1><blockquote>
<p><a href="http://blog.java1234.com/blog/articles/84.html">java1234.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Activti5</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti5 之内置用户组设计表以及 IdentityService</title>
    <url>/2021/06/04/42-Activiti5%E4%B9%8B%E5%86%85%E7%BD%AE%E7%94%A8%E6%88%B7%E7%BB%84%E8%AE%BE%E8%AE%A1%E8%A1%A8%E4%BB%A5%E5%8F%8AIdentityService/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/42.jpg"></p>
</span>

<span id="more"></span>

<h1 id="Activiti之内置用户组设计表"><a href="#Activiti之内置用户组设计表" class="headerlink" title="Activiti之内置用户组设计表"></a>Activiti 之内置用户组设计表</h1><ul>
<li><p>Activiti 给我们提供了一套内置的用户和组设计表；</p>
</li>
<li><p>用户和组 (或者叫做角色)，多对多关联，通过关联表实现；</p>
</li>
<li><p>我们来看下，<br><img data-src="/images/activiti/activiti5/user/8.png"></p>
</li>
<li><p>四个表，</p>
  <figure class="highlight asciidoc"><table><tbody><tr><td class="code"><pre><span class="line">act<span class="emphasis">_id_group 用户组表；</span></span><br><span class="line"><span class="emphasis">act_id_user 用户表；</span></span><br><span class="line"><span class="emphasis">act_id_membership 用户与组的关联表，用来实现多对多；</span></span><br><span class="line"><span class="emphasis">act_id_</span>info 用户信息表；</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>首先来看下用户表：<br><img data-src="/images/activiti/activiti5/user/9.jpg"></p>
</li>
<li><p>这里的设计可能和我们想象的不一样，比如_ID，字符串类型 我们直接可以把他当作用户名 </p>
</li>
<li><p>FIRST_ LAST_ 是英文命名习惯  EMAIL_ PWD 邮箱 密码 字段 等等。</p>
</li>
<li><p>接下来看下组表：<br><img data-src="/images/activiti/activiti5/user/10.jpg"></p>
</li>
<li><p>ID_  依然是字符串类型 还有 NAME_ TYPE_字段</p>
</li>
<li><p>再看下重要的关联表：<br><img data-src="/images/activiti/activiti5/user/11.jpg"></p>
</li>
<li><p>只有两个字段 USER_ID_ 和 GROUP_ID_ 分别关联用户表的主键和组表的主键；</p>
</li>
<li><p>我们看下架构设计：<br><img data-src="/images/activiti/activiti5/user/12.jpg"></p>
</li>
<li><p>最后一个是用户信息表，主要是用来扩展用户信息，以及可以实现组织机构层次关系，比如雇员领导用户设计；<br><img data-src="/images/activiti/activiti5/user/13.jpg"></p>
</li>
<li><p>这里 USE_ID_ 可以关联用户表的主键 KEY_ VALUE_可以扩展用户信息（虽然这个是一种冗余设计），PARENT_ID 可以实现层次设计；</p>
</li>
<li><p>这个是 activiti 给我们内置的一个用户组设计，</p>
</li>
<li><p>这里说明下：正常的企业级项目都有自己的组织机构用户权限设置表，所以一般不会用到内置的；</p>
</li>
<li><p>但是假如一个很小的系统，例如 学生请假系统 就那么几十个用户，两三中角色，那我们就可以用内置的，用内置的更加方便；</p>
</li>
<li><p>Activiti 提供了一个 Service 来专门操作用户组表，那就是 IdentityService 身份信息 Service</p>
</li>
<li><p>我们可以用过 IdentityService 来添加修改用户信息，组信息，也可以删除用户信息，组信息，以及维护他们的关联关系；</p>
  <figure class="highlight typescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.activiti.engine.IdentityService;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.ProcessEngine;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.ProcessEngines;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.identity.Group;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.identity.User;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.impl.persistence.entity.GroupEntity;</span><br><span class="line"><span class="keyword">import</span> org.activiti.engine.impl.persistence.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdentityTest</span> </span>{</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取默认流程引擎实例，会自动读取activiti.cfg.xml文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ProcessEngine processEngine=ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">testSaveUser</span>(<span class="params"></span>)</span>{</span><br><span class="line">        IdentityService identityService=processEngine.getIdentityService();</span><br><span class="line">        User user1=<span class="keyword">new</span> UserEntity(); <span class="comment">// 实例化用户实体</span></span><br><span class="line">        user1.setId(<span class="string">"lisi"</span>);</span><br><span class="line">        user1.setEmail(<span class="string">"234@qq.com"</span>);</span><br><span class="line">        user1.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        identityService.saveUser(user1); <span class="comment">// 添加用户</span></span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试删除用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">testDeleteUser</span>(<span class="params"></span>)</span>{</span><br><span class="line">        IdentityService identityService=processEngine.getIdentityService();</span><br><span class="line">        identityService.deleteUser(<span class="string">"zhangsan"</span>); </span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试添加组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">testSaveGroup</span>(<span class="params"></span>)</span>{</span><br><span class="line">        IdentityService identityService=processEngine.getIdentityService();</span><br><span class="line">        Group group=<span class="keyword">new</span> GroupEntity(); <span class="comment">// 实例化组实体</span></span><br><span class="line">        group.setId(<span class="string">"test"</span>);</span><br><span class="line">        identityService.saveGroup(group);</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试删除组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">testDeleteGroup</span>(<span class="params"></span>)</span>{</span><br><span class="line">        IdentityService identityService=processEngine.getIdentityService();</span><br><span class="line">        identityService.deleteGroup(<span class="string">"test"</span>);</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试添加用户和组关联关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">testSaveMembership</span>(<span class="params"></span>)</span>{</span><br><span class="line">        IdentityService identityService=processEngine.getIdentityService();</span><br><span class="line">        identityService.createMembership(<span class="string">"lisi"</span>, <span class="string">"test"</span>);</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试删除用户和组关联关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">testDeleteMembership</span>(<span class="params"></span>)</span>{</span><br><span class="line">        IdentityService identityService=processEngine.getIdentityService();</span><br><span class="line">        identityService.deleteMembership(<span class="string">"lisi"</span>, <span class="string">"test"</span>);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="来源地址"><a href="#来源地址" class="headerlink" title="来源地址"></a>来源地址</h1><blockquote>
<p><a href="http://blog.java1234.com/blog/articles/84.html">java1234.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Activti5</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti5 之组任务分配</title>
    <url>/2021/06/04/43-Activiti5%E4%B9%8B%E7%BB%84%E4%BB%BB%E5%8A%A1%E5%88%86%E9%85%8D/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/43.jpg"></p>
</span>

<span id="more"></span>

<h1 id="Activiti5之组任务分配"><a href="#Activiti5之组任务分配" class="headerlink" title="Activiti5之组任务分配"></a>Activiti5 之组任务分配</h1><ul>
<li>前面我们讲到了 activiti 内置的用户和组的表设计，我们现在给下数据，然后来讲解组任务分配；</li>
<li>用户表：<br><img data-src="/images/activiti/activiti5/user/14.jpg"></li>
<li>角色表：<br><img data-src="/images/activiti/activiti5/user/15.jpg"></li>
<li>用户和角色关系表：<br><img data-src="/images/activiti/activiti5/user/16.jpg"></li>
<li>这里的话 lisi,zhangli 用户都是 dev 开发组角色；</li>
<li>接下来我们说下组任务分配的概念，我们在实际业务开发过程中，某一个审批任务节点可以分配一个角色（或者叫做组），</li>
<li>然后属于这个角色的任何一个用户都可以去完成这个任务节点的审批；</li>
</ul>
<h2 id="方式一，直接流程图配置中写死"><a href="#方式一，直接流程图配置中写死" class="headerlink" title="方式一，直接流程图配置中写死"></a>方式一，直接流程图配置中写死</h2><ul>
<li>首先来配置下流程图设计：<br><img data-src="/images/activiti/activiti5/user/17.jpg"></li>
<li>这里我们设置 dev 角色或者叫做组  开发角色可以审批这个节点；</li>
<li>只要是属于 dev 角色的用户，都可以查询到任务；</li>
<li>这里说明一点 查询候选人 依然要用 taskCandidateUser</li>
<li> 这里 zhangsan ,lisi 都属于 dev 角色，所以这两个人当中任何一个人都能查询到任务，任何一个人办理都行；</li>
</ul>
<pre><code><figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">import java.util.List;</span><br><span class="line"> </span><br><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.activiti.engine.ProcessEngines;</span><br><span class="line">import org.activiti.engine.repository.Deployment;</span><br><span class="line">import org.activiti.engine.runtime.ProcessInstance;</span><br><span class="line">import org.activiti.engine.task.Task;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"> </span><br><span class="line">public <span class="keyword">class</span> AssignTest1 {</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取默认流程引擎实例，会自动读取activiti.cfg.xml文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ProcessEngine processEngine=<span class="module-access"><span class="module"><span class="identifier">ProcessEngines</span>.</span></span>get<span class="constructor">DefaultProcessEngine()</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 部署流程定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void deploy<span class="literal">()</span>{</span><br><span class="line">        Deployment deployment=processEngine.get<span class="constructor">RepositoryService()</span> <span class="comment">// 获取部署相关Service</span></span><br><span class="line">                .create<span class="constructor">Deployment()</span> <span class="comment">// 创建部署</span></span><br><span class="line">                .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/GroupProcess.bpmn"</span>)</span> <span class="comment">// 加载资源文件</span></span><br><span class="line">                .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/GroupProcess.png"</span>)</span> <span class="comment">// 加载资源文件</span></span><br><span class="line">                .name(<span class="string">"学生请假流程"</span>) <span class="comment">// 流程名称</span></span><br><span class="line">                .deploy<span class="literal">()</span>; <span class="comment">// 部署</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署ID:"</span>+deployment.get<span class="constructor">Id()</span>); </span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署Name:"</span>+deployment.get<span class="constructor">Name()</span>);</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动流程实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void start<span class="literal">()</span>{</span><br><span class="line">        ProcessInstance pi=processEngine.get<span class="constructor">RuntimeService()</span> <span class="comment">// 运行时Service</span></span><br><span class="line">            .start<span class="constructor">ProcessInstanceByKey(<span class="string">"groupProcess"</span>)</span>; <span class="comment">// 流程定义表的KEY字段值</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+pi.get<span class="constructor">Id()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程定义ID:"</span>+pi.get<span class="constructor">ProcessDefinitionId()</span>); </span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void find<span class="constructor">Task()</span>{</span><br><span class="line">        List&lt;Task&gt; taskList=processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .create<span class="constructor">TaskQuery()</span> <span class="comment">// 创建任务查询</span></span><br><span class="line">            <span class="comment">//.taskAssignee("李四") // 指定某个人</span></span><br><span class="line">            .task<span class="constructor">CandidateUser(<span class="string">"zhangsan"</span>)</span> <span class="comment">// 指定候选人</span></span><br><span class="line">            .<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">for</span>(Task task:taskList){</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务ID:"</span>+task.get<span class="constructor">Id()</span>); </span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务名称:"</span>+task.get<span class="constructor">Name()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务创建时间:"</span>+task.get<span class="constructor">CreateTime()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务委派人:"</span>+task.get<span class="constructor">Assignee()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+task.get<span class="constructor">ProcessInstanceId()</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void complete<span class="constructor">Task()</span>{</span><br><span class="line">        processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .complete(<span class="string">"347504"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</code></pre>
<h2 id="方式二：使用流程变量"><a href="#方式二：使用流程变量" class="headerlink" title="方式二：使用流程变量"></a>方式二：使用流程变量</h2><ul>
<li><p>我们设置下流程变量<br><img data-src="/images/activiti/activiti5/user/18.jpg"></p>
</li>
<li><p>我们启动流程的设置具体的值：</p>
  <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"> </span><br><span class="line">import org.activiti.engine.ProcessEngine;</span><br><span class="line">import org.activiti.engine.ProcessEngines;</span><br><span class="line">import org.activiti.engine.repository.Deployment;</span><br><span class="line">import org.activiti.engine.runtime.ProcessInstance;</span><br><span class="line">import org.activiti.engine.task.Task;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"> </span><br><span class="line">public <span class="keyword">class</span> AssignTest2 {</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取默认流程引擎实例，会自动读取activiti.cfg.xml文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ProcessEngine processEngine=<span class="module-access"><span class="module"><span class="identifier">ProcessEngines</span>.</span></span>get<span class="constructor">DefaultProcessEngine()</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 部署流程定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void deploy<span class="literal">()</span>{</span><br><span class="line">        Deployment deployment=processEngine.get<span class="constructor">RepositoryService()</span> <span class="comment">// 获取部署相关Service</span></span><br><span class="line">                .create<span class="constructor">Deployment()</span> <span class="comment">// 创建部署</span></span><br><span class="line">                .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/GroupProcess2.bpmn"</span>)</span> <span class="comment">// 加载资源文件</span></span><br><span class="line">                .add<span class="constructor">ClasspathResource(<span class="string">"diagrams/GroupProcess2.png"</span>)</span> <span class="comment">// 加载资源文件</span></span><br><span class="line">                .name(<span class="string">"学生请假流程"</span>) <span class="comment">// 流程名称</span></span><br><span class="line">                .deploy<span class="literal">()</span>; <span class="comment">// 部署</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署ID:"</span>+deployment.get<span class="constructor">Id()</span>); </span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程部署Name:"</span>+deployment.get<span class="constructor">Name()</span>);</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动流程实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void start<span class="literal">()</span>{</span><br><span class="line">        Map&lt;String,Object&gt; variables=<span class="keyword">new</span> HashMap&lt;String,Object&gt;<span class="literal">()</span>;</span><br><span class="line">        variables.put(<span class="string">"groupId"</span>, <span class="string">"dev"</span>);</span><br><span class="line">        ProcessInstance pi=processEngine.get<span class="constructor">RuntimeService()</span> <span class="comment">// 运行时Service</span></span><br><span class="line">            .start<span class="constructor">ProcessInstanceByKey(<span class="string">"groupProcess2"</span>,<span class="params">variables</span>)</span>; <span class="comment">// 流程定义表的KEY字段值</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+pi.get<span class="constructor">Id()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程定义ID:"</span>+pi.get<span class="constructor">ProcessDefinitionId()</span>); </span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void find<span class="constructor">Task()</span>{</span><br><span class="line">        List&lt;Task&gt; taskList=processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .create<span class="constructor">TaskQuery()</span> <span class="comment">// 创建任务查询</span></span><br><span class="line">            <span class="comment">//.taskAssignee("李四") // 指定某个人</span></span><br><span class="line">            .task<span class="constructor">CandidateUser(<span class="string">"zhangsan"</span>)</span> <span class="comment">// 指定候选人</span></span><br><span class="line">            .<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">for</span>(Task task:taskList){</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务ID:"</span>+task.get<span class="constructor">Id()</span>); </span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务名称:"</span>+task.get<span class="constructor">Name()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务创建时间:"</span>+task.get<span class="constructor">CreateTime()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"任务委派人:"</span>+task.get<span class="constructor">Assignee()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"流程实例ID:"</span>+task.get<span class="constructor">ProcessInstanceId()</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public void complete<span class="constructor">Task()</span>{</span><br><span class="line">        processEngine.get<span class="constructor">TaskService()</span> <span class="comment">// 任务相关Service</span></span><br><span class="line">            .complete(<span class="string">"355005"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h1 id="来源地址"><a href="#来源地址" class="headerlink" title="来源地址"></a>来源地址 </h1></li>
</ul>
<blockquote>
<p><a href="http://blog.java1234.com/blog/articles/84.html">java1234.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Activti5</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti5 之 25 张表</title>
    <url>/2021/06/10/44-Activiti5%E4%B9%8B25%E5%BC%A0%E8%A1%A8/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/44.jpg"></p>
</span>

<span id="more"></span>

<h1 id="Activiti5之25张表"><a href="#Activiti5之25张表" class="headerlink" title="Activiti5之25张表"></a>Activiti5 之 25 张表</h1><ul>
<li><strong>act_ge_* </strong></li>
<li><ul>
<li>表示通用数据，用于不同场景下，如存放资源文件。</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>act _evt_log 事件日志表</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li> act_ge_bytearray&nbsp; 存放流程的信息和图片信息</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li> act_ge_property&nbsp;&nbsp;&nbsp; 属性数据表，存储整个流程引擎级别的数据，初始化表结构时，会默认插入三条记录 (记录的是使用的流程引擎的版本)</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><b>act_re_* </b></li>
<li><ul>
<li>表示流程的基本信息表：包含了流程定义信息 、流程静态资源（图片、规则等）</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>act_re_deployment&nbsp;&nbsp;&nbsp; 部署信息表</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li> act_re_model&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 流程设计模型表</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li> act_re_procdef&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 流程定义数据表</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><b> act_ru_* </b></li>
<li><ul>
<li>表示运行时的表，用户任务、变量、流程实例（ProcessInstance），用户的任务节点信息等运行时的数据，只有在执行中的流程才会有记录，如果该流程执行完毕后，会删除对应的数据。</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>act_ru_event_subscr&nbsp;&nbsp; 监听信息表（几乎用不上）</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>act_ru_execution&nbsp;&nbsp;&nbsp;&nbsp; 运行时流程执行实例表</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li> act_ru_identitylink&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 运行时流程人员表，主要存储任务节点与参与者相关信息</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li> act_ru_job&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 运行时定时任务数据表（几乎用不上）</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>act_ru_task&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 运行时任务节点表</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li> act_ru_variable&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 运行时流程变量数据表</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><b> act_id_* </b></li>
<li><ul>
<li>表示用户信息表，这些表包含身份信息，比如用户、组。（基本上是用不到的下边的这些表，因为每个系统都有自己对应的用户信息表）</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>act_id_group&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用户组信息表（和角色或者部门是一样的感觉）</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>act_id_info&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用户扩展信息表</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li> act_id_membership&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用户与用户组关系信息表</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li> act_id_user &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用户信息表</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li> act_procdef_info&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用户扩展信息表</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><b> act_hi_* 历史数据表，</b></li>
<li><ul>
<li>比如历史流程实例，变量，任务等，只要流程开启了，产生节点任务就会有数据，如果某个任务节点结束了，不会删除对应的数据</li>
</ul>
</li>
<li><ul>
<li><ul>
<li> act_hi_actinst&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 历史节点表</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li> act_hi_attachment&nbsp; 历史附件表（几乎用不上）</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>act_hi_comment&nbsp;&nbsp;&nbsp; 历史意见表（几乎用不上）</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>act_hi_detail&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 历史详情表，提供历史变量的查询</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li> act_hi_identitylink&nbsp; 历史流程人员表</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li> act_hi_procinst&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 历史流程实例表 &nbsp;</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>act_hi_taskinst&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 历史流程任务表</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li> act_hi_varinst&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 历史变量表</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="来源地址"><a href="#来源地址" class="headerlink" title="来源地址"></a>来源地址</h1><blockquote>
<p><a href="https://blog.csdn.net/qq_39188676/article/details/105346227">魅魍魉</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Activti5</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti5 之 Springboot</title>
    <url>/2021/06/10/45-Activiti5%E4%B9%8BSpringboot/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/45.jpg"></p>
</span>

<span id="more"></span>

<h1 id="Activiti5之Springboot"><a href="#Activiti5之Springboot" class="headerlink" title="Activiti5之Springboot"></a>Activiti5 之 Springboot</h1><blockquote>
<p>pom.xml</p>
</blockquote>
<pre><code><figure class="highlight dust"><table><tbody><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.imooc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>activiti5<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">activiti.version</span>&gt;</span>5.22.0<span class="tag">&lt;/<span class="name">activiti.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--spring activiti start--&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring-boot-starter-basic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">{activiti.version}</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">{activiti.version}</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-rest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">{activiti.version}</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-diagram-rest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">{activiti.version}</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-simple-workflow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">{activiti.version}</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">{activiti.version}</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xmlgraphics<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>batik-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xmlgraphics<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>batik-css<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xmlgraphics<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>batik-svg-dom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xmlgraphics<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>batik-svggen<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-explorer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">{activiti.version}</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--spring activiti end--&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 读取解析yml配置 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>
</code></pre>
<blockquote>
<p>去掉 @SpringBootApplication (exclude = {SecurityAutoConfiguration.class})</p>
</blockquote>
<pre><code><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(exclude = {SecurityAutoConfiguration.class})</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activiti5Application</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(Activiti5Application.class, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</code></pre>
<blockquote>
<p>ActivitiConfig</p>
</blockquote>
<pre><code><figure class="highlight less"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">@Component</span></span><br><span class="line">public class ActivitiConfig implements ProcessEngineConfigurationConfigurer {</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Override</span></span><br><span class="line">    public void configure(SpringProcessEngineConfiguration processEngineConfiguration) {</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">processEngineConfiguration</span><span class="selector-class">.setActivityFontName</span>(<span class="string">"宋体"</span>);</span><br><span class="line">        <span class="selector-tag">processEngineConfiguration</span><span class="selector-class">.setLabelFontName</span>(<span class="string">"宋体"</span>);</span><br><span class="line">        <span class="selector-tag">processEngineConfiguration</span><span class="selector-class">.setAnnotationFontName</span>(<span class="string">"宋体"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">processEngineConfiguration</span><span class="selector-class">.setDbIdentityUsed</span>(false);</span><br><span class="line">        <span class="selector-tag">processEngineConfiguration</span><span class="selector-class">.setDatabaseSchemaUpdate</span>(<span class="string">"true"</span>);</span><br><span class="line">        <span class="selector-tag">processEngineConfiguration</span><span class="selector-class">.setDeploymentMode</span>(<span class="string">"never-fail"</span>);</span><br><span class="line">        <span class="selector-tag">processEngineConfiguration</span><span class="selector-class">.setDataSource</span>(dataSource);</span><br><span class="line">        <span class="selector-tag">processEngineConfiguration</span><span class="selector-class">.setHistoryLevel</span>(HistoryLevel.FULL);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</code></pre>
<blockquote>
<p>application.yml</p>
</blockquote>
<pre><code><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/activiti5?characterEncoding=UTF-8&amp;nullCatalogMeansCurrent=true&amp;serverTimezone=GMT&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">activiti:</span></span><br><span class="line">    <span class="attr">check-process-definitions:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">history-level:</span> <span class="string">full</span></span><br><span class="line">    <span class="attr">database-schema-update:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">deployment-mode:</span>  <span class="string">never-fail</span></span><br></pre></td></tr></tbody></table></figure>
</code></pre>
<blockquote>
<p>resources 下创建 processes 文件夹</p>
</blockquote>
<blockquote>
<p>测试</p>
</blockquote>
<pre><code><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Activiti5ApplicationTests</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RepositoryService repositoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads0</span><span class="params">()</span> </span>{</span><br><span class="line">        Deployment deploy = repositoryService.</span><br><span class="line">                createDeployment().addClasspathResource(<span class="string">"processes/1.bpmn"</span>).name(<span class="string">"八戒执行名称22222"</span>).deploy();</span><br><span class="line">        System.out.println(deploy.getName());</span><br><span class="line">    }</span><br><span class="line">}    </span><br></pre></td></tr></tbody></table></figure>
</code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Activti5</tag>
      </tags>
  </entry>
  <entry>
    <title>Activiti5 之整合 Activiti-UI</title>
    <url>/2021/06/10/46-Activiti5%E4%B9%8B%E6%95%B4%E5%90%88Activiti-UI/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/46.jpg"></p>
</span>

<span id="more"></span>

<h1 id="Activiti5之整合Activiti-UI"><a href="#Activiti5之整合Activiti-UI" class="headerlink" title="Activiti5之整合Activiti-UI"></a>Activiti5 之整合 Activiti-UI</h1><blockquote>
<p>在上一节整合了 springboot 之后</p>
</blockquote>
<blockquote>
<p>pom.xml</p>
</blockquote>
<pre><code><figure class="highlight dust"><table><tbody><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- Activiti 流程图 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-diagram-rest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">{activiti.version}</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Activiti 在线设计 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.activiti<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activiti-modeler<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">{activiti.version}</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>
</code></pre>
<blockquote>
<p>拷贝 Activiti-activiti-5.22.0\modules\activiti-webapp-explorer2\src\main\webapp,<br>Activiti-activiti-5.22.0\modules\activiti-webapp-explorer2\src\main\resources\stencilset.json<br>到项目 /resources/activiti-ui </p>
</blockquote>
<ul>
<li>diagram-viewer</li>
<li>editor-app </li>
<li>modeler.html </li>
<li>stencilset.json</li>
</ul>
<blockquote>
<p>Activiti-activiti-5.22.0\modules\activiti-modeler\src\main\java\org\activiti\rest\edit 进行拷贝</p>
</blockquote>
<ul>
<li>ModelEditorJsonRestResource #渲染页面查询模型 id 相关的数据；</li>
<li>ModelSaveRestResource #保存模型 (并不会部署);</li>
<li>StencilsetRestResource #寻找页面汉化字体；</li>
</ul>
<blockquote>
<p>修改访问路径</p>
</blockquote>
<pre><code><figure class="highlight tp"><table><tbody><tr><td class="code"><pre><span class="line">app-cfg.js</span><br><span class="line"></span><br><span class="line">ACTIVITI.<span class="keyword">CONFIG</span> = {</span><br><span class="line">    <span class="string">'contextRoot'</span> : <span class="string">'activiti-webapp-explorer2/service'</span>,</span><br><span class="line">};</span><br><span class="line"> </span><br><span class="line">改为 </span><br><span class="line"> </span><br><span class="line">ACTIVITI.<span class="keyword">CONFIG</span> = {</span><br><span class="line">    <span class="string">'contextRoot'</span> : <span class="string">'service'</span>,</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
</code></pre>
<blockquote>
<p>拷贝的文件统一增加访问前缀 @RequestMapping (“/service”)</p>
</blockquote>
<blockquote>
<p>增加入口访问 - 建一个控制器</p>
</blockquote>
<pre><code><figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@<span class="constructor">RequestMapping(<span class="string">"/activiti"</span>)</span></span><br><span class="line">public <span class="keyword">class</span> ActivitiController {</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建模型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @<span class="constructor">RequestMapping(<span class="string">"/create"</span>)</span></span><br><span class="line">    public void create(HttpServletRequest request, HttpServletResponse response) {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            ProcessEngine processEngine = <span class="module-access"><span class="module"><span class="identifier">ProcessEngines</span>.</span></span>get<span class="constructor">DefaultProcessEngine()</span>;</span><br><span class="line"></span><br><span class="line">            RepositoryService repositoryService = processEngine.get<span class="constructor">RepositoryService()</span>;</span><br><span class="line"></span><br><span class="line">            ObjectMapper objectMapper = <span class="keyword">new</span> <span class="constructor">ObjectMapper()</span>;</span><br><span class="line">            ObjectNode editorNode = objectMapper.create<span class="constructor">ObjectNode()</span>;</span><br><span class="line">            editorNode.put(<span class="string">"id"</span>, <span class="string">"canvas"</span>);</span><br><span class="line">            editorNode.put(<span class="string">"resourceId"</span>, <span class="string">"canvas"</span>);</span><br><span class="line">            ObjectNode stencilSetNode = objectMapper.create<span class="constructor">ObjectNode()</span>;</span><br><span class="line">            stencilSetNode.put(<span class="string">"namespace"</span>, <span class="string">"http://b3mn.org/stencilset/bpmn2.0#"</span>);</span><br><span class="line">            editorNode.put(<span class="string">"stencilset"</span>, stencilSetNode);</span><br><span class="line">            Model modelData = repositoryService.<span class="keyword">new</span><span class="constructor">Model()</span>;</span><br><span class="line">            </span><br><span class="line">            ObjectNode modelObjectNode = objectMapper.create<span class="constructor">ObjectNode()</span>;</span><br><span class="line">            modelObjectNode.put(ModelDataJsonConstants.MODEL_NAME, <span class="string">"创建模型"</span>);</span><br><span class="line">            modelObjectNode.put(ModelDataJsonConstants.MODEL_REVISION, <span class="number">1</span>);</span><br><span class="line">            String description = <span class="string">"创建模型"</span>;</span><br><span class="line">            modelObjectNode.put(ModelDataJsonConstants.MODEL_DESCRIPTION, description);</span><br><span class="line">            modelData.set<span class="constructor">MetaInfo(<span class="params">modelObjectNode</span>.<span class="params">toString</span>()</span>);</span><br><span class="line">            modelData.set<span class="constructor">Name(<span class="string">"创建模型"</span>)</span>;</span><br><span class="line">            modelData.set<span class="constructor">Key(<span class="string">"创建模型"</span>)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//跳转模型前端界面</span></span><br><span class="line">            repositoryService.save<span class="constructor">Model(<span class="params">modelData</span>)</span>;</span><br><span class="line">            repositoryService.add<span class="constructor">ModelEditorSource(<span class="params">modelData</span>.<span class="params">getId</span>()</span>, editorNode.<span class="keyword">to</span><span class="constructor">String()</span>.get<span class="constructor">Bytes(<span class="string">"utf-8"</span>)</span>);</span><br><span class="line">            response.send<span class="constructor">Redirect(<span class="params">request</span>.<span class="params">getContextPath</span>()</span> + <span class="string">"/activiti-ui/modeler.html?modelId="</span> + modelData.get<span class="constructor">Id()</span>);</span><br><span class="line">        } catch (Exception e) {</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"创建模型失败："</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</code></pre>
<blockquote>
<p>如果不想用权限 </p>
</blockquote>
<pre><code><figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">@SpringBootApplication(exclude = {SecurityAutoConfiguration<span class="selector-class">.class</span>,</span><br><span class="line">        org<span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.autoconfigure</span><span class="selector-class">.security</span><span class="selector-class">.servlet</span><span class="selector-class">.SecurityAutoConfiguration</span><span class="selector-class">.class</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>
</code></pre>
<blockquote>
<p>增加内存用户权限</p>
</blockquote>
<pre><code><figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public <span class="keyword">class</span> SpringSecuityConfiguration {</span><br><span class="line">    <span class="keyword">private</span> Logger logger = <span class="module-access"><span class="module"><span class="identifier">LoggerFactory</span>.</span></span>get<span class="constructor">Logger(SpringSecuityConfiguration.<span class="params">class</span>)</span>;</span><br><span class="line">    @Bean</span><br><span class="line">    public UserDetailsService my<span class="constructor">UserDetailsService()</span> {</span><br><span class="line">        InMemoryUserDetailsManager inMemoryUserDetailsManager = <span class="keyword">new</span> <span class="constructor">InMemoryUserDetailsManager()</span>;</span><br><span class="line">        String<span class="literal">[]</span><span class="literal">[]</span> usersGroupsAndRoles = {</span><br><span class="line">                {<span class="string">"bob"</span>, <span class="string">"test"</span>, <span class="string">"ROLE_ACTIVITI_USER"</span>, <span class="string">"GROUP_activitiTeam"</span>},</span><br><span class="line">                {<span class="string">"bajie"</span>, <span class="string">"test"</span>, <span class="string">"ROLE_ACTIVITI_USER"</span>, <span class="string">"GROUP_activitiTeam"</span>},</span><br><span class="line">                {<span class="string">"wukong"</span>, <span class="string">"test"</span>, <span class="string">"ROLE_ACTIVITI_USER"</span>, <span class="string">"GROUP_activitiTeam"</span>},</span><br><span class="line">                {<span class="string">"other"</span>, <span class="string">"test"</span>, <span class="string">"ROLE_ACTIVITI_USER"</span>, <span class="string">"GROUP_otherTeam"</span>},</span><br><span class="line">                {<span class="string">"system"</span>, <span class="string">"test"</span>, <span class="string">"ROLE_ACTIVITI_USER"</span>},</span><br><span class="line">                {<span class="string">"admin"</span>, <span class="string">"test"</span>, <span class="string">"ROLE_ACTIVITI_ADMIN"</span>},</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String<span class="literal">[]</span> user : usersGroupsAndRoles) {</span><br><span class="line">            List&lt;String&gt; authoritiesStrings = <span class="keyword">as</span><span class="constructor">List(Arrays.<span class="params">copyOfRange</span>(<span class="params">user</span>, 2, <span class="params">user</span>.<span class="params">length</span>)</span>);</span><br><span class="line">            logger.info(<span class="string">"&gt; Registering new user: "</span> + user<span class="literal">[<span class="number">0</span>]</span> + <span class="string">" with the following Authorities["</span> + authoritiesStrings + <span class="string">"]"</span>);</span><br><span class="line">            inMemoryUserDetailsManager.create<span class="constructor">User(<span class="params">new</span> User(<span class="params">user</span>[0], <span class="params">passwordEncoder</span>()</span>.encode(user<span class="literal">[<span class="number">1</span>]</span>),</span><br><span class="line">                    authoritiesStrings.stream<span class="literal">()</span>.map(s -&gt; <span class="keyword">new</span> <span class="constructor">SimpleGrantedAuthority(<span class="params">s</span>)</span>).collect(<span class="module-access"><span class="module"><span class="identifier">Collectors</span>.</span></span><span class="keyword">to</span><span class="constructor">List()</span>)));</span><br><span class="line">        }</span><br><span class="line">        return inMemoryUserDetailsManager;</span><br><span class="line">    }</span><br><span class="line">    @Bean</span><br><span class="line">    public PasswordEncoder password<span class="constructor">Encoder()</span> {</span><br><span class="line">        return <span class="keyword">new</span> <span class="constructor">BCryptPasswordEncoder()</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</code></pre>
<blockquote>
<p>增加数据库用户权限</p>
</blockquote>
<pre><code><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserInfoBeanMapper userInfoBeanMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>{</span><br><span class="line"><span class="comment">//      String password = passwordEncoder().encode("test");</span></span><br><span class="line"><span class="comment">//      return new User(username, password,</span></span><br><span class="line"><span class="comment">//      AuthorityUtils.commaSeparatedStringToAuthorityList("ROLE_ACTIVITI_USER"));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取数据库判断用户</span></span><br><span class="line">        UserInfoBean userInfoBean = userInfoBeanMapper.selectByUserName(username);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(userInfoBean)) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"数据库中无此用户"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//如果用户是null抛出异常</span></span><br><span class="line">        <span class="comment">//返回异常</span></span><br><span class="line">        <span class="keyword">return</span> userInfoBean;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</code></pre>
<blockquote>
<p>增加额外的功能 - 比如自动保存模型并发布</p>
</blockquote>
<blockquote>
<blockquote>
<p>在 ModelSaveRestResource 方法中进行改造，前端传来标识，只保存还是保存并发布</p>
</blockquote>
</blockquote>
<figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">"true"</span>.equals(check)){</span><br><span class="line">       <span class="comment">//发布模型</span></span><br><span class="line">       ObjectNode modelNode = (ObjectNode) <span class="keyword">new</span> <span class="constructor">ObjectMapper()</span></span><br><span class="line">               .read<span class="constructor">Tree(<span class="params">repositoryService</span>.<span class="params">getModelEditorSource</span>(<span class="params">model</span>.<span class="params">getId</span>()</span>));</span><br><span class="line">       byte<span class="literal">[]</span> bpmnBytes = null;</span><br><span class="line"></span><br><span class="line">       BpmnModel bpmnModel = <span class="keyword">new</span> <span class="constructor">BpmnJsonConverter()</span>.convert<span class="constructor">ToBpmnModel(<span class="params">modelNode</span>)</span>;</span><br><span class="line">       bpmnBytes = <span class="keyword">new</span> <span class="constructor">BpmnXMLConverter()</span>.convert<span class="constructor">ToXML(<span class="params">bpmnModel</span>)</span>;</span><br><span class="line">       String processName = model.get<span class="constructor">Name()</span> + <span class="string">".bpmn"</span>;</span><br><span class="line">       Deployment deployment = repositoryService.create<span class="constructor">Deployment()</span></span><br><span class="line">               .name(model.get<span class="constructor">Name()</span>).add<span class="constructor">String(<span class="params">processName</span>, <span class="params">new</span> String(<span class="params">bpmnBytes</span>,<span class="string">"UTF-8"</span>)</span>)</span><br><span class="line">               .deploy<span class="literal">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>typeError: Cannot read property ‘namespace’ of undefined 分析：可能是如下原因引起的</p>
</blockquote>
<blockquote>
<blockquote>
<p>spring boot 默认使用 jackson 作为解析 json 框架，如果配置使用阿里的 fastjson 的话，Activiti modoler 会显示出问题</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>解决方案：使用默认的 jackson 即可</p>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Activti5</tag>
      </tags>
  </entry>
  <entry>
    <title>HDFS 操作</title>
    <url>/2021/05/25/48-HDFS%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/48.jpg"></p>
</span>

<span id="more"></span>

<h1 id="HDFS-常用操作"><a href="#HDFS-常用操作" class="headerlink" title="HDFS 常用操作"></a>HDFS 常用操作</h1><ul>
<li><p>使用命令操作 mrs 组件之前都需要设置环境</p>
<figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/opt/</span>client/bigdata_env</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>help 命令</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">help</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>ls 帮助命令</p>
<figure class="highlight mel"><table><tbody><tr><td class="code"><pre><span class="line">hdfs dfs -<span class="keyword">help</span> <span class="keyword">ls</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>ls 命令</p>
<figure class="highlight mel"><table><tbody><tr><td class="code"><pre><span class="line">hdfs dfs -<span class="keyword">ls</span> /</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>mkdir 命令</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">hdfs dfs -mkdir <span class="regexp">/user/gg</span> </span><br></pre></td></tr></tbody></table></figure></li>
<li><p>put 上传命令</p>
<figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">vi</span> <span class="keyword">vi</span>.txt</span><br><span class="line">hdfs dfs -<span class="keyword">put</span> <span class="keyword">vi</span>.txt /user/gg </span><br></pre></td></tr></tbody></table></figure></li>
<li><p>cat 命令</p>
<figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">hdfs dfs -<span class="keyword">cat</span> /user/gg/<span class="keyword">vi</span>.txt</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>text 命令</p>
<figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line">以字符串形式打印一个文件内容</span><br><span class="line">hdfs dfs -<span class="type">text</span> /<span class="keyword">user</span>/gg/vi.txt</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>moveFromLocal 命令</p>
<figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">从本地剪切文件去hdfs</span><br><span class="line">vi vi2<span class="selector-class">.txt</span></span><br><span class="line">hdfs dfs -moveFromLocal vi2<span class="selector-class">.txt</span> /user/gg/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>appendToFile 命令</p>
<figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">linux</span>追加到hdfs</span><br><span class="line"><span class="attribute">vi</span> vi<span class="number">3</span>.txt</span><br><span class="line"><span class="attribute">hdfs</span> dfs -appendToFile vi<span class="number">3</span>.txt /user/gg/vi<span class="number">2</span>.txt</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>cp 命令</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">hdfs上拷贝</span><br><span class="line">hdfs dfs -cp <span class="regexp">/user/gg</span><span class="regexp">/vi2.txt /u</span>ser<span class="regexp">/yy/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>mv 命令</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">hdfs上移动</span><br><span class="line">hdfs dfs -mv <span class="regexp">/user/gg</span><span class="regexp">/vi2.txt /u</span>ser<span class="regexp">/yy/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>copyToLocal 命令</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">从hdfs下载到本地</span><br><span class="line">hdfs dfs -copyToLocal <span class="regexp">/user/gg</span><span class="regexp">/vi.txt</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>gitmerge 命令</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">从hdfs合并多个文件下载到本地</span><br><span class="line">hdfs dfs -gitmerge <span class="regexp">/user/gg</span><span class="regexp">/* ./</span>abc.txt</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>rm 命令</p>
<figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">hdfs</span>删除</span><br><span class="line"><span class="attribute">hdfs</span> dfs -rm /user/gg/vi<span class="number">2</span>.txt</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>撤销删除命令</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">hdfs dfs -mv <span class="regexp">/user/</span>root<span class="regexp">/.Trash/</span>Current<span class="regexp">/user/gg</span><span class="regexp">/vi2.txt /u</span>ser<span class="regexp">/gg/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>df 命令</p>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">统计系统可用空间信息</span><br><span class="line">hdfs dfs -df -h /</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>du 命令</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">统计文件夹大小</span><br><span class="line">hdfs dfs -du -s -h <span class="regexp">/user/gg</span><span class="regexp">/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>count 命令</p>
<figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line">统计指定目录文件节点数量</span><br><span class="line">hdfs dfs -<span class="keyword">count</span> -v <span class="regexp">/user/gg</span><span class="regexp">/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>回收站</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">hdfs dfs -ls -v  <span class="regexp">/user/</span>root<span class="regexp">/.Trash/</span>Current<span class="regexp">/user/gg</span><span class="regexp">/</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>HIVE 操作</title>
    <url>/2021/05/25/49-HIVE%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/49.jpg"></p>
</span>

<span id="more"></span>

<h1 id="HIVE操作"><a href="#HIVE操作" class="headerlink" title="HIVE操作"></a>HIVE 操作</h1><ul>
<li><p>进入 HVIE</p>
<figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">beeline</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>HIVE 创建托管 (内部) 表</p>
<figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> myhive(<span class="type">name</span> string,gender string,age <span class="type">int</span>) <span class="keyword">row</span> <span class="keyword">format</span> delimited fields terminated <span class="keyword">by</span> <span class="string">','</span> stored <span class="keyword">as</span> textfile;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>HIVE 创建外部表</p>
<figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> myhive2(<span class="type">name</span> string,gender string,age <span class="type">int</span>) <span class="keyword">row</span> <span class="keyword">format</span> delimited fields terminated <span class="keyword">by</span> <span class="string">','</span> stored <span class="keyword">as</span> textfile;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>载入 hdfs 数据</p>
<figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line">vi vi.txt</span><br><span class="line"></span><br><span class="line">tom,male,<span class="number">10</span></span><br><span class="line">jack,female,<span class="number">22</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hdfs dfs -put vi.txt /<span class="keyword">user</span>/gg/</span><br><span class="line"></span><br><span class="line">在hive-beeline里面</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> data inpath <span class="string">'/user/gg/vi.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> myhive02;</span><br><span class="line"></span><br><span class="line">查看</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> myhive2;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>模糊查询表</p>
<figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span> <span class="keyword">like</span> <span class="string">'myhive*'</span>;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>mkdir 命令</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">hdfs dfs -mkdir <span class="regexp">/user/gg</span> </span><br></pre></td></tr></tbody></table></figure></li>
<li><p>put 上传命令</p>
<figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">vi</span> <span class="keyword">vi</span>.txt</span><br><span class="line">hdfs dfs -<span class="keyword">put</span> <span class="keyword">vi</span>.txt /user/gg </span><br></pre></td></tr></tbody></table></figure></li>
<li><p>cat 命令</p>
<figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">hdfs dfs -<span class="keyword">cat</span> /user/gg/<span class="keyword">vi</span>.txt</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>text 命令</p>
<figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line">以字符串形式打印一个文件内容</span><br><span class="line">hdfs dfs -<span class="type">text</span> /<span class="keyword">user</span>/gg/vi.txt</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>moveFromLocal 命令</p>
<figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">从本地剪切文件去hdfs</span><br><span class="line">vi vi2<span class="selector-class">.txt</span></span><br><span class="line">hdfs dfs -moveFromLocal vi2<span class="selector-class">.txt</span> /user/gg/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>appendToFile 命令</p>
<figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">linux</span>追加到hdfs</span><br><span class="line"><span class="attribute">vi</span> vi<span class="number">3</span>.txt</span><br><span class="line"><span class="attribute">hdfs</span> dfs -appendToFile vi<span class="number">3</span>.txt /user/gg/vi<span class="number">2</span>.txt</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>cp 命令</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">hdfs上拷贝</span><br><span class="line">hdfs dfs -cp <span class="regexp">/user/gg</span><span class="regexp">/vi2.txt /u</span>ser<span class="regexp">/yy/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>mv 命令</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">hdfs上移动</span><br><span class="line">hdfs dfs -mv <span class="regexp">/user/gg</span><span class="regexp">/vi2.txt /u</span>ser<span class="regexp">/yy/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>copyToLocal 命令</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">从hdfs下载到本地</span><br><span class="line">hdfs dfs -copyToLocal <span class="regexp">/user/gg</span><span class="regexp">/vi.txt</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>gitmerge 命令</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">从hdfs合并多个文件下载到本地</span><br><span class="line">hdfs dfs -gitmerge <span class="regexp">/user/gg</span><span class="regexp">/* ./</span>abc.txt</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>rm 命令</p>
<figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">hdfs</span>删除</span><br><span class="line"><span class="attribute">hdfs</span> dfs -rm /user/gg/vi<span class="number">2</span>.txt</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>撤销删除命令</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">hdfs dfs -mv <span class="regexp">/user/</span>root<span class="regexp">/.Trash/</span>Current<span class="regexp">/user/gg</span><span class="regexp">/vi2.txt /u</span>ser<span class="regexp">/gg/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>df 命令</p>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">统计系统可用空间信息</span><br><span class="line">hdfs dfs -df -h /</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>du 命令</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">统计文件夹大小</span><br><span class="line">hdfs dfs -du -s -h <span class="regexp">/user/gg</span><span class="regexp">/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>count 命令</p>
<figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line">统计指定目录文件节点数量</span><br><span class="line">hdfs dfs -<span class="keyword">count</span> -v <span class="regexp">/user/gg</span><span class="regexp">/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>回收站</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">hdfs dfs -ls -v  <span class="regexp">/user/</span>root<span class="regexp">/.Trash/</span>Current<span class="regexp">/user/gg</span><span class="regexp">/</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 文件重命名</title>
    <url>/2021/05/25/5-Java%E6%96%87%E4%BB%B6%E9%87%8D%E5%91%BD%E5%90%8D/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/5.jpg"></p>
</span>

<span id="more"></span>

<h1 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h1><h2 id="文件重命名"><a href="#文件重命名" class="headerlink" title="文件重命名"></a>文件重命名</h2><pre><code>public static void main(String[] args) {
    String d = "E:/images";
    File file = new File(d);
    File[] files = file.listFiles();
    int i = 1;
    for (File file1 : files) {
        reName(file1, i);
        i++;
    }
}
/**
* 处理文件重命名
*/
private static boolean reName(File file, int i) {//文件重命名
    if (file.exists()) {

        File newFile = new File(file.getParent() + File.separator + i + ".jpg");
        if (newFile.exists()) {
            return false;
        }
        if (file.renameTo(newFile)) {
            System.out.println("重命名成功！");
            return true;
        } else {
            System.out.println("重命名失败！新文件名已存在");
            return false;
        }
    } else {
        System.out.println("重命名文件不存在！");
        return false;
    }

}
</code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>HBASE 操作</title>
    <url>/2021/05/25/50-HBASE%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/50.jpg"></p>
</span>

<span id="more"></span>

<h1 id="hbase操作"><a href="#hbase操作" class="headerlink" title="hbase操作"></a>hbase 操作</h1><ul>
<li><p>进入 hbase</p>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line">hbase <span class="keyword">shell</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>hbase 创建表</p>
<figure class="highlight livecodeserver"><table><tbody><tr><td class="code"><pre><span class="line">表名 - 列族名</span><br><span class="line"><span class="built_in">create</span> <span class="string">'gg_table'</span>,<span class="string">'stu'</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>增加数据</p>
<figure class="highlight gams"><table><tbody><tr><td class="code"><pre><span class="line">表名 - 主键-列族-列-值</span><br><span class="line"><span class="keyword">put</span> <span class="string">'gg_table'</span>,<span class="string">'001'</span>,<span class="string">'stu:name'</span>,<span class="string">'tom'</span></span><br><span class="line"><span class="keyword">put</span> <span class="string">'gg_table'</span>,<span class="string">'001'</span>,<span class="string">'stu:gender'</span>,<span class="string">'male'</span></span><br><span class="line"><span class="keyword">put</span> <span class="string">'gg_table'</span>,<span class="string">'001'</span>,<span class="string">'stu:age'</span>,<span class="string">'20'</span></span><br><span class="line"><span class="keyword">put</span> <span class="string">'gg_table'</span>,<span class="string">'002'</span>,<span class="string">'stu:name'</span>,<span class="string">'lilei'</span></span><br><span class="line"><span class="keyword">put</span> <span class="string">'gg_table'</span>,<span class="string">'002'</span>,<span class="string">'stu:gender'</span>,<span class="string">'female'</span></span><br><span class="line"><span class="keyword">put</span> <span class="string">'gg_table'</span>,<span class="string">'002'</span>,<span class="string">'stu:age'</span>,<span class="string">'19'</span></span><br><span class="line"><span class="keyword">put</span> <span class="string">'gg_table'</span>,<span class="string">'003'</span>,<span class="string">'stu:name'</span>,<span class="string">'zhangsan'</span></span><br><span class="line"><span class="keyword">put</span> <span class="string">'gg_table'</span>,<span class="string">'003'</span>,<span class="string">'stu:gender'</span>,<span class="string">'male'</span></span><br><span class="line"><span class="keyword">put</span> <span class="string">'gg_table'</span>,<span class="string">'003'</span>,<span class="string">'stu:age'</span>,<span class="string">'22'</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>查看</p>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">scan</span> <span class="string">'gg_table'</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>scan 查询表</p>
<figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line">查询所有</span><br><span class="line">scan <span class="string">'gg_table'</span></span><br><span class="line"></span><br><span class="line">查询列族为stu的数据</span><br><span class="line">scan <span class="string">'gg_table'</span>,{<span class="keyword">COLUMNS</span>=&gt;<span class="string">'stu'</span>}</span><br><span class="line"></span><br><span class="line">查询列族为stu-列为<span class="type">name</span>的数据</span><br><span class="line">scan <span class="string">'gg_table'</span>,{<span class="keyword">COLUMNS</span>=&gt;<span class="string">'stu:name'</span>}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>get 查询表</p>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">查询行键为001</span><br><span class="line"><span class="builtin-name">get</span> <span class="string">'gg_table'</span>,<span class="string">'001'</span></span><br><span class="line"></span><br><span class="line">查询行键为001 列族为stu 列名为name</span><br><span class="line"><span class="builtin-name">get</span> <span class="string">'gg_table'</span>,<span class="string">'001'</span>,<span class="string">'stu:name'</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>指定条件查询数据</p>
<figure class="highlight dart"><table><tbody><tr><td class="code"><pre><span class="line">起始行键<span class="number">001</span> ,最多两个行键 结束是<span class="number">002</span> ,前面包含后面不包含</span><br><span class="line">scan <span class="string">'gg_table'</span>,{STARTROW=&gt;<span class="string">'001'</span>,<span class="string">'LIMIT'</span>=&gt;<span class="number">2</span>,STOPROW=&gt;<span class="string">'004'</span>}</span><br><span class="line">scan <span class="string">'gg_table'</span>,{STARTROW=&gt;<span class="string">'001'</span>,<span class="string">'LIMIT'</span>=&gt;<span class="number">2</span>,STOPROW=&gt;<span class="string">'004'</span>,COLUMNS=&gt;<span class="string">'stu:name'</span>}</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>解释</p>
<figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">除了列(COLUMNS)修饰词,Hbase还支持LIMIT(限制查询结果行键数)</span><br><span class="line"><span class="function"><span class="title">STARTROW</span><span class="params">(ROWKEY起始行.会根据这个key定位到region,再向后扫描)</span></span>,</span><br><span class="line"><span class="function"><span class="title">STOPROW</span><span class="params">(结束行)</span></span> TIMERANGE(限定时间戳范围)</span><br><span class="line"><span class="function"><span class="title">VERSION</span><span class="params">(版本数)</span></span></span><br><span class="line"><span class="function"><span class="title">FILTER</span><span class="params">(按条件过滤行)</span></span>等</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>查询多版本数据</p>
<figure class="highlight vala"><table><tbody><tr><td class="code"><pre><span class="line">查询到最新的数据</span><br><span class="line">put <span class="string">'gg_table'</span>,<span class="string">'001'</span>,<span class="string">'stu:name'</span>,<span class="string">'mm'</span></span><br><span class="line">put <span class="string">'gg_table'</span>,<span class="string">'001'</span>,<span class="string">'stu:name'</span>,<span class="string">'mm1'</span></span><br><span class="line">put <span class="string">'gg_table'</span>,<span class="string">'001'</span>,<span class="string">'stu:name'</span>,<span class="string">'mm2'</span></span><br><span class="line"><span class="meta">#多版本查询</span></span><br><span class="line"><span class="keyword">get</span> <span class="string">'gg_table'</span>,<span class="string">'001'</span>,{COLUMNS=&gt;<span class="string">'stu'</span>,VERSIONS=&gt;<span class="number">5</span>}</span><br><span class="line"><span class="meta">#查询系统版本信息</span></span><br><span class="line">desc <span class="string">'gg_table'</span></span><br><span class="line"><span class="meta">#修改版本</span></span><br><span class="line">alter <span class="string">'gg_table'</span>,{NAME=&gt;<span class="string">'stu'</span>,VERSION=&gt;<span class="number">5</span>}</span><br><span class="line"><span class="meta">#插入数据查询  会看见多版本的数据</span></span><br><span class="line"><span class="meta">#scan只会显示最新的数据,所以需要用get查询</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>删除</p>
<figure class="highlight livecodeserver"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">put</span> <span class="string">'gg_table'</span>,<span class="string">'004'</span>,<span class="string">'stu:name'</span>,<span class="string">'jk4'</span></span><br><span class="line"><span class="built_in">delete</span> <span class="string">'gg_table'</span>,<span class="string">'004'</span>,<span class="string">'stu:name'</span></span><br><span class="line"><span class="built_in">delete</span> <span class="string">'gg_table'</span>,<span class="string">'004'</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>删除表</p>
<figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">disable</span> <span class="string">'gg_table'</span></span><br><span class="line"><span class="keyword">drop</span> <span class="string">'gg_table'</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<ul>
<li>创建预分 region 表 <figure class="highlight maxima"><table><tbody><tr><td class="code"><pre><span class="line">Hbase默认建表时只有一个<span class="built_in">region</span>,这个<span class="built_in">region</span>的rowkey是没有边界的,即没有startKey和endKey</span><br><span class="line">在数据写入时,所有的数据都会写入这个默认的<span class="built_in">region</span>,随着数量的增加,此<span class="built_in">region</span>不能承受数量(10G)会进行<span class="built_in">split</span>,</span><br><span class="line">分成<span class="number">2</span>个<span class="built_in">region</span>,在此过程中会产生两个问题:</span><br><span class="line"><span class="number">1</span>.数据往一个<span class="built_in">region</span>写,会有写热点问题</span><br><span class="line"><span class="number">2.</span><span class="built_in">region</span> <span class="built_in">split</span>会消耗I/<span class="number">0</span>资源</span><br><span class="line">由此,我们可以创建表时,创建多个空的<span class="built_in">region</span>,并确定每个<span class="built_in">region</span>的起始和终止rowkey</span><br><span class="line">这样rowkey设计能均匀命中<span class="built_in">region</span>,<span class="built_in">split</span>的概率也会降低</span><br><span class="line">hbase提供了两种pre-<span class="built_in">split</span>算法,HEXStringSplit和UniformSplit </span><br><span class="line">前者适用于十六进制的rowkey,后者适用于随机字节数组的rowkey</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<figure class="highlight dart"><table><tbody><tr><td class="code"><pre><span class="line">以rowKey切分,随机分为<span class="number">4</span>个region</span><br><span class="line">UniformSplit 适用于十六进制字符的rowKey</span><br><span class="line"></span><br><span class="line">create <span class="string">'gg_table_2'</span>,<span class="string">'stu2'</span>,{NUMREGION=&gt;<span class="number">4</span>,SPLITALGO=&gt;<span class="string">'UniformSplit'</span>}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>指定 startKey 和 endKey<figure class="highlight dart"><table><tbody><tr><td class="code"><pre><span class="line">create <span class="string">'gg_table_3'</span>,<span class="string">'stu3'</span>,SPLITS=&gt;[<span class="string">'001'</span>,<span class="string">'002'</span>.<span class="string">'003'</span>]</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<ul>
<li>Filter 过滤器 <figure class="highlight dart"><table><tbody><tr><td class="code"><pre><span class="line">scan <span class="string">'gg_table'</span>,{FILTER=&gt;<span class="string">"ValueFilter(=,'binary:20')"</span>}</span><br><span class="line">scan <span class="string">'gg_table'</span>,{FILTER=&gt;<span class="string">"ValueFilter(=,'binary:lilei')"</span>}</span><br><span class="line"></span><br><span class="line">scan <span class="string">'gg_table'</span>,FILTER=&gt;<span class="string">"ColumnPrefixFilter('name') AND ValueFilter(=,'binary:lilei')"</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MapReduce 操作</title>
    <url>/2021/05/25/51-MapReduce%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/51jpg"></p>
</span>

<span id="more"></span>

<h1 id="MapReduce操作计数例子"><a href="#MapReduce操作计数例子" class="headerlink" title="MapReduce操作计数例子"></a>MapReduce 操作计数例子</h1><ul>
<li><figure class="highlight dts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#创建一个文件</span></span><br><span class="line">vi tt.txt</span><br><span class="line">hadoop hive hadoop hbase spark hive hadoop spark</span><br><span class="line"><span class="meta">#上传</span></span><br><span class="line">hdfs dfs -put tt.txt <span class="meta-keyword">/user/</span>gg/</span><br><span class="line"></span><br><span class="line"><span class="meta">#执行jar包程序</span></span><br><span class="line">yarn jar <span class="meta-keyword">/xxx/</span>mapreduce.jar wordcount <span class="meta-keyword">/user/</span>gg/tt.txt <span class="meta-keyword">/user/</span>gg/output</span><br></pre></td></tr></tbody></table></figure></li>
<li>得到结果 <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">hdfs</span> dfs -cat /user/gg/output/part-r-<span class="number">00000</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">doop</span>	<span class="number">1</span></span><br><span class="line"><span class="attribute">hadoop</span>	<span class="number">2</span></span><br><span class="line"><span class="attribute">hbase</span>	<span class="number">1</span></span><br><span class="line"><span class="attribute">hive</span>	<span class="number">3</span></span><br><span class="line"><span class="attribute">spark</span>	<span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>jeecg 接口文档</title>
    <url>/2021/06/11/47-jeecg%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/47.jpg"></p>
</span>

<span id="more"></span>

<h1 id="Jeecg-Boot-后台服务API接口文档"><a href="#Jeecg-Boot-后台服务API接口文档" class="headerlink" title="Jeecg-Boot 后台服务API接口文档"></a>Jeecg-Boot 后台服务 API 接口文档</h1><p><strong>简介</strong>:Jeecg-Boot 后台服务 API 接口文档</p>
<p><strong>HOST</strong>:192.168.100.165:8088</p>
<p><strong>联系人</strong>:JEECG 团队</p>
<p><strong>Version</strong>:1.0</p>
<p><strong>接口路径</strong>:/v2/api-docs</p>
<p>[TOC]</p>
<h1 id="单表DEMO"><a href="#单表DEMO" class="headerlink" title="单表DEMO"></a>单表 DEMO</h1><h2 id="添加DEMO"><a href="#添加DEMO" class="headerlink" title="添加DEMO"></a>添加 DEMO</h2><p><strong>接口地址</strong>:<code>/fastrun/test/jeecgDemo/add</code></p>
<p><strong>请求方式</strong>:<code>POST</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 添加 DEMO</p>
<p><strong>请求示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"age"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"birthday"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"bonusMoney"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"content"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"createBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"createTime"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"email"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"id"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"keyWord"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"name"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"punchTime"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"salaryMoney"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"sex"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"sysOrgCode"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateTime"</span>: <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>jeecgDemo</td>
<td> 测试 DEMO</td>
<td>body</td>
<td>true</td>
<td> 测试 DEMO 对象</td>
<td>测试 DEMO 对象</td>
</tr>
<tr>
<td>  age</td>
<td> 年龄</td>
<td></td>
<td> false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>  birthday</td>
<td> 生日</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  bonusMoney</td>
<td> 奖金</td>
<td></td>
<td> false</td>
<td>number(double)</td>
<td></td>
</tr>
<tr>
<td>  content</td>
<td> 个人简介</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createBy</td>
<td> 创建人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createTime</td>
<td> 创建时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  email</td>
<td> 邮箱</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  id</td>
<td>ID</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  keyWord</td>
<td> 关键词</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  name</td>
<td> 姓名</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  punchTime</td>
<td> 打卡时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  salaryMoney</td>
<td> 工资</td>
<td></td>
<td> false</td>
<td>number</td>
<td></td>
</tr>
<tr>
<td>  sex</td>
<td> 性别</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  sysOrgCode</td>
<td> 部门编码</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateBy</td>
<td> 更新人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateTime</td>
<td> 更新时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="通过ID删除DEMO"><a href="#通过ID删除DEMO" class="headerlink" title="通过ID删除DEMO"></a>通过 ID 删除 DEMO</h2><p><strong>接口地址</strong>:<code>/fastrun/test/jeecgDemo/delete</code></p>
<p><strong>请求方式</strong>:<code>DELETE</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 通过 ID 删除 DEMO</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>204</td>
<td>No Content</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="批量删除DEMO"><a href="#批量删除DEMO" class="headerlink" title="批量删除DEMO"></a>批量删除 DEMO</h2><p><strong>接口地址</strong>:<code>/fastrun/test/jeecgDemo/deleteBatch</code></p>
<p><strong>请求方式</strong>:<code>DELETE</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 批量删除 DEMO</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>ids</td>
<td>ids</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>204</td>
<td>No Content</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="编辑DEMO"><a href="#编辑DEMO" class="headerlink" title="编辑DEMO"></a>编辑 DEMO</h2><p><strong>接口地址</strong>:<code>/fastrun/test/jeecgDemo/edit</code></p>
<p><strong>请求方式</strong>:<code>PUT</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 编辑 DEMO</p>
<p><strong>请求示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"age"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"birthday"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"bonusMoney"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"content"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"createBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"createTime"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"email"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"id"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"keyWord"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"name"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"punchTime"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"salaryMoney"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"sex"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"sysOrgCode"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateTime"</span>: <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>jeecgDemo</td>
<td> 测试 DEMO</td>
<td>body</td>
<td>true</td>
<td> 测试 DEMO 对象</td>
<td>测试 DEMO 对象</td>
</tr>
<tr>
<td>  age</td>
<td> 年龄</td>
<td></td>
<td> false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>  birthday</td>
<td> 生日</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  bonusMoney</td>
<td> 奖金</td>
<td></td>
<td> false</td>
<td>number(double)</td>
<td></td>
</tr>
<tr>
<td>  content</td>
<td> 个人简介</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createBy</td>
<td> 创建人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createTime</td>
<td> 创建时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  email</td>
<td> 邮箱</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  id</td>
<td>ID</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  keyWord</td>
<td> 关键词</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  name</td>
<td> 姓名</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  punchTime</td>
<td> 打卡时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  salaryMoney</td>
<td> 工资</td>
<td></td>
<td> false</td>
<td>number</td>
<td></td>
</tr>
<tr>
<td>  sex</td>
<td> 性别</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  sysOrgCode</td>
<td> 部门编码</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateBy</td>
<td> 更新人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateTime</td>
<td> 更新时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="获取Demo数据列表"><a href="#获取Demo数据列表" class="headerlink" title="获取Demo数据列表"></a>获取 Demo 数据列表</h2><p><strong>接口地址</strong>:<code>/fastrun/test/jeecgDemo/list</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 获取所有 Demo 数据列表</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>age</td>
<td> 年龄</td>
<td> query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>birthday</td>
<td> 生日</td>
<td> query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>bonusMoney</td>
<td> 奖金</td>
<td> query</td>
<td>false</td>
<td>number(double)</td>
<td></td>
</tr>
<tr>
<td>content</td>
<td> 个人简介</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>createBy</td>
<td> 创建人</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>createTime</td>
<td> 创建时间</td>
<td> query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>email</td>
<td> 邮箱</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>id</td>
<td>ID</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>keyWord</td>
<td> 关键词</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>name</td>
<td> 姓名</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>pageNo</td>
<td>pageNo</td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>pageSize</td>
<td>pageSize</td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>punchTime</td>
<td> 打卡时间</td>
<td> query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>salaryMoney</td>
<td> 工资</td>
<td> query</td>
<td>false</td>
<td>number</td>
<td></td>
</tr>
<tr>
<td>sex</td>
<td> 性别</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>sysOrgCode</td>
<td> 部门编码</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>updateBy</td>
<td> 更新人</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>updateTime</td>
<td> 更新时间</td>
<td> query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="通过ID查询DEMO"><a href="#通过ID查询DEMO" class="headerlink" title="通过ID查询DEMO"></a>通过 ID 查询 DEMO</h2><p><strong>接口地址</strong>:<code>/fastrun/test/jeecgDemo/queryById</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 通过 ID 查询 DEMO</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td> 示例 id</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h1 id="填值规则"><a href="#填值规则" class="headerlink" title="填值规则"></a>填值规则</h1><h2 id="填值规则-添加"><a href="#填值规则-添加" class="headerlink" title="填值规则-添加"></a>填值规则 - 添加</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/fillRule/add</code></p>
<p><strong>请求方式</strong>:<code>POST</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 填值规则 - 添加</p>
<p><strong>请求示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"createBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"createTime"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"id"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"ruleClass"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"ruleCode"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"ruleName"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"ruleParams"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateTime"</span>: <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>sysFillRule</td>
<td> 填值规则</td>
<td> body</td>
<td>true</td>
<td>sys_fill_rule 对象</td>
<td> sys_fill_rule 对象</td>
</tr>
<tr>
<td>  createBy</td>
<td> 创建人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createTime</td>
<td> 创建时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  id</td>
<td> 主键 ID</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  ruleClass</td>
<td> 规则实现类</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  ruleCode</td>
<td> 规则 Code</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  ruleName</td>
<td> 规则名称</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  ruleParams</td>
<td> 规则参数</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateBy</td>
<td> 修改人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateTime</td>
<td> 修改时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="填值规则-通过id删除"><a href="#填值规则-通过id删除" class="headerlink" title="填值规则-通过id删除"></a>填值规则 - 通过 id 删除</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/fillRule/delete</code></p>
<p><strong>请求方式</strong>:<code>DELETE</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 填值规则 - 通过 id 删除</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>204</td>
<td>No Content</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="填值规则-批量删除"><a href="#填值规则-批量删除" class="headerlink" title="填值规则-批量删除"></a>填值规则 - 批量删除</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/fillRule/deleteBatch</code></p>
<p><strong>请求方式</strong>:<code>DELETE</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 填值规则 - 批量删除</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>ids</td>
<td>ids</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>204</td>
<td>No Content</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="填值规则-编辑"><a href="#填值规则-编辑" class="headerlink" title="填值规则-编辑"></a>填值规则 - 编辑</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/fillRule/edit</code></p>
<p><strong>请求方式</strong>:<code>PUT</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 填值规则 - 编辑</p>
<p><strong>请求示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"createBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"createTime"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"id"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"ruleClass"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"ruleCode"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"ruleName"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"ruleParams"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateTime"</span>: <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>sysFillRule</td>
<td> 填值规则</td>
<td> body</td>
<td>true</td>
<td>sys_fill_rule 对象</td>
<td> sys_fill_rule 对象</td>
</tr>
<tr>
<td>  createBy</td>
<td> 创建人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createTime</td>
<td> 创建时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  id</td>
<td> 主键 ID</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  ruleClass</td>
<td> 规则实现类</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  ruleCode</td>
<td> 规则 Code</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  ruleName</td>
<td> 规则名称</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  ruleParams</td>
<td> 规则参数</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateBy</td>
<td> 修改人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateTime</td>
<td> 修改时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="填值规则-分页列表查询"><a href="#填值规则-分页列表查询" class="headerlink" title="填值规则-分页列表查询"></a>填值规则 - 分页列表查询</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/fillRule/list</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 填值规则 - 分页列表查询</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>createBy</td>
<td> 创建人</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>createTime</td>
<td> 创建时间</td>
<td> query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>id</td>
<td> 主键 ID</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>pageNo</td>
<td>pageNo</td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>pageSize</td>
<td>pageSize</td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>ruleClass</td>
<td> 规则实现类</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>ruleCode</td>
<td> 规则 Code</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>ruleName</td>
<td> 规则名称</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>ruleParams</td>
<td> 规则参数</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>updateBy</td>
<td> 修改人</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>updateTime</td>
<td> 修改时间</td>
<td> query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="填值规则-通过id查询"><a href="#填值规则-通过id查询" class="headerlink" title="填值规则-通过id查询"></a>填值规则 - 通过 id 查询</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/fillRule/queryById</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 填值规则 - 通过 id 查询</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h1 id="多数据源管理"><a href="#多数据源管理" class="headerlink" title="多数据源管理"></a>多数据源管理</h1><h2 id="多数据源管理-添加"><a href="#多数据源管理-添加" class="headerlink" title="多数据源管理-添加"></a>多数据源管理 - 添加</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/dataSource/add</code></p>
<p><strong>请求方式</strong>:<code>POST</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 多数据源管理 - 添加</p>
<p><strong>请求示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"createBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"createTime"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"dbDriver"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"dbName"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"dbPassword"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"dbType"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"dbUrl"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"dbUsername"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"id"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"name"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"remark"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"sysOrgCode"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateTime"</span>: <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>sysDataSource</td>
<td> 多数据源管理</td>
<td> body</td>
<td>true</td>
<td>sys_data_source 对象</td>
<td> sys_data_source 对象</td>
</tr>
<tr>
<td>  code</td>
<td> 数据源编码</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createBy</td>
<td> 创建人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createTime</td>
<td> 创建日期</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  dbDriver</td>
<td> 驱动类</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  dbName</td>
<td> 数据库名称</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  dbPassword</td>
<td> 密码</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  dbType</td>
<td> 数据库类型</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  dbUrl</td>
<td> 数据源地址</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  dbUsername</td>
<td> 用户名</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  id</td>
<td>id</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  name</td>
<td> 数据源名称</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  remark</td>
<td> 备注</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  sysOrgCode</td>
<td> 所属部门</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateBy</td>
<td> 更新人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateTime</td>
<td> 更新日期</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="多数据源管理-通过id删除"><a href="#多数据源管理-通过id删除" class="headerlink" title="多数据源管理-通过id删除"></a>多数据源管理 - 通过 id 删除</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/dataSource/delete</code></p>
<p><strong>请求方式</strong>:<code>DELETE</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 多数据源管理 - 通过 id 删除</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>204</td>
<td>No Content</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="多数据源管理-批量删除"><a href="#多数据源管理-批量删除" class="headerlink" title="多数据源管理-批量删除"></a>多数据源管理 - 批量删除</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/dataSource/deleteBatch</code></p>
<p><strong>请求方式</strong>:<code>DELETE</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 多数据源管理 - 批量删除</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>ids</td>
<td>ids</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>204</td>
<td>No Content</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="多数据源管理-编辑"><a href="#多数据源管理-编辑" class="headerlink" title="多数据源管理-编辑"></a>多数据源管理 - 编辑</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/dataSource/edit</code></p>
<p><strong>请求方式</strong>:<code>PUT</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 多数据源管理 - 编辑</p>
<p><strong>请求示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"createBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"createTime"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"dbDriver"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"dbName"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"dbPassword"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"dbType"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"dbUrl"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"dbUsername"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"id"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"name"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"remark"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"sysOrgCode"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateTime"</span>: <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>sysDataSource</td>
<td> 多数据源管理</td>
<td> body</td>
<td>true</td>
<td>sys_data_source 对象</td>
<td> sys_data_source 对象</td>
</tr>
<tr>
<td>  code</td>
<td> 数据源编码</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createBy</td>
<td> 创建人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createTime</td>
<td> 创建日期</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  dbDriver</td>
<td> 驱动类</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  dbName</td>
<td> 数据库名称</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  dbPassword</td>
<td> 密码</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  dbType</td>
<td> 数据库类型</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  dbUrl</td>
<td> 数据源地址</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  dbUsername</td>
<td> 用户名</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  id</td>
<td>id</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  name</td>
<td> 数据源名称</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  remark</td>
<td> 备注</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  sysOrgCode</td>
<td> 所属部门</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateBy</td>
<td> 更新人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateTime</td>
<td> 更新日期</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="多数据源管理-分页列表查询"><a href="#多数据源管理-分页列表查询" class="headerlink" title="多数据源管理-分页列表查询"></a>多数据源管理 - 分页列表查询</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/dataSource/list</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 多数据源管理 - 分页列表查询</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 数据源编码</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>createBy</td>
<td> 创建人</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>createTime</td>
<td> 创建日期</td>
<td> query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>dbDriver</td>
<td> 驱动类</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>dbName</td>
<td> 数据库名称</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>dbPassword</td>
<td> 密码</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>dbType</td>
<td> 数据库类型</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>dbUrl</td>
<td> 数据源地址</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>dbUsername</td>
<td> 用户名</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>name</td>
<td> 数据源名称</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>pageNo</td>
<td>pageNo</td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>pageSize</td>
<td>pageSize</td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>remark</td>
<td> 备注</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>sysOrgCode</td>
<td> 所属部门</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>updateBy</td>
<td> 更新人</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>updateTime</td>
<td> 更新日期</td>
<td> query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="多数据源管理-通过id查询"><a href="#多数据源管理-通过id查询" class="headerlink" title="多数据源管理-通过id查询"></a>多数据源管理 - 通过 id 查询</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/dataSource/queryById</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 多数据源管理 - 通过 id 查询</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h1 id="定时任务接口"><a href="#定时任务接口" class="headerlink" title="定时任务接口"></a>定时任务接口</h1><h2 id="暂停定时任务"><a href="#暂停定时任务" class="headerlink" title="暂停定时任务"></a>暂停定时任务</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/quartzJob/pause</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>:</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>jobClassName</td>
<td>jobClassName</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="恢复定时任务"><a href="#恢复定时任务" class="headerlink" title="恢复定时任务"></a>恢复定时任务</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/quartzJob/resume</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>:</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>jobClassName</td>
<td>jobClassName</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h1 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h1><h2 id="文件管理-添加"><a href="#文件管理-添加" class="headerlink" title="文件管理-添加"></a>文件管理 - 添加</h2><p><strong>接口地址</strong>:<code>/fastrun/system/sysFile/add</code></p>
<p><strong>请求方式</strong>:<code>POST</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 文件管理 - 添加</p>
<p><strong>请求示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"businessId"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"createBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"createTime"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"delFlag"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"fileLength"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"fileName"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"filePath"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"fileType"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"id"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"moduleCode"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"projectId"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateTime"</span>: <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>sysFile</td>
<td> 文件管理</td>
<td> body</td>
<td>true</td>
<td>sys_file 对象</td>
<td> sys_file 对象</td>
</tr>
<tr>
<td>  businessId</td>
<td> 业务 ID</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createBy</td>
<td> 创建人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createTime</td>
<td> 创建时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  delFlag</td>
<td> 删除标识 0 - 正常，1 - 已删除</td>
<td></td>
<td> false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>  fileLength</td>
<td> 文件大小</td>
<td></td>
<td> false</td>
<td>integer(int64)</td>
<td></td>
</tr>
<tr>
<td>  fileName</td>
<td> 文件名称</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  filePath</td>
<td> 文件路径</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  fileType</td>
<td> 文件类型</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  id</td>
<td>ID</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  moduleCode</td>
<td> 模块名称</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  projectId</td>
<td> 项目 ID</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateBy</td>
<td> 修改人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateTime</td>
<td> 修改时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="文件管理-通过id删除"><a href="#文件管理-通过id删除" class="headerlink" title="文件管理-通过id删除"></a>文件管理 - 通过 id 删除</h2><p><strong>接口地址</strong>:<code>/fastrun/system/sysFile/delete</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 文件管理 - 通过 id 删除</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="文件管理-批量删除"><a href="#文件管理-批量删除" class="headerlink" title="文件管理-批量删除"></a>文件管理 - 批量删除</h2><p><strong>接口地址</strong>:<code>/fastrun/system/sysFile/deleteBatch</code></p>
<p><strong>请求方式</strong>:<code>DELETE</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 文件管理 - 批量删除</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>ids</td>
<td>ids</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>204</td>
<td>No Content</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="下载附件"><a href="#下载附件" class="headerlink" title="下载附件"></a>下载附件</h2><p><strong>接口地址</strong>:<code>/fastrun/system/sysFile/downLoadStatic</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>:download attachment </p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象</td>
</tr>
<tr>
<td> 401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="下载附件-1"><a href="#下载附件-1" class="headerlink" title="下载附件"></a>下载附件</h2><p><strong>接口地址</strong>:<code>/fastrun/system/sysFile/download</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>:download attachment </p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<p>暂无</p>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure>


<h2 id="文件管理-编辑"><a href="#文件管理-编辑" class="headerlink" title="文件管理-编辑"></a>文件管理 - 编辑</h2><p><strong>接口地址</strong>:<code>/fastrun/system/sysFile/edit</code></p>
<p><strong>请求方式</strong>:<code>PUT</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 文件管理 - 编辑</p>
<p><strong>请求示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"businessId"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"createBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"createTime"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"delFlag"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"fileLength"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"fileName"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"filePath"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"fileType"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"id"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"moduleCode"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"projectId"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateTime"</span>: <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>sysFile</td>
<td> 文件管理</td>
<td> body</td>
<td>true</td>
<td>sys_file 对象</td>
<td> sys_file 对象</td>
</tr>
<tr>
<td>  businessId</td>
<td> 业务 ID</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createBy</td>
<td> 创建人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createTime</td>
<td> 创建时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  delFlag</td>
<td> 删除标识 0 - 正常，1 - 已删除</td>
<td></td>
<td> false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>  fileLength</td>
<td> 文件大小</td>
<td></td>
<td> false</td>
<td>integer(int64)</td>
<td></td>
</tr>
<tr>
<td>  fileName</td>
<td> 文件名称</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  filePath</td>
<td> 文件路径</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  fileType</td>
<td> 文件类型</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  id</td>
<td>ID</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  moduleCode</td>
<td> 模块名称</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  projectId</td>
<td> 项目 ID</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateBy</td>
<td> 修改人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateTime</td>
<td> 修改时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="文件管理-分页列表查询"><a href="#文件管理-分页列表查询" class="headerlink" title="文件管理-分页列表查询"></a>文件管理 - 分页列表查询</h2><p><strong>接口地址</strong>:<code>/fastrun/system/sysFile/list</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 文件管理 - 分页列表查询</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>businessId</td>
<td> 业务 ID</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>createBy</td>
<td> 创建人</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>createTime</td>
<td> 创建时间</td>
<td> query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>delFlag</td>
<td> 删除标识 0 - 正常，1 - 已删除</td>
<td> query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>fileLength</td>
<td> 文件大小</td>
<td> query</td>
<td>false</td>
<td>integer(int64)</td>
<td></td>
</tr>
<tr>
<td>fileName</td>
<td> 文件名称</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>filePath</td>
<td> 文件路径</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>fileType</td>
<td> 文件类型</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>id</td>
<td>ID</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>moduleCode</td>
<td> 模块名称</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>pageNo</td>
<td>pageNo</td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>pageSize</td>
<td>pageSize</td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>projectId</td>
<td> 项目 ID</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>updateBy</td>
<td> 修改人</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>updateTime</td>
<td> 修改时间</td>
<td> query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="下载附件-2"><a href="#下载附件-2" class="headerlink" title="下载附件"></a>下载附件</h2><p><strong>接口地址</strong>:<code>/fastrun/system/sysFile/opendownload</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>:download attachment </p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<p>暂无</p>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure>


<h2 id="文件管理-通过businessId查询"><a href="#文件管理-通过businessId查询" class="headerlink" title="文件管理-通过businessId查询"></a>文件管理 - 通过 businessId 查询</h2><p><strong>接口地址</strong>:<code>/fastrun/system/sysFile/queryByBusinessId</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 文件管理 - 通过 businessId 查询</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>businessId</td>
<td>businessId</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="文件管理-通过id查询"><a href="#文件管理-通过id查询" class="headerlink" title="文件管理-通过id查询"></a>文件管理 - 通过 id 查询</h2><p><strong>接口地址</strong>:<code>/fastrun/system/sysFile/queryById</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 文件管理 - 通过 id 查询</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="上传附件"><a href="#上传附件" class="headerlink" title="上传附件"></a>上传附件</h2><p><strong>接口地址</strong>:<code>/fastrun/system/sysFile/upload</code></p>
<p><strong>请求方式</strong>:<code>POST</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>:upload attachment </p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>businessId</td>
<td>businessId</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>fileType</td>
<td>fileType</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>moduleCode</td>
<td>moduleCode</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>projectId</td>
<td>projectId</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h2 id="流程-查询流程类型"><a href="#流程-查询流程类型" class="headerlink" title="流程-查询流程类型"></a>流程 - 查询流程类型</h2><p><strong>接口地址</strong>:<code>/fastrun/actBusiness/actZProcess</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 流程类型</p>
<p><strong>请求参数</strong>:</p>
<p>暂无</p>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象</td>
</tr>
<tr>
<td> 401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="流程-添加申请草稿状态"><a href="#流程-添加申请草稿状态" class="headerlink" title="流程-添加申请草稿状态"></a>流程 - 添加申请草稿状态</h2><p><strong>接口地址</strong>:<code>/fastrun/actBusiness/add</code></p>
<p><strong>请求方式</strong>:<code>POST</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 业务表单参数数据一并传过来！</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>procDeTitle</td>
<td> 申请标题</td>
<td> body</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>procDefId</td>
<td> 流程定义 Id</td>
<td>body</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>tableName</td>
<td> 数据表名</td>
<td> body</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象</td>
</tr>
<tr>
<td> 201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="流程-提交申请-启动流程"><a href="#流程-提交申请-启动流程" class="headerlink" title="流程-提交申请 启动流程"></a>流程 - 提交申请 启动流程</h2><p><strong>接口地址</strong>:<code>/fastrun/actBusiness/apply</code></p>
<p><strong>请求方式</strong>:<code>POST</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 提交申请 启动流程。</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>applyTime</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>assignees</td>
<td> 审批人（用户名），多个，号相连</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>createBy</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>createTime</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>currTaskName</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>dataMap</td>
<td></td>
<td>query</td>
<td>false</td>
<td>object</td>
<td></td>
</tr>
<tr>
<td>delFlag</td>
<td></td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>firstGateway</td>
<td> 第一个节点是否为网关</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>isHistory</td>
<td></td>
<td>query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>params</td>
<td> 流程设置参数</td>
<td> query</td>
<td>false</td>
<td>object</td>
<td></td>
</tr>
<tr>
<td>priority</td>
<td> 任务优先级 默认 0 0 普通 1 重要 2 紧急</td>
<td> query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>procDefId</td>
<td> 流程定义 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>procInstId</td>
<td> 流程实例 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>procInstStatus</td>
<td></td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>processName</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td></td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>routeName</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>sendEmail</td>
<td> 是否发送邮件通知 - 暂无用</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>sendMessage</td>
<td> 是否发送站内消息</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>sendSms</td>
<td> 是否发送短信通知 - 暂无用</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>status</td>
<td></td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>tableId</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>tableName</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>title</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>updateBy</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>updateTime</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>userId</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象</td>
</tr>
<tr>
<td> 201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="流程-撤回申请"><a href="#流程-撤回申请" class="headerlink" title="流程-撤回申请"></a>流程 - 撤回申请</h2><p><strong>接口地址</strong>:<code>/fastrun/actBusiness/cancel</code></p>
<p><strong>请求方式</strong>:<code>POST</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 撤回申请</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td> 流程扩展表 id</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>procInstId</td>
<td> 流程实例 id</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>reason</td>
<td> 撤销理由原因说明</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="流程-通过id删除草稿状态申请"><a href="#流程-通过id删除草稿状态申请" class="headerlink" title="流程-通过id删除草稿状态申请"></a>流程 - 通过 id 删除草稿状态申请</h2><p><strong>接口地址</strong>:<code>/fastrun/actBusiness/delByIds</code></p>
<p><strong>请求方式</strong>:<code>POST</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 通过 id 删除草稿状态申请</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>ids</td>
<td> 流程扩展表 id，多个，号相连</td>
<td> body</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象</td>
</tr>
<tr>
<td> 201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="流程-查询申请列表-与-已办列表的合集"><a href="#流程-查询申请列表-与-已办列表的合集" class="headerlink" title="流程-查询申请列表 与 已办列表的合集"></a>流程 - 查询申请列表 与 已办列表的合集</h2><p><strong>接口地址</strong>:<code>/fastrun/actBusiness/doAndApplyList</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 查询申请列表 与 已办列表的合集</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>applyTime</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>assignees</td>
<td> 审批人（用户名），多个，号相连</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>categoryId</td>
<td>categoryId</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>createBy</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>createTime</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>currTaskName</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>dataMap</td>
<td></td>
<td>query</td>
<td>false</td>
<td>object</td>
<td></td>
</tr>
<tr>
<td>delFlag</td>
<td></td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>firstGateway</td>
<td> 第一个节点是否为网关</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>isHistory</td>
<td></td>
<td>query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>name</td>
<td>name</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>params</td>
<td> 流程设置参数</td>
<td> query</td>
<td>false</td>
<td>object</td>
<td></td>
</tr>
<tr>
<td>priority</td>
<td> 任务优先级 默认 0 0 普通 1 重要 2 紧急</td>
<td> query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>procDefId</td>
<td> 流程定义 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>procInstId</td>
<td> 流程实例 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>procInstStatus</td>
<td></td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>processName</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td></td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>routeName</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>sendEmail</td>
<td> 是否发送邮件通知 - 暂无用</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>sendMessage</td>
<td> 是否发送站内消息</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>sendSms</td>
<td> 是否发送短信通知 - 暂无用</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>status</td>
<td></td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>tableId</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>tableName</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>title</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>updateBy</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>updateTime</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>userId</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象</td>
</tr>
<tr>
<td> 401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="流程-修改业务表单信息"><a href="#流程-修改业务表单信息" class="headerlink" title="流程-修改业务表单信息"></a>流程 - 修改业务表单信息</h2><p><strong>接口地址</strong>:<code>/fastrun/actBusiness/editForm</code></p>
<p><strong>请求方式</strong>:<code>POST</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 业务表单参数数据一并传过来！</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td> 业务表数据 id</td>
<td>body</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象</td>
</tr>
<tr>
<td> 201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="流程-获取业务表单信息"><a href="#流程-获取业务表单信息" class="headerlink" title="流程-获取业务表单信息"></a>流程 - 获取业务表单信息</h2><p><strong>接口地址</strong>:<code>/fastrun/actBusiness/getForm</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 获取业务表单信息</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>tableId</td>
<td> 业务表数据 id</td>
<td>body</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>tableName</td>
<td> 业务表名</td>
<td> body</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象</td>
</tr>
<tr>
<td> 401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="流程-流程列表"><a href="#流程-流程列表" class="headerlink" title="流程-流程列表"></a>流程 - 流程列表</h2><p><strong>接口地址</strong>:<code>/fastrun/actBusiness/listData</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 流程列表，登录用户的流程列表</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>applyTime</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>assignees</td>
<td> 审批人（用户名），多个，号相连</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>createBy</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>createTime</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>currTaskName</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>dataMap</td>
<td></td>
<td>query</td>
<td>false</td>
<td>object</td>
<td></td>
</tr>
<tr>
<td>delFlag</td>
<td></td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>firstGateway</td>
<td> 第一个节点是否为网关</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>isHistory</td>
<td></td>
<td>query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>params</td>
<td> 流程设置参数</td>
<td> query</td>
<td>false</td>
<td>object</td>
<td></td>
</tr>
<tr>
<td>priority</td>
<td> 任务优先级 默认 0 0 普通 1 重要 2 紧急</td>
<td> query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>procDefId</td>
<td> 流程定义 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>procInstId</td>
<td> 流程实例 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>procInstStatus</td>
<td></td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>processName</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td></td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>routeName</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>sendEmail</td>
<td> 是否发送邮件通知 - 暂无用</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>sendMessage</td>
<td> 是否发送站内消息</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>sendSms</td>
<td> 是否发送短信通知 - 暂无用</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>status</td>
<td></td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>tableId</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>tableName</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>title</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>updateBy</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>updateTime</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>userId</td>
<td></td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象</td>
</tr>
<tr>
<td> 401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="流程-通过流程定义id获取第一个任务节点"><a href="#流程-通过流程定义id获取第一个任务节点" class="headerlink" title="流程-通过流程定义id获取第一个任务节点"></a>流程 - 通过流程定义 id 获取第一个任务节点</h2><p><strong>接口地址</strong>:<code>/fastrun/actProcessIns/getFirstNode</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 通过流程定义 id 获取第一个任务节点，包含可供选择的审批人、网关信息等</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>procDefId</td>
<td> 流程定义 Id</td>
<td>body</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>tableId</td>
<td> 表 id</td>
<td>body</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>tableName</td>
<td> 表名</td>
<td> body</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象</td>
</tr>
<tr>
<td> 401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="流程-任务节点审批-驳回至发起人"><a href="#流程-任务节点审批-驳回至发起人" class="headerlink" title="流程-任务节点审批 驳回至发起人"></a>流程 - 任务节点审批 驳回至发起人</h2><p><strong>接口地址</strong>:<code>/fastrun/actTask/back</code></p>
<p><strong>请求方式</strong>:<code>POST</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 任务节点审批 驳回至发起人</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>comment</td>
<td> 意见评论</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>id</td>
<td> 任务 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>procInstId</td>
<td> 流程实例 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>sendEmail</td>
<td> 是否发送邮件通知</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>sendMessage</td>
<td> 是否发送站内消息</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>sendSms</td>
<td> 是否发送短信通知</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="任务节点审批驳回至指定历史节点"><a href="#任务节点审批驳回至指定历史节点" class="headerlink" title="任务节点审批驳回至指定历史节点"></a>任务节点审批驳回至指定历史节点</h2><p><strong>接口地址</strong>:<code>/fastrun/actTask/backToTask</code></p>
<p><strong>请求方式</strong>:<code>POST</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>:</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>assignees</td>
<td> 原节点审批人</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>backTaskKey</td>
<td> 驳回指定节点 key</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>comment</td>
<td> 意见评论</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>id</td>
<td> 任务 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>priority</td>
<td> 优先级</td>
<td> query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>procDefId</td>
<td> 流程定义 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>procInstId</td>
<td> 流程实例 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>sendEmail</td>
<td> 是否发送邮件通知</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>sendMessage</td>
<td> 是否发送站内消息</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>sendSms</td>
<td> 是否发送短信通知</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="委托他人代办"><a href="#委托他人代办" class="headerlink" title="委托他人代办"></a>委托他人代办</h2><p><strong>接口地址</strong>:<code>/fastrun/actTask/delegate</code></p>
<p><strong>请求方式</strong>:<code>POST</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>:</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>comment</td>
<td> 意见评论</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>id</td>
<td> 任务 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>procInstId</td>
<td> 流程实例 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>sendEmail</td>
<td> 是否发送邮件通知</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>sendMessage</td>
<td> 是否发送站内消息</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>sendSms</td>
<td> 是否发送短信通知</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>userId</td>
<td> 委托用户 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="流程-删除任务历史"><a href="#流程-删除任务历史" class="headerlink" title="流程-删除任务历史"></a>流程 - 删除任务历史</h2><p><strong>接口地址</strong>:<code>/fastrun/actTask/deleteHistoric/{ids}</code></p>
<p><strong>请求方式</strong>:<code>POST</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 删除任务历史</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>ids</td>
<td>ids</td>
<td>path</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="流程-已办列表"><a href="#流程-已办列表" class="headerlink" title="流程-已办列表"></a>流程 - 已办列表</h2><p><strong>接口地址</strong>:<code>/fastrun/actTask/doneList</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 已办列表</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>categoryId</td>
<td>categoryId</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>name</td>
<td>name</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>priority</td>
<td>priority</td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="流程-获取可返回的节点"><a href="#流程-获取可返回的节点" class="headerlink" title="流程-获取可返回的节点"></a>流程 - 获取可返回的节点</h2><p><strong>接口地址</strong>:<code>/fastrun/actTask/getBackList/{procInstId}</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 获取可返回的节点</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>procInstId</td>
<td>procInstId</td>
<td>path</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="流程-流程流转历史"><a href="#流程-流程流转历史" class="headerlink" title="流程-流程流转历史"></a>流程 - 流程流转历史</h2><p><strong>接口地址</strong>:<code>/fastrun/actTask/historicFlow/{id}</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 流程流转历史</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td> 实例 Id</td>
<td>path</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="任务节点审批通过"><a href="#任务节点审批通过" class="headerlink" title="任务节点审批通过"></a>任务节点审批通过</h2><p><strong>接口地址</strong>:<code>/fastrun/actTask/pass</code></p>
<p><strong>请求方式</strong>:<code>POST</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>:</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>assignees</td>
<td> 下个节点审批人</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>comment</td>
<td> 意见评论</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>id</td>
<td> 任务 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>priority</td>
<td> 优先级</td>
<td> query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>procInstId</td>
<td> 流程实例 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>sendEmail</td>
<td> 是否发送邮件通知</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>sendMessage</td>
<td> 是否发送站内消息</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>sendSms</td>
<td> 是否发送短信通知</td>
<td> query</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="流程-待办条数"><a href="#流程-待办条数" class="headerlink" title="流程-待办条数"></a>流程 - 待办条数</h2><p><strong>接口地址</strong>:<code>/fastrun/actTask/todoCounts</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 待办列表</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>procDefIds</td>
<td> 流程定义 key</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="流程-代办列表"><a href="#流程-代办列表" class="headerlink" title="流程-代办列表"></a>流程 - 代办列表</h2><p><strong>接口地址</strong>:<code>/fastrun/actTask/todoList</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 代办列表</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>categoryId</td>
<td> 任务分类</td>
<td> body</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>createTime_begin</td>
<td> 创建开始时间</td>
<td> body</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>createTime_end</td>
<td> 创建结束时间</td>
<td> body</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>name</td>
<td> 任务名称</td>
<td> body</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>priority</td>
<td> 优先级</td>
<td> body</td>
<td>false</td>
<td>integer</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="通过当前节点定义id获取下一个节点"><a href="#通过当前节点定义id获取下一个节点" class="headerlink" title="通过当前节点定义id获取下一个节点"></a>通过当前节点定义 id 获取下一个节点</h2><p><strong>接口地址</strong>:<code>/fastrun/activiti_process/getNextNode</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>:</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>currActId</td>
<td> 当前节点定义 id</td>
<td>body</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>procDefId</td>
<td> 流程定义 id</td>
<td>body</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>procInstId</td>
<td> 当前节点定义 id</td>
<td>body</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象</td>
</tr>
<tr>
<td> 401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="通过节点nodeId获取审批人"><a href="#通过节点nodeId获取审批人" class="headerlink" title="通过节点nodeId获取审批人"></a>通过节点 nodeId 获取审批人</h2><p><strong>接口地址</strong>:<code>/fastrun/activiti_process/getNode</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>:</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>nodeId</td>
<td> 节点 nodeId</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>tableId</td>
<td> 表单 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>tableName</td>
<td> 表单名称</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象</td>
</tr>
<tr>
<td> 401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="流程-获取可用流程"><a href="#流程-获取可用流程" class="headerlink" title="流程-获取可用流程"></a>流程 - 获取可用流程</h2><p><strong>接口地址</strong>:<code>/fastrun/activiti_process/listData</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 获取可用流程</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>lckey</td>
<td> 流程 key</td>
<td>body</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>lcmc</td>
<td> 流程名称</td>
<td> body</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>roles</td>
<td> 如果此项不为空，则会过滤当前用户的角色权限</td>
<td> body</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>status</td>
<td> 流程状态 部署后默认 1 激活</td>
<td> body</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>zx</td>
<td> 是否最新</td>
<td> body</td>
<td>false</td>
<td>boolean</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象</td>
</tr>
<tr>
<td> 401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="获取最新部署的流程定义"><a href="#获取最新部署的流程定义" class="headerlink" title="获取最新部署的流程定义"></a>获取最新部署的流程定义</h2><p><strong>接口地址</strong>:<code>/fastrun/activiti_process/queryNewestProcess</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>:</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>processKey</td>
<td> 流程定义 key</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象</td>
</tr>
<tr>
<td> 401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h1 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h1><h2 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/login</code></p>
<p><strong>请求方式</strong>:<code>POST</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>:</p>
<p><strong>请求示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"captcha"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"checkKey"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"password"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"username"</span>: <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>sysLoginModel</td>
<td> 登录对象</td>
<td> body</td>
<td>true</td>
<td> 登录对象</td>
<td>登录对象</td>
</tr>
<tr>
<td>  captcha</td>
<td> 验证码</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  checkKey</td>
<td> 验证码 key</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  password</td>
<td> 密码</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  username</td>
<td> 账号</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «JSONObject»</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="手机号登录接口"><a href="#手机号登录接口" class="headerlink" title="手机号登录接口"></a>手机号登录接口</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/phoneLogin</code></p>
<p><strong>请求方式</strong>:<code>POST</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>:</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>jsonObject</td>
<td>jsonObject</td>
<td>body</td>
<td>true</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «JSONObject»</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="获取验证码"><a href="#获取验证码" class="headerlink" title="获取验证码"></a>获取验证码</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/randomImage/{key}</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>:</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>key</td>
<td>key</td>
<td>path</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «string»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h1 id="编码校验规则"><a href="#编码校验规则" class="headerlink" title="编码校验规则"></a>编码校验规则</h1><h2 id="编码校验规则-添加"><a href="#编码校验规则-添加" class="headerlink" title="编码校验规则-添加"></a>编码校验规则 - 添加</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/checkRule/add</code></p>
<p><strong>请求方式</strong>:<code>POST</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 编码校验规则 - 添加</p>
<p><strong>请求示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"createBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"createTime"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"id"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"ruleCode"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"ruleDescription"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"ruleJson"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"ruleName"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateTime"</span>: <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>sysCheckRule</td>
<td> 编码校验规则</td>
<td> body</td>
<td>true</td>
<td>sys_check_rule 对象</td>
<td> sys_check_rule 对象</td>
</tr>
<tr>
<td>  createBy</td>
<td> 创建人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createTime</td>
<td> 创建时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  id</td>
<td> 主键 id</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  ruleCode</td>
<td> 规则 Code</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  ruleDescription</td>
<td> 规则描述</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  ruleJson</td>
<td> 规则 JSON</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  ruleName</td>
<td> 规则名称</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateBy</td>
<td> 更新人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateTime</td>
<td> 更新时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象</td>
</tr>
<tr>
<td> 201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="编码校验规则-通过Code校验传入的值"><a href="#编码校验规则-通过Code校验传入的值" class="headerlink" title="编码校验规则-通过Code校验传入的值"></a>编码校验规则 - 通过 Code 校验传入的值</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/checkRule/checkByCode</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 编码校验规则 - 通过 Code 校验传入的值</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>ruleCode</td>
<td>ruleCode</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>value</td>
<td>value</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象</td>
</tr>
<tr>
<td> 401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="编码校验规则-通过id删除"><a href="#编码校验规则-通过id删除" class="headerlink" title="编码校验规则-通过id删除"></a>编码校验规则 - 通过 id 删除</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/checkRule/delete</code></p>
<p><strong>请求方式</strong>:<code>DELETE</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 编码校验规则 - 通过 id 删除</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象</td>
</tr>
<tr>
<td> 204</td>
<td>No Content</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="编码校验规则-批量删除"><a href="#编码校验规则-批量删除" class="headerlink" title="编码校验规则-批量删除"></a>编码校验规则 - 批量删除</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/checkRule/deleteBatch</code></p>
<p><strong>请求方式</strong>:<code>DELETE</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 编码校验规则 - 批量删除</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>ids</td>
<td>ids</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象</td>
</tr>
<tr>
<td> 204</td>
<td>No Content</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="编码校验规则-编辑"><a href="#编码校验规则-编辑" class="headerlink" title="编码校验规则-编辑"></a>编码校验规则 - 编辑</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/checkRule/edit</code></p>
<p><strong>请求方式</strong>:<code>PUT</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 编码校验规则 - 编辑</p>
<p><strong>请求示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"createBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"createTime"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"id"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"ruleCode"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"ruleDescription"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"ruleJson"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"ruleName"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateTime"</span>: <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>sysCheckRule</td>
<td> 编码校验规则</td>
<td> body</td>
<td>true</td>
<td>sys_check_rule 对象</td>
<td> sys_check_rule 对象</td>
</tr>
<tr>
<td>  createBy</td>
<td> 创建人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createTime</td>
<td> 创建时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  id</td>
<td> 主键 id</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  ruleCode</td>
<td> 规则 Code</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  ruleDescription</td>
<td> 规则描述</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  ruleJson</td>
<td> 规则 JSON</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  ruleName</td>
<td> 规则名称</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateBy</td>
<td> 更新人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateTime</td>
<td> 更新时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象</td>
</tr>
<tr>
<td> 201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="编码校验规则-分页列表查询"><a href="#编码校验规则-分页列表查询" class="headerlink" title="编码校验规则-分页列表查询"></a>编码校验规则 - 分页列表查询</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/checkRule/list</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 编码校验规则 - 分页列表查询</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>createBy</td>
<td> 创建人</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>createTime</td>
<td> 创建时间</td>
<td> query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>id</td>
<td> 主键 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>pageNo</td>
<td>pageNo</td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>pageSize</td>
<td>pageSize</td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>ruleCode</td>
<td> 规则 Code</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>ruleDescription</td>
<td> 规则描述</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>ruleJson</td>
<td> 规则 JSON</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>ruleName</td>
<td> 规则名称</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>updateBy</td>
<td> 更新人</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>updateTime</td>
<td> 更新时间</td>
<td> query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象</td>
</tr>
<tr>
<td> 401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="编码校验规则-通过id查询"><a href="#编码校验规则-通过id查询" class="headerlink" title="编码校验规则-通过id查询"></a>编码校验规则 - 通过 id 查询</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/checkRule/queryById</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 编码校验规则 - 通过 id 查询</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象</td>
</tr>
<tr>
<td> 401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h1 id="职务表"><a href="#职务表" class="headerlink" title="职务表"></a>职务表</h1><h2 id="职务表-添加"><a href="#职务表-添加" class="headerlink" title="职务表-添加"></a>职务表 - 添加</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/position/add</code></p>
<p><strong>请求方式</strong>:<code>POST</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 职务表 - 添加</p>
<p><strong>请求示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"companyId"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"createBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"createTime"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"id"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"name"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"postRank"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"sysOrgCode"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateTime"</span>: <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>sysPosition</td>
<td> 职务表</td>
<td> body</td>
<td>true</td>
<td>sys_position 对象</td>
<td> sys_position 对象</td>
</tr>
<tr>
<td>  code</td>
<td> 职务编码</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  companyId</td>
<td> 公司 id</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createBy</td>
<td> 创建人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createTime</td>
<td> 创建时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  id</td>
<td>id</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  name</td>
<td> 职务名称</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  postRank</td>
<td> 职级</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  sysOrgCode</td>
<td> 组织机构编码</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateBy</td>
<td> 修改人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateTime</td>
<td> 修改时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «sys_position 对象 »</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> sys_position 对象</td>
<td> sys_position 对象</td>
</tr>
<tr>
<td>  code</td>
<td> 职务编码</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  companyId</td>
<td> 公司 id</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createBy</td>
<td> 创建人</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  createTime</td>
<td> 创建时间</td>
<td> string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  id</td>
<td>id</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  name</td>
<td> 职务名称</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  postRank</td>
<td> 职级</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  sysOrgCode</td>
<td> 组织机构编码</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  updateBy</td>
<td> 修改人</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  updateTime</td>
<td> 修改时间</td>
<td> string(date-time)</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {</span><br><span class="line">		<span class="string">"code"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"companyId"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"createBy"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"createTime"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"id"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"name"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"postRank"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"sysOrgCode"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"updateBy"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"updateTime"</span>: <span class="string">""</span></span><br><span class="line">	},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="职务表-通过id删除"><a href="#职务表-通过id删除" class="headerlink" title="职务表-通过id删除"></a>职务表 - 通过 id 删除</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/position/delete</code></p>
<p><strong>请求方式</strong>:<code>DELETE</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 职务表 - 通过 id 删除</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>204</td>
<td>No Content</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="职务表-批量删除"><a href="#职务表-批量删除" class="headerlink" title="职务表-批量删除"></a>职务表 - 批量删除</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/position/deleteBatch</code></p>
<p><strong>请求方式</strong>:<code>DELETE</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 职务表 - 批量删除</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>ids</td>
<td>ids</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «sys_position 对象 »</td>
</tr>
<tr>
<td>204</td>
<td>No Content</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> sys_position 对象</td>
<td> sys_position 对象</td>
</tr>
<tr>
<td>  code</td>
<td> 职务编码</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  companyId</td>
<td> 公司 id</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createBy</td>
<td> 创建人</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  createTime</td>
<td> 创建时间</td>
<td> string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  id</td>
<td>id</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  name</td>
<td> 职务名称</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  postRank</td>
<td> 职级</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  sysOrgCode</td>
<td> 组织机构编码</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  updateBy</td>
<td> 修改人</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  updateTime</td>
<td> 修改时间</td>
<td> string(date-time)</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {</span><br><span class="line">		<span class="string">"code"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"companyId"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"createBy"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"createTime"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"id"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"name"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"postRank"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"sysOrgCode"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"updateBy"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"updateTime"</span>: <span class="string">""</span></span><br><span class="line">	},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="职务表-编辑"><a href="#职务表-编辑" class="headerlink" title="职务表-编辑"></a>职务表 - 编辑</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/position/edit</code></p>
<p><strong>请求方式</strong>:<code>PUT</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 职务表 - 编辑</p>
<p><strong>请求示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"companyId"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"createBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"createTime"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"id"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"name"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"postRank"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"sysOrgCode"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateTime"</span>: <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>sysPosition</td>
<td> 职务表</td>
<td> body</td>
<td>true</td>
<td>sys_position 对象</td>
<td> sys_position 对象</td>
</tr>
<tr>
<td>  code</td>
<td> 职务编码</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  companyId</td>
<td> 公司 id</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createBy</td>
<td> 创建人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createTime</td>
<td> 创建时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  id</td>
<td>id</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  name</td>
<td> 职务名称</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  postRank</td>
<td> 职级</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  sysOrgCode</td>
<td> 组织机构编码</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateBy</td>
<td> 修改人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateTime</td>
<td> 修改时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «sys_position 对象 »</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> sys_position 对象</td>
<td> sys_position 对象</td>
</tr>
<tr>
<td>  code</td>
<td> 职务编码</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  companyId</td>
<td> 公司 id</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createBy</td>
<td> 创建人</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  createTime</td>
<td> 创建时间</td>
<td> string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  id</td>
<td>id</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  name</td>
<td> 职务名称</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  postRank</td>
<td> 职级</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  sysOrgCode</td>
<td> 组织机构编码</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  updateBy</td>
<td> 修改人</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  updateTime</td>
<td> 修改时间</td>
<td> string(date-time)</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {</span><br><span class="line">		<span class="string">"code"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"companyId"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"createBy"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"createTime"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"id"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"name"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"postRank"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"sysOrgCode"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"updateBy"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"updateTime"</span>: <span class="string">""</span></span><br><span class="line">	},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="职务表-分页列表查询"><a href="#职务表-分页列表查询" class="headerlink" title="职务表-分页列表查询"></a>职务表 - 分页列表查询</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/position/list</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 职务表 - 分页列表查询</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 职务编码</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>companyId</td>
<td> 公司 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>createBy</td>
<td> 创建人</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>createTime</td>
<td> 创建时间</td>
<td> query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>name</td>
<td> 职务名称</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>pageNo</td>
<td>pageNo</td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>pageSize</td>
<td>pageSize</td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>postRank</td>
<td> 职级</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>sysOrgCode</td>
<td> 组织机构编码</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>updateBy</td>
<td> 修改人</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>updateTime</td>
<td> 修改时间</td>
<td> query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «IPage«sys_position 对象 »»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> IPage«sys_position 对象 »</td>
<td>IPage«sys_position 对象 »</td>
</tr>
<tr>
<td>  current</td>
<td></td>
<td>integer(int64)</td>
<td></td>
</tr>
<tr>
<td>  hitCount</td>
<td></td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>  pages</td>
<td></td>
<td>integer(int64)</td>
<td></td>
</tr>
<tr>
<td>  records</td>
<td></td>
<td>array</td>
<td>sys_position 对象</td>
</tr>
<tr>
<td>    code</td>
<td> 职务编码</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>    companyId</td>
<td> 公司 id</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>    createBy</td>
<td> 创建人</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>    createTime</td>
<td> 创建时间</td>
<td> string(date-time)</td>
<td></td>
</tr>
<tr>
<td>    id</td>
<td>id</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>    name</td>
<td> 职务名称</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>    postRank</td>
<td> 职级</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>    sysOrgCode</td>
<td> 组织机构编码</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>    updateBy</td>
<td> 修改人</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>    updateTime</td>
<td> 修改时间</td>
<td> string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  searchCount</td>
<td></td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>  size</td>
<td></td>
<td>integer(int64)</td>
<td></td>
</tr>
<tr>
<td>  total</td>
<td></td>
<td>integer(int64)</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {</span><br><span class="line">		<span class="string">"current"</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="string">"hitCount"</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="string">"pages"</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="string">"records"</span>: [</span><br><span class="line">			{</span><br><span class="line">				<span class="string">"code"</span>: <span class="string">""</span>,</span><br><span class="line">				<span class="string">"companyId"</span>: <span class="string">""</span>,</span><br><span class="line">				<span class="string">"createBy"</span>: <span class="string">""</span>,</span><br><span class="line">				<span class="string">"createTime"</span>: <span class="string">""</span>,</span><br><span class="line">				<span class="string">"id"</span>: <span class="string">""</span>,</span><br><span class="line">				<span class="string">"name"</span>: <span class="string">""</span>,</span><br><span class="line">				<span class="string">"postRank"</span>: <span class="string">""</span>,</span><br><span class="line">				<span class="string">"sysOrgCode"</span>: <span class="string">""</span>,</span><br><span class="line">				<span class="string">"updateBy"</span>: <span class="string">""</span>,</span><br><span class="line">				<span class="string">"updateTime"</span>: <span class="string">""</span></span><br><span class="line">			}</span><br><span class="line">		],</span><br><span class="line">		<span class="string">"searchCount"</span>: <span class="literal">true</span>,</span><br><span class="line">		<span class="string">"size"</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="string">"total"</span>: <span class="number">0</span></span><br><span class="line">	},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="职务表-通过code查询"><a href="#职务表-通过code查询" class="headerlink" title="职务表-通过code查询"></a>职务表 - 通过 code 查询</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/position/queryByCode</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 职务表 - 通过 code 查询</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td>code</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «sys_position 对象 »</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> sys_position 对象</td>
<td> sys_position 对象</td>
</tr>
<tr>
<td>  code</td>
<td> 职务编码</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  companyId</td>
<td> 公司 id</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createBy</td>
<td> 创建人</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  createTime</td>
<td> 创建时间</td>
<td> string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  id</td>
<td>id</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  name</td>
<td> 职务名称</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  postRank</td>
<td> 职级</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  sysOrgCode</td>
<td> 组织机构编码</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  updateBy</td>
<td> 修改人</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  updateTime</td>
<td> 修改时间</td>
<td> string(date-time)</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {</span><br><span class="line">		<span class="string">"code"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"companyId"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"createBy"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"createTime"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"id"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"name"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"postRank"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"sysOrgCode"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"updateBy"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"updateTime"</span>: <span class="string">""</span></span><br><span class="line">	},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="职务表-通过id查询"><a href="#职务表-通过id查询" class="headerlink" title="职务表-通过id查询"></a>职务表 - 通过 id 查询</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/position/queryById</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 职务表 - 通过 id 查询</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «sys_position 对象 »</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> sys_position 对象</td>
<td> sys_position 对象</td>
</tr>
<tr>
<td>  code</td>
<td> 职务编码</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  companyId</td>
<td> 公司 id</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createBy</td>
<td> 创建人</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  createTime</td>
<td> 创建时间</td>
<td> string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  id</td>
<td>id</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  name</td>
<td> 职务名称</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  postRank</td>
<td> 职级</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  sysOrgCode</td>
<td> 组织机构编码</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  updateBy</td>
<td> 修改人</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>  updateTime</td>
<td> 修改时间</td>
<td> string(date-time)</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {</span><br><span class="line">		<span class="string">"code"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"companyId"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"createBy"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"createTime"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"id"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"name"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"postRank"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"sysOrgCode"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"updateBy"</span>: <span class="string">""</span>,</span><br><span class="line">		<span class="string">"updateTime"</span>: <span class="string">""</span></span><br><span class="line">	},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h1 id="部门权限表"><a href="#部门权限表" class="headerlink" title="部门权限表"></a>部门权限表</h1><h2 id="部门权限表-添加"><a href="#部门权限表-添加" class="headerlink" title="部门权限表-添加"></a>部门权限表 - 添加</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/sysDepartPermission/add</code></p>
<p><strong>请求方式</strong>:<code>POST</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 部门权限表 - 添加</p>
<p><strong>请求示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"dataRuleIds"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"departId"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"id"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"permissionId"</span>: <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>sysDepartPermission</td>
<td> 部门权限表</td>
<td> body</td>
<td>true</td>
<td>sys_depart_permission 对象</td>
<td> sys_depart_permission 对象</td>
</tr>
<tr>
<td>  dataRuleIds</td>
<td> 数据规则 id</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  departId</td>
<td> 部门 id</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  id</td>
<td>id</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  permissionId</td>
<td> 权限 id</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="部门权限表-通过id删除"><a href="#部门权限表-通过id删除" class="headerlink" title="部门权限表-通过id删除"></a>部门权限表 - 通过 id 删除</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/sysDepartPermission/delete</code></p>
<p><strong>请求方式</strong>:<code>DELETE</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 部门权限表 - 通过 id 删除</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>204</td>
<td>No Content</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="部门权限表-批量删除"><a href="#部门权限表-批量删除" class="headerlink" title="部门权限表-批量删除"></a>部门权限表 - 批量删除</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/sysDepartPermission/deleteBatch</code></p>
<p><strong>请求方式</strong>:<code>DELETE</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 部门权限表 - 批量删除</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>ids</td>
<td>ids</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>204</td>
<td>No Content</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="部门权限表-编辑"><a href="#部门权限表-编辑" class="headerlink" title="部门权限表-编辑"></a>部门权限表 - 编辑</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/sysDepartPermission/edit</code></p>
<p><strong>请求方式</strong>:<code>PUT</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 部门权限表 - 编辑</p>
<p><strong>请求示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"dataRuleIds"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"departId"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"id"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"permissionId"</span>: <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>sysDepartPermission</td>
<td> 部门权限表</td>
<td> body</td>
<td>true</td>
<td>sys_depart_permission 对象</td>
<td> sys_depart_permission 对象</td>
</tr>
<tr>
<td>  dataRuleIds</td>
<td> 数据规则 id</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  departId</td>
<td> 部门 id</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  id</td>
<td>id</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  permissionId</td>
<td> 权限 id</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="部门权限表-分页列表查询"><a href="#部门权限表-分页列表查询" class="headerlink" title="部门权限表-分页列表查询"></a>部门权限表 - 分页列表查询</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/sysDepartPermission/list</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 部门权限表 - 分页列表查询</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>dataRuleIds</td>
<td> 数据规则 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>departId</td>
<td> 部门 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>pageNo</td>
<td>pageNo</td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>pageSize</td>
<td>pageSize</td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>permissionId</td>
<td> 权限 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="部门权限表-通过id查询"><a href="#部门权限表-通过id查询" class="headerlink" title="部门权限表-通过id查询"></a>部门权限表 - 通过 id 查询</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/sysDepartPermission/queryById</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 部门权限表 - 通过 id 查询</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h1 id="部门角色"><a href="#部门角色" class="headerlink" title="部门角色"></a>部门角色</h1><h2 id="部门角色-添加"><a href="#部门角色-添加" class="headerlink" title="部门角色-添加"></a>部门角色 - 添加</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/sysDepartRole/add</code></p>
<p><strong>请求方式</strong>:<code>POST</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 部门角色 - 添加</p>
<p><strong>请求示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"createBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"createTime"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"departId"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"id"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"roleCode"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"roleName"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateTime"</span>: <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>sysDepartRole</td>
<td> 部门角色</td>
<td> body</td>
<td>true</td>
<td>sys_depart_role 对象</td>
<td> sys_depart_role 对象</td>
</tr>
<tr>
<td>  createBy</td>
<td> 创建人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createTime</td>
<td> 创建时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  departId</td>
<td> 部门 id</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  description</td>
<td> 描述</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  id</td>
<td>id</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  roleCode</td>
<td> 部门角色编码</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  roleName</td>
<td> 部门角色名称</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateBy</td>
<td> 更新人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateTime</td>
<td> 更新时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="部门角色-通过id删除"><a href="#部门角色-通过id删除" class="headerlink" title="部门角色-通过id删除"></a>部门角色 - 通过 id 删除</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/sysDepartRole/delete</code></p>
<p><strong>请求方式</strong>:<code>DELETE</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 部门角色 - 通过 id 删除</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>204</td>
<td>No Content</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="部门角色-批量删除"><a href="#部门角色-批量删除" class="headerlink" title="部门角色-批量删除"></a>部门角色 - 批量删除</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/sysDepartRole/deleteBatch</code></p>
<p><strong>请求方式</strong>:<code>DELETE</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 部门角色 - 批量删除</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>ids</td>
<td>ids</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>204</td>
<td>No Content</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="部门角色-编辑"><a href="#部门角色-编辑" class="headerlink" title="部门角色-编辑"></a>部门角色 - 编辑</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/sysDepartRole/edit</code></p>
<p><strong>请求方式</strong>:<code>PUT</code></p>
<p><strong>请求数据类型</strong>:<code>application/json</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 部门角色 - 编辑</p>
<p><strong>请求示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"createBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"createTime"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"departId"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"id"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"roleCode"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"roleName"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateBy"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"updateTime"</span>: <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>sysDepartRole</td>
<td> 部门角色</td>
<td> body</td>
<td>true</td>
<td>sys_depart_role 对象</td>
<td> sys_depart_role 对象</td>
</tr>
<tr>
<td>  createBy</td>
<td> 创建人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  createTime</td>
<td> 创建时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>  departId</td>
<td> 部门 id</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  description</td>
<td> 描述</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  id</td>
<td>id</td>
<td></td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  roleCode</td>
<td> 部门角色编码</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  roleName</td>
<td> 部门角色名称</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateBy</td>
<td> 更新人</td>
<td></td>
<td> false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>  updateTime</td>
<td> 更新时间</td>
<td></td>
<td> false</td>
<td>string(date-time)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>201</td>
<td>Created</td>
<td></td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="部门角色-分页列表查询"><a href="#部门角色-分页列表查询" class="headerlink" title="部门角色-分页列表查询"></a>部门角色 - 分页列表查询</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/sysDepartRole/list</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 部门角色 - 分页列表查询</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>createBy</td>
<td> 创建人</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>createTime</td>
<td> 创建时间</td>
<td> query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
<tr>
<td>departId</td>
<td> 部门 id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>deptId</td>
<td>deptId</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>description</td>
<td> 描述</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>pageNo</td>
<td>pageNo</td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>pageSize</td>
<td>pageSize</td>
<td>query</td>
<td>false</td>
<td>integer(int32)</td>
<td></td>
</tr>
<tr>
<td>roleCode</td>
<td> 部门角色编码</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>roleName</td>
<td> 部门角色名称</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>updateBy</td>
<td> 更新人</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>updateTime</td>
<td> 更新时间</td>
<td> query</td>
<td>false</td>
<td>string(date-time)</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h2 id="部门角色-通过id查询"><a href="#部门角色-通过id查询" class="headerlink" title="部门角色-通过id查询"></a>部门角色 - 通过 id 查询</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/sysDepartRole/queryById</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>: 部门角色 - 通过 id 查询</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>id</td>
<td>query</td>
<td>true</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h1 id="重复校验"><a href="#重复校验" class="headerlink" title="重复校验"></a>重复校验</h1><h2 id="重复校验接口"><a href="#重复校验接口" class="headerlink" title="重复校验接口"></a>重复校验接口</h2><p><strong>接口地址</strong>:<code>/fastrun/sys/duplicate/check</code></p>
<p><strong>请求方式</strong>:<code>GET</code></p>
<p><strong>请求数据类型</strong>:<code>*</code></p>
<p><strong>响应数据类型</strong>:<code>*/*</code></p>
<p><strong>接口描述</strong>:</p>
<p><strong>请求参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th> in</th>
<th> 是否必须</th>
<th>数据类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>dataId</td>
<td> 数据 ID</td>
<td>query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>fieldName</td>
<td> 字段名</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>fieldVal</td>
<td> 字段值</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>tableName</td>
<td> 表名</td>
<td> query</td>
<td>false</td>
<td>string</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应状态</strong>:</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>说明</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td> 接口返回对象 «object»</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden</td>
<td></td>
</tr>
<tr>
<td>404</td>
<td>Not Found</td>
<td></td>
</tr>
</tbody></table>
<p><strong>响应参数</strong>:</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>参数说明</th>
<th>类型</th>
<th> schema</th>
</tr>
</thead>
<tbody><tr>
<td>code</td>
<td> 返回代码</td>
<td> integer(int32)</td>
<td>integer(int32)</td>
</tr>
<tr>
<td>message</td>
<td> 返回处理消息</td>
<td> string</td>
<td></td>
</tr>
<tr>
<td>result</td>
<td> 返回数据对象</td>
<td> object</td>
<td></td>
</tr>
<tr>
<td>success</td>
<td> 成功标志</td>
<td> boolean</td>
<td></td>
</tr>
<tr>
<td>timestamp</td>
<td> 时间戳</td>
<td> integer(int64)</td>
<td>integer(int64)</td>
</tr>
</tbody></table>
<p><strong>响应示例</strong>:</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">	<span class="string">"code"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="string">"message"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="string">"result"</span>: {},</span><br><span class="line">	<span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"timestamp"</span>: <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark 操作</title>
    <url>/2021/05/25/52-Spark%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/52.jpg"></p>
</span>

<span id="more"></span>

<h1 id="Sprak"><a href="#Sprak" class="headerlink" title="Sprak"></a>Sprak</h1><ul>
<li><p>sprak 命令</p>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line">spark <span class="keyword">shell</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>特点</p>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">轻</span><br><span class="line">核心代码只有3万行</span><br><span class="line">快</span><br><span class="line">对小数据集可达到亚秒级</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>核心概念 RDD</p>
<figure class="highlight less"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">Resilient</span> <span class="selector-tag">Distributed</span> <span class="selector-tag">Datasets</span> 即弹性分布式数据集,是一个只读的,可分区的分布式数据集</span><br><span class="line"><span class="selector-tag">RDD</span> 默认存储在内存,当内存不足时,溢写到磁盘</span><br><span class="line"><span class="selector-tag">RDD</span>数据以分区形式在集群中存储</span><br><span class="line"><span class="selector-tag">RDD</span>具有血统机制(Lineage),发生数据丢失时,可快速进行数据恢复</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<figure class="highlight makefile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">shuffle:把相同数字放在一台服务器上</span></span><br><span class="line"></span><br><span class="line">窄依赖和宽依赖</span><br><span class="line"></span><br><span class="line"><span class="section">窄依赖: 子分区和父分区 1对1</span></span><br><span class="line"><span class="section">宽依赖: 子分区来自于多个父分区</span></span><br><span class="line"></span><br><span class="line">创建 - 创建数据</span><br><span class="line">转换 - 分区</span><br><span class="line">控制 - 缓存</span><br><span class="line">行动 - reduce等操作</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>数据格式</li>
</ul>
<p><img data-src="/images/big/data.jpg"></p>
<ul>
<li><p> RDD 操作</p>
<figure class="highlight nix"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#spark-shell</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#从本地文件创建</span></span><br><span class="line">val <span class="attr">line</span>  = sc.textFile(<span class="string">"file:///user/gg.txt"</span>)</span><br><span class="line"><span class="comment">#从hdfs创建</span></span><br><span class="line">val <span class="attr">line</span> = sc.textFile(<span class="string">"hdfs://hacluster/user/gg/tt.txt"</span>)</span><br><span class="line"><span class="comment">#集合创建</span></span><br><span class="line">val <span class="attr">array</span> = Array(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">val <span class="attr">list</span> = List(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="comment">#转换成rdd数据</span></span><br><span class="line">val <span class="attr">rdd1</span> = sc.parallelize(array)</span><br><span class="line"><span class="comment">#对rdd1每一个元素乘以2排序</span></span><br><span class="line">val <span class="attr">rdd2</span> = rdd1.<span class="built_in">map</span>(_ * <span class="number">2</span>).sortBy(<span class="attr">x=&gt;x,true)</span></span><br><span class="line"><span class="comment">#过滤出大于等于5的元素</span></span><br><span class="line">val <span class="attr">rdd3</span> = rdd2.filter(_ &gt;= <span class="number">5</span>)</span><br><span class="line"><span class="comment">#显示</span></span><br><span class="line">rdd3.collect</span><br><span class="line"></span><br><span class="line"><span class="comment">#flatMap</span></span><br><span class="line">rdd1里面的每一个元素先切分在压平</span><br><span class="line">val <span class="attr">rdd1</span> = sc.parallelize(Array(<span class="string">"a b c"</span>,<span class="string">"d e f"</span>,<span class="string">"h i j"</span>))</span><br><span class="line">val <span class="attr">rrd2</span> = rdd1.flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line">rrd2.collect</span><br><span class="line"></span><br><span class="line"><span class="comment">#交集 并集</span></span><br><span class="line">val <span class="attr">rdd1</span> = sc.parallelize(Array(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line">val <span class="attr">rdd2</span> = sc.parallelize(Array(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#并集</span></span><br><span class="line">val <span class="attr">rdd3</span> = rdd1.union(rdd2)</span><br><span class="line">rdd3.collect</span><br><span class="line"></span><br><span class="line"><span class="comment">#交集</span></span><br><span class="line">val <span class="attr">rdd3</span> = rdd1.intersection(rdd2)</span><br><span class="line">rdd3.collect</span><br><span class="line"></span><br><span class="line"><span class="comment">#去重</span></span><br><span class="line">val <span class="attr">rdd3</span> = rdd3.distinct.collect</span><br><span class="line">rdd3.collect</span><br><span class="line"></span><br><span class="line"><span class="comment">#join</span></span><br><span class="line">val <span class="attr">rdd1</span> = sc.parallelize(Array({<span class="string">"tom"</span>,<span class="number">1</span>},{<span class="string">"li"</span>,<span class="number">3</span>},{<span class="string">"wang"</span>,<span class="number">5</span>}))</span><br><span class="line">val <span class="attr">rdd2</span> = sc.parallelize(Array({<span class="string">"tom2"</span>,<span class="number">2</span>},{<span class="string">"tom"</span>,<span class="number">1</span>},{<span class="string">"li2"</span>,<span class="number">4</span>},{<span class="string">"wang2"</span>,<span class="number">56</span>}))</span><br><span class="line">val <span class="attr">rdd3</span> =  rdd1.join(rdd2)</span><br><span class="line">rdd3.collect</span><br><span class="line"></span><br><span class="line"><span class="comment">#并集</span></span><br><span class="line">val <span class="attr">rdd3</span> =  rdd1.union(rdd2)</span><br><span class="line">rdd3.collect</span><br><span class="line"></span><br><span class="line"><span class="comment">#按key进行分组</span></span><br><span class="line">val <span class="attr">rdd4</span> =  rdd3.groupByKey</span><br><span class="line">rdd4.collect</span><br><span class="line"></span><br><span class="line"><span class="comment">#cogroup</span></span><br><span class="line">多个迭代器</span><br><span class="line">val <span class="attr">rdd4</span> =  rdd1.cogroup(rdd2)</span><br><span class="line">rdd4.collect</span><br><span class="line"></span><br><span class="line"><span class="comment">#reduce</span></span><br><span class="line">val <span class="attr">rdd1</span> = sc.parallelize(Array(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line">val <span class="attr">rdd2</span> = rdd1.reduce(_ + _)</span><br><span class="line">rdd2</span><br><span class="line"></span><br><span class="line"><span class="comment">#reduceByKey sortByKey</span></span><br><span class="line">rdd1.reduceByKey(_ + _)</span><br><span class="line"></span><br><span class="line">val <span class="attr">rdd5</span> = rdd3.<span class="built_in">map</span>(<span class="attr">t=&gt;(t._2,t._1)).sortByKey(false).map(t=&gt;(t._2,t._1))</span></span><br><span class="line">rdd5.collect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#惰性机制 </span></span><br><span class="line">加载不存在的文件  只有collect真正执行才会报错</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>dataFrame 操作</p>
<figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">linux</span>本地创建文件gg.txt</span><br><span class="line"><span class="attribute">1</span> zhangsan <span class="number">20</span></span><br><span class="line"><span class="attribute">2</span> lsi <span class="number">28</span></span><br><span class="line"><span class="attribute">3</span> wangwu <span class="number">44</span></span><br><span class="line"><span class="attribute">4</span> sh <span class="number">22</span></span><br><span class="line"><span class="attribute">5</span> dd <span class="number">44</span></span><br><span class="line"><span class="attribute">6</span> kobe <span class="number">22</span></span><br><span class="line"><span class="comment">#上传</span></span><br><span class="line"><span class="attribute">hdfs</span> dfs -put gg.txt /user/gg/</span><br><span class="line"><span class="comment">#加载文件</span></span><br><span class="line"><span class="attribute">val</span> lineRDD = sc.textFile(<span class="string">"/user/gg/gg.txt"</span>).map(_.split(<span class="string">" "</span>))</span><br><span class="line"><span class="comment">#创建表</span></span><br><span class="line"><span class="attribute">case</span> class Person(id:Int,name:String,age:Int)</span><br><span class="line"><span class="comment">#转换关联RDD</span></span><br><span class="line"><span class="attribute">val</span> personRDD = lineRDD.map(x=&gt;Person(x(<span class="number">0</span>).toInt,x(<span class="number">1</span>),x(<span class="number">2</span>).toInt))</span><br><span class="line"><span class="comment">#rdd转换成dataframe</span></span><br><span class="line"><span class="attribute">val</span> personDF = personRDD.toDF</span><br><span class="line"><span class="comment">#查看结果</span></span><br><span class="line"><span class="attribute">personDF</span>.show</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>spark.sql</p>
</li>
</ul>
<figure class="highlight nsis"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#注册临时表才能使用sparkSQL</span></span><br><span class="line">personDF.registerTempTable(<span class="string">"Person"</span>)</span><br><span class="line"><span class="comment">#查询</span></span><br><span class="line">spark.sql(<span class="string">"desc Person"</span>).<span class="literal">show</span></span><br><span class="line">spark.sql(<span class="string">"select * from Person"</span>).<span class="literal">show</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p>dataSQL</p>
<figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">#加载数据</span><br><span class="line"><span class="keyword">val</span> ds1 = spark.create<span class="constructor">Dataset(1 <span class="params">to</span> 5)</span></span><br><span class="line">ds1.show</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> ds1 = spark.create<span class="constructor">Dataset(<span class="params">sc</span>.<span class="params">textFile</span>(<span class="string">"/user/gg.txt"</span>)</span>)</span><br><span class="line">ds1.show</span><br><span class="line"></span><br><span class="line">case <span class="keyword">class</span> <span class="constructor">Person2(<span class="params">id</span>:Int,<span class="params">name</span>:String,<span class="params">age</span>:Int)</span></span><br><span class="line"><span class="keyword">val</span> data = <span class="constructor">List(Person2(10001,<span class="string">"a"</span>,20)</span>,<span class="constructor">Person2(10003,<span class="string">"b"</span>,30)</span>)</span><br><span class="line"><span class="keyword">val</span> ds3 = data.toDS</span><br><span class="line">ds3.show</span><br><span class="line"></span><br><span class="line">通过dataFrame生成的数据,通过<span class="keyword">as</span>转换dataSet</span><br><span class="line"><span class="keyword">val</span> ds4 personDF.<span class="keyword">as</span><span class="literal">[P<span class="identifier">erson2</span>]</span></span><br><span class="line"></span><br><span class="line">查询</span><br><span class="line">ds4.filter(col(<span class="string">"age"</span>)&gt;=<span class="number">25</span>).show</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>小结</p>
<figure class="highlight actionscript"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">dataFrame 加载 .toDF</span><br><span class="line"></span><br><span class="line">dataFrame 通过 <span class="keyword">as</span> 变成dataSet</span><br><span class="line"></span><br><span class="line">dataFrame 通过 registerTempTable  变成 sparkSQL</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>传输组件 </p>
<figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">flume</span> 采集日志</span><br><span class="line">loader 数据库传输</span><br><span class="line">kafka 消息队列</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>部署操作</title>
    <url>/2021/08/03/53-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/53.jpg"></p>
</span>

<span id="more"></span>

<h1 id="centos7-nginx部署操作"><a href="#centos7-nginx部署操作" class="headerlink" title="centos7 nginx部署操作"></a>centos7 nginx 部署操作</h1><p>1）<a href="https://www.cnblogs.com/kccdzz/p/8110143.html">centos 关于防火墙操作</a>，<a href="https://www.cnblogs.com/hubing/p/6058932.html">防火墙操作指令</a></p>
<p>2） 检查配置是否正确 ：  nginx -t</p>
<p>3） 重启 nginx  :   nginx -s reload</p>
<p>4） 查看 nginx 进程： ps -ef |grep nginx</p>
<p>5） kill -9 pid 查杀进程    </p>
<blockquote>
<p>centos7 安装完 nginx 之后需要通过防火墙把监听端口开放出来</p>
<p>防火墙打开之后 docker 容器启动不了，尝试重启 docker 服务</p>
</blockquote>
<h1 id="微服务部署教程"><a href="#微服务部署教程" class="headerlink" title="微服务部署教程"></a>微服务部署教程</h1><blockquote>
<p> 所需环境，Linux，docker，Java8，docker 安装另外找教程，本教程不做解释，本教程以 Centos7 为例<br> docker 查看容器日志：docker logs -f -t –tail 300 容器 Id   ， tail 查看最后行数</p>
</blockquote>
<h2 id="一、制作公共镜像"><a href="#一、制作公共镜像" class="headerlink" title="一、制作公共镜像"></a>一、制作公共镜像</h2><p>1. 编写 dockerfile 文件，制作 jdk8 镜像</p>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">From</span> centos:<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> dyb dong_lqw@<span class="number">163</span>.com</span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk-8u191-64.tar.gz  /usr/<span class="built_in">local</span>/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/jdk1.<span class="number">8.0</span>_191</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:$JAVA_HOME/bin</span><br></pre></td></tr></tbody></table></figure>

<p>2. 构建 java 镜像： docker build -t jdk8:20190119  -f jdkdockerfile .</p>
<p>2. 运行镜像 docker run -d -it jdk8:20190119 /bin/bash </p>
<p>3. 进入容器 docker exec -it jdk8:20190119 /bin/bash (可选)</p>
<h2 id="二、微服务ServerCenter部署"><a href="#二、微服务ServerCenter部署" class="headerlink" title="二、微服务ServerCenter部署"></a>二、微服务 ServerCenter 部署</h2><h3 id="制作项目镜像-serverCenter"><a href="#制作项目镜像-serverCenter" class="headerlink" title="制作项目镜像(serverCenter)"></a>制作项目镜像 (serverCenter)</h3><p>1. 编写 dockerfile 文件，制作项目镜像</p>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">From</span> jdk8:<span class="number">20190129</span></span><br><span class="line"><span class="keyword">ENV</span> TZ <span class="string">"Asia/Shanghai"</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp/data</span></span><br><span class="line"><span class="keyword">EXPOSE</span>　<span class="number">12591</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> app.jar  app.jar</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> bash -c <span class="string">'touch /app.jar'</span></span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>,<span class="string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span></span><br></pre></td></tr></tbody></table></figure>

<p>2. 构建镜像：</p>
<figure class="highlight excel"><table><tbody><tr><td class="code"><pre><span class="line">docker build -<span class="built_in">t</span> centerserv<span class="symbol">er:la</span>stre -f dockerfile .</span><br><span class="line">或 </span><br><span class="line">docker build -<span class="built_in">t</span> eurekaserver</span><br></pre></td></tr></tbody></table></figure>

<p>3. 运行镜像：</p>
<figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">run</span> <span class="comment">--name centerserver -p 12591:12591 -d centerserver:lastre </span></span><br><span class="line">或 </span><br><span class="line">docker <span class="built_in">run</span> <span class="comment">--name eurekaserver -p 12591:12591 -t eurekaserver  -d eurekaserver ，其中-d用于控制台输出日志 </span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="三、微服务网关部署"><a href="#三、微服务网关部署" class="headerlink" title="三、微服务网关部署"></a>三、微服务网关部署</h2><blockquote>
<p>1. 编写 dockerfile 文件<br> 此时网关的 defaultZone 因改为： <a href="http://eurekaserver:8001/eureka/%EF%BC%8Ceurekaserver%E4%B8%BAeureka%E7%9A%84%E5%90%8D%E7%A7%B0">http://eurekaserver:8001/eureka/，eurekaserver 为 eureka 的名称</a></p>
</blockquote>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">From</span> jdk8:<span class="number">20190129</span></span><br><span class="line"><span class="keyword">ENV</span> TZ <span class="string">"Asia/Shanghai"</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp/gateway</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">12592</span> </span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> app.jar  app.jar</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> bash -c <span class="string">'touch /app.jar'</span></span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>,<span class="string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span></span><br></pre></td></tr></tbody></table></figure>

<p>2. 构建镜像：</p>
<figure class="highlight excel"><table><tbody><tr><td class="code"><pre><span class="line">docker build -<span class="built_in">t</span> gateway -f dockerfile .</span><br><span class="line">或  </span><br><span class="line">docker build -<span class="built_in">t</span> gateway</span><br></pre></td></tr></tbody></table></figure>

<p>3. 运行镜像：</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">docker run --name gateway -p <span class="number">12592</span>:<span class="number">12592</span> -d gateway  </span><br><span class="line">或  </span><br><span class="line">docker run -d --name nannar-platform --expose=<span class="number">12593</span> -p <span class="number">12593</span>:<span class="number">12593</span> -e <span class="string">"EUREKA_INSTANCE_IP-ADDRESS=192.168.21.180"</span> -e <span class="string">"EUREKA_PORT=12591"</span> -v <span class="regexp">/usr/</span>local<span class="regexp">/dyb/</span>logs:<span class="regexp">/logs/</span>logs/ nannar-platform</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">&gt; expose ：申明开放端口，指当前项目端口，最终开放端口需要-p参数。</span><br><span class="line">&gt; -p :  指定端口映射，格式为：主机(宿主)端口:容器端口</span><br><span class="line">&gt; -e : 设置dockerfile环境变量，方便动态灵活部署</span><br><span class="line">&gt; -v : 同步文件，例如：将springboot日志文件同步到宿主机指定目录</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>部署</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop 搭建</title>
    <url>/2021/08/11/54-Hadoop%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/54.jpg"></p>
</span>

<span id="more"></span>

<h1 id="Hadoop搭建"><a href="#Hadoop搭建" class="headerlink" title="Hadoop搭建"></a>Hadoop 搭建</h1><h3 id="单机部署"><a href="#单机部署" class="headerlink" title="单机部署"></a>单机部署</h3><ul>
<li>配置 IP 地址 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line"><span class="attribute">BOOTPROTO</span>=<span class="string">"static"</span></span><br><span class="line"><span class="comment">#新增</span></span><br><span class="line"><span class="attribute">IPADDR</span>=192.168.182.100 </span><br><span class="line"><span class="attribute">GATEWAY</span>=192.168.182.2 </span><br><span class="line"><span class="attribute">DNS1</span>=192.168.182.2</span><br><span class="line"><span class="comment">#重启</span><span class="built_in"></span></span><br><span class="line"><span class="built_in">service network </span>restart</span><br></pre></td></tr></tbody></table></figure></li>
<li>修改主机名 <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">hostname bigdata01</span><br><span class="line">vi <span class="regexp">/etc/</span>hostname</span><br><span class="line"><span class="comment">#主机名</span></span><br><span class="line">bigdata01</span><br></pre></td></tr></tbody></table></figure></li>
<li>关闭防火墙 <figure class="highlight gauss"><table><tbody><tr><td class="code"><pre><span class="line">systemctl <span class="keyword">stop</span> firewalld</span><br><span class="line">systemctl <span class="keyword">disable</span> firewalld</span><br></pre></td></tr></tbody></table></figure></li>
<li>ssh 免登录 <figure class="highlight arcade"><table><tbody><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">公钥拷贝到需要免密码登录的机器</span><br><span class="line">cat ~<span class="regexp">/.ssh/i</span>d_rsa.pub &gt;&gt; ~<span class="regexp">/.ssh/</span>authorized_keys</span><br></pre></td></tr></tbody></table></figure></li>
<li>安装 jdk<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">mkdir -p /data/soft</span><br><span class="line">vi /etc<span class="built_in">/profile</span></span><br><span class="line"><span class="built_in"></span>    <span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/data/soft/jdk1.8.0_151</span><br><span class="line">    <span class="builtin-name">export</span> <span class="attribute">CLASSPATH</span>=<span class="variable">$JAVA_HOME</span>/lib/</span><br><span class="line">    <span class="builtin-name">export</span> <span class="attribute">PATH</span>=.:$JAVA_HOME/bin:$PATH</span><br><span class="line">source /etc<span class="built_in">/profile </span>   </span><br></pre></td></tr></tbody></table></figure></li>
<li>安装 hadoop<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">vi /etc<span class="built_in">/profile</span></span><br><span class="line"><span class="built_in"></span>   <span class="builtin-name">export</span> <span class="attribute">HADOOP_NAME</span>=/data/soft/hadoop-3.2.0</span><br><span class="line">   <span class="builtin-name">export</span> PATH= <span class="variable">$HADOOP_HOME</span>/sbin:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">source /etc<span class="built_in">/profile</span></span><br><span class="line"><span class="built_in"></span></span><br></pre></td></tr></tbody></table></figure></li>
<li>修改 hadoop 配置文件 <figure class="highlight dts"><table><tbody><tr><td class="code"><pre><span class="line">cd <span class="meta-keyword">/data/</span>soft/hadoop<span class="number">-3.2</span><span class="number">.0</span><span class="meta-keyword">/etc/</span>hadoop/</span><br><span class="line">主要修改这几个文件:</span><br><span class="line">hadoop-env.sh</span><br><span class="line">core-site.xml</span><br><span class="line">hdfs-site.xml</span><br><span class="line">mapred-site.xml</span><br><span class="line">yarn-site.xml</span><br><span class="line">workers</span><br><span class="line"></span><br><span class="line"><span class="meta">## JAVA_HOME：指定java的安装位置</span></span><br><span class="line"><span class="meta">## HADOOP_LOG_DIR：hadoop的日志的存放目录  </span></span><br><span class="line">vi hadoop-env.sh</span><br><span class="line">    export JAVA_HOME=<span class="meta-keyword">/data/</span>soft/jdk1<span class="number">.8</span><span class="number">.0</span>_151</span><br><span class="line">    export HADOOP_LOG_DIR=<span class="meta-keyword">/data/</span>hadoop_repo<span class="meta-keyword">/logs/</span>hadoop</span><br><span class="line">    </span><br><span class="line"><span class="meta">## fs.defaultFS 属性中的主机名需要和你配置的主机名保持一致</span></span><br><span class="line">vi core-site.xml</span><br><span class="line">    <span class="params">&lt;property&gt;</span> </span><br><span class="line">        <span class="params">&lt;name&gt;</span>fs.defaultFS<span class="params">&lt;/name&gt;</span> </span><br><span class="line">        <span class="params">&lt;value&gt;</span>hdfs:<span class="comment">//bigdata01:9000&lt;/value&gt; </span></span><br><span class="line">    <span class="params">&lt;/property&gt;</span> </span><br><span class="line">    <span class="params">&lt;property&gt;</span> </span><br><span class="line">        <span class="params">&lt;name&gt;</span>hadoop.tmp.dir<span class="params">&lt;/name&gt;</span> </span><br><span class="line">        <span class="params">&lt;value&gt;</span><span class="meta-keyword">/data/</span>hadoop_repo<span class="params">&lt;/value&gt;</span> </span><br><span class="line">    <span class="params">&lt;/property&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">#把hdfs中文件副本的数量 </span></span><br><span class="line">vi hdfs-site.xml</span><br><span class="line">    <span class="params">&lt;property&gt;</span> </span><br><span class="line">        <span class="params">&lt;name&gt;</span>dfs.replication<span class="params">&lt;/name&gt;</span></span><br><span class="line">        <span class="params">&lt;value&gt;</span><span class="number">1</span><span class="params">&lt;/value&gt;</span> </span><br><span class="line">    <span class="params">&lt;/property&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">#设置mapreduce使用的资源调度框架   </span></span><br><span class="line">vi mapred-site.xml    </span><br><span class="line">    <span class="params">&lt;property&gt;</span></span><br><span class="line">        <span class="params">&lt;name&gt;</span>mapreduce.framework.name<span class="params">&lt;/name&gt;</span></span><br><span class="line">        <span class="params">&lt;value&gt;</span>yarn<span class="params">&lt;/value&gt;</span></span><br><span class="line">     <span class="params">&lt;/property&gt;</span></span><br><span class="line">     </span><br><span class="line"><span class="meta">#设置yarn上支持运行的服务和环境变量白名单</span></span><br><span class="line">vi yarn-site.xml</span><br><span class="line">    <span class="params">&lt;property&gt;</span> </span><br><span class="line">        <span class="params">&lt;name&gt;</span>yarn.nodemanager.aux-services<span class="params">&lt;/name&gt;</span></span><br><span class="line">        <span class="params">&lt;value&gt;</span>mapreduce_shuffle<span class="params">&lt;/value&gt;</span></span><br><span class="line">     <span class="params">&lt;/property&gt;</span></span><br><span class="line">     <span class="params">&lt;property&gt;</span></span><br><span class="line">        <span class="params">&lt;name&gt;</span>yarn.nodemanager.env-whitelist<span class="params">&lt;/name&gt;</span> </span><br><span class="line">        <span class="params">&lt;value&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME<span class="params">&lt;/value&gt;</span> </span><br><span class="line">    <span class="params">&lt;/property&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">#设置集群中从节点的主机名信息 </span></span><br><span class="line">vi workers</span><br><span class="line">    bigdata01</span><br></pre></td></tr></tbody></table></figure></li>
<li>格式化 hdfs</li>
<li><ul>
<li>Hadoop 中的 HDFS 是一个分布式的文件系统，文件系统在使用之前是需要先格式化的，就类似我们买一块新的磁盘，在安装系统之前需要先格式化才可以使用 <figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">bin</span>/hdfs namenode -<span class="built_in">format</span></span><br><span class="line"><span class="comment">#如果能看到successfully formatted这条信息就说明格式化成功了</span></span><br><span class="line"><span class="comment">#如果需要重复执行，那么需要把/data/hadoop_repo目录中的内容全部删除，再执行格式化</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
</li>
<li>增加启动用户 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">vi start-dfs.sh</span><br><span class="line">    <span class="attribute">HDFS_DATANODE_USER</span>=root </span><br><span class="line">    <span class="attribute">HDFS_DATANODE_SECURE_USER</span>=hdfs </span><br><span class="line">    <span class="attribute">HDFS_NAMENODE_USER</span>=root </span><br><span class="line">    <span class="attribute">HDFS_SECONDARYNAMENODE_USER</span>=root</span><br><span class="line">    </span><br><span class="line">vi stop-dfs.sh</span><br><span class="line">    <span class="attribute">HDFS_DATANODE_USER</span>=root </span><br><span class="line">    <span class="attribute">HDFS_DATANODE_SECURE_USER</span>=hdfs </span><br><span class="line">    <span class="attribute">HDFS_NAMENODE_USER</span>=root </span><br><span class="line">    <span class="attribute">HDFS_SECONDARYNAMENODE_USER</span>=root </span><br><span class="line">      </span><br><span class="line">vi start-yarn.sh</span><br><span class="line">    <span class="attribute">YARN_RESOURCEMANAGER_USER</span>=root </span><br><span class="line">    <span class="attribute">HADOOP_SECURE_DN_USER</span>=yarn </span><br><span class="line">    <span class="attribute">YARN_NODEMANAGER_USER</span>=root</span><br><span class="line">    </span><br><span class="line">vi stop-yarn.sh</span><br><span class="line">    <span class="attribute">YARN_RESOURCEMANAGER_USER</span>=root </span><br><span class="line">    <span class="attribute">HADOOP_SECURE_DN_USER</span>=yarn </span><br><span class="line">    <span class="attribute">YARN_NODEMANAGER_USER</span>=root</span><br></pre></td></tr></tbody></table></figure></li>
<li>启动加验证 <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">sbin</span>/start-<span class="literal">all</span>.sh</span><br><span class="line"><span class="attribute">jps</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">HDFS</span> webui界面：http://bigdata<span class="number">01</span>:<span class="number">9870</span></span><br><span class="line"><span class="attribute">YARN</span> webui界面：http://bigdata<span class="number">01</span>:<span class="number">8088</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h3 id="分布式集群安装"><a href="#分布式集群安装" class="headerlink" title="分布式集群安装"></a>分布式集群安装</h3><ul>
<li>先创建三台机器 bigdata01 bigdata02 bigdata03</li>
</ul>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1</span>.设置固定IP</span><br><span class="line">    window hosts</span><br><span class="line">        <span class="number">172.22</span>.<span class="number">134.11</span> bigdata01</span><br><span class="line">        <span class="number">172.22</span>.<span class="number">133.135</span> bigdata02</span><br><span class="line">        <span class="number">172.22</span>.<span class="number">141.116</span> bigdata03</span><br><span class="line">    linux hosts</span><br><span class="line">        vi <span class="regexp">/etc/</span>hosts</span><br><span class="line">        <span class="number">172.22</span>.<span class="number">134.11</span> bigdata01</span><br><span class="line">        <span class="number">172.22</span>.<span class="number">133.135</span> bigdata02</span><br><span class="line">        <span class="number">172.22</span>.<span class="number">141.116</span> bigdata03</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span>.关闭防火墙</span><br><span class="line">    systemctl stop firewalld</span><br><span class="line">    systemctl disable firewalld</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.同步时间 </span><br><span class="line">    <span class="comment">#01,02,03节点上配置时间同步</span></span><br><span class="line">    yum install -y ntpdate</span><br><span class="line">    ntpdate -u ntp.sjtu.edu.cn</span><br><span class="line">    vi <span class="regexp">/etc/</span>crontab</span><br><span class="line">    * * * * * root <span class="regexp">/usr/</span>sbin/ntpdate -u ntp.sjtu.edu.cn</span><br><span class="line">    </span><br><span class="line"><span class="number">3</span>.在每台机器上执行免登录</span><br><span class="line">    <span class="comment">#01,02,03都执行</span></span><br><span class="line">    ssh-keygen -t rsa</span><br><span class="line">    <span class="comment">#01,02,03本机免密码登录</span></span><br><span class="line">    cat ~<span class="regexp">/.ssh/i</span>d_rsa.pub &gt;&gt; ~<span class="regexp">/.ssh/</span>authorized_keys</span><br><span class="line">    <span class="comment">#将bigdata01作为主节点 然后将01的公钥拷到其他机器上</span></span><br><span class="line">    scp ~<span class="regexp">/.ssh/</span>authorized_keys bigdata02:~/</span><br><span class="line">    scp ~<span class="regexp">/.ssh/</span>authorized_keys bigdata03:~/</span><br><span class="line">    在<span class="number">02</span> <span class="number">03</span>上分别执行</span><br><span class="line">    cat ~<span class="regexp">/authorized_keys &gt;&gt; ~/</span>.ssh/authorized_keys</span><br><span class="line">    <span class="comment">##有没有必要实现从节点之间互相免密码登录呢？</span></span><br><span class="line">        这个就没有必要了，因为在启动集群的时候只有主节点需要远程连接其它节点。</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>安装 hadoop<figure class="highlight gherkin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#这里只需要从bigdata01上修改配置文件 然后将整个hadoop包复制到02,03</span></span><br><span class="line"><span class="comment">#在01上执行启动命令即可</span></span><br><span class="line"><span class="comment">## JAVA_HOME：指定java的安装位置</span></span><br><span class="line"><span class="comment">## HADOOP_LOG_DIR：hadoop的日志的存放目录  </span></span><br><span class="line">vi hadoop-env.sh</span><br><span class="line">    export JAVA_HOME=/data/soft/jdk1.8.0_151</span><br><span class="line">    export HADOOP_LOG_DIR=/data/hadoop_repo/logs/hadoop</span><br><span class="line">    </span><br><span class="line"><span class="comment">## fs.defaultFS 属性中的主机名需要和你配置的主机名保持一致</span></span><br><span class="line">vi core-site.xml</span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>fs.defaultFS<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>hdfs://bigdata01:9000<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>hadoop.tmp.dir<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>/data/hadoop_repo<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">         <span class="comment">#开启垃圾桶</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>fs.trash.interval<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>1440<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#把hdfs中文件副本的数量 </span></span><br><span class="line">vi hdfs-site.xml</span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>dfs.replication<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>2<span class="variable">&lt;/value&gt;</span> <span class="variable">&lt;/property&gt;</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>dfs.namenode.secondary.http-address<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>bigdata01:50090<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>dfs.permissions.enabled<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>false<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#设置mapreduce使用的资源调度框架   </span></span><br><span class="line">vi mapred-site.xml    </span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>mapreduce.framework.name<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>yarn<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.app.mapreduce.am.env<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>mapreduce.map.env<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>mapreduce.reduce.env<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>mapreduce.application.classpath<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>/data/soft/hadoop-3.2.0/share/hadoop/mapreduce/<span class="symbol">*</span>,/data/soft/hadoop-3.2.0/share/hadoop/mapreduce/lib/<span class="symbol">*</span><span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">     </span><br><span class="line"><span class="comment">#设置yarn上支持运行的服务和环境变量白名单</span></span><br><span class="line">vi yarn-site.xml</span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.nodemanager.aux-services<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>mapreduce_shuffle<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.nodemanager.env-whitelist<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.resourcemanager.hostname<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>bigdata01<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.resourcemanager.hostname<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>bigdata01<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.log.server.url<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>http://bigdata01:19888/jobhistory/logs/<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.application.classpath<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>/data/soft/hadoop-3.2.0/etc/hadoop:/data/soft/hadoop-3.2.0/share/hadoop/common/lib/<span class="symbol">*</span>:/data/soft/hadoop-3.2.0/share/hadoop/common/<span class="symbol">*</span>:/data/soft/hadoop-3.2.0/share/hadoop/hdfs:/data/soft/hadoop-3.2.0/share/hadoop/hdfs/lib/<span class="symbol">*</span>:/data/soft/hadoop-3.2.0/share/hadoop/hdfs/<span class="symbol">*</span>:/data/soft/hadoop-3.2.0/share/hadoop/mapreduce/lib/<span class="symbol">*</span>:/data/soft/hadoop-3.2.0/share/hadoop/mapreduce/<span class="symbol">*</span>:/data/soft/hadoop-3.2.0/share/hadoop/yarn:/data/soft/hadoop-3.2.0/share/hadoop/yarn/lib/<span class="symbol">*</span>:/data/soft/hadoop-3.2.0/share/hadoop/yarn/<span class="symbol">*</span><span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.log-aggregation-enable<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>true<span class="variable">&lt;/value&gt;</span></span><br><span class="line">        <span class="variable">&lt;description&gt;</span></span><br><span class="line">         开启日志聚集功能，任务执行完之后，将日志文件自动上传到文件系统（如HDFS文件系统），</span><br><span class="line">         否则通过namenode1:8088页面查看日志文件的时候，会报错</span><br><span class="line">         <span class="string">"Aggregation is not enabled. Try the nodemanager at namenode1:54951"</span></span><br><span class="line">        <span class="variable">&lt;/description&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.log-aggregation.retain-seconds<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>302400<span class="variable">&lt;/value&gt;</span></span><br><span class="line">        <span class="variable">&lt;description&gt;</span></span><br><span class="line">         日志文件保存在文件系统（如HDFS文件系统）的最长时间，默认值是-1，即永久有效。</span><br><span class="line">         这里配置的值是：7天 = 3600 <span class="symbol">*</span> 24 <span class="symbol">*</span> 7 = 302400</span><br><span class="line">        <span class="variable">&lt;/description&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">         </span><br><span class="line"><span class="comment">#设置集群中从节点的主机名信息 </span></span><br><span class="line">vi workers</span><br><span class="line">   bigdata02</span><br><span class="line">   bigdata03</span><br></pre></td></tr></tbody></table></figure></li>
<li>设置启动用户 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">vi start-dfs.sh </span><br><span class="line">    <span class="attribute">HDFS_DATANODE_USER</span>=root </span><br><span class="line">    <span class="attribute">HDFS_DATANODE_SECURE_USER</span>=hdfs </span><br><span class="line">    <span class="attribute">HDFS_NAMENODE_USER</span>=root </span><br><span class="line">    <span class="attribute">HDFS_SECONDARYNAMENODE_USER</span>=root </span><br><span class="line">vi stop-dfs.sh </span><br><span class="line">    <span class="attribute">HDFS_DATANODE_USER</span>=root </span><br><span class="line">    <span class="attribute">HDFS_DATANODE_SECURE_USER</span>=hdfs </span><br><span class="line">    <span class="attribute">HDFS_NAMENODE_USER</span>=root </span><br><span class="line">    <span class="attribute">HDFS_SECONDARYNAMENODE_USER</span>=root</span><br><span class="line">vi start-yarn.sh </span><br><span class="line">    <span class="attribute">YARN_RESOURCEMANAGER_USER</span>=root </span><br><span class="line">    <span class="attribute">HADOOP_SECURE_DN_USER</span>=yarn </span><br><span class="line">    <span class="attribute">YARN_NODEMANAGER_USER</span>=root</span><br><span class="line">vi stop-yarn.sh </span><br><span class="line">    <span class="attribute">YARN_RESOURCEMANAGER_USER</span>=root </span><br><span class="line">    <span class="attribute">HADOOP_SECURE_DN_USER</span>=yarn </span><br><span class="line">    <span class="attribute">YARN_NODEMANAGER_USER</span>=root</span><br></pre></td></tr></tbody></table></figure></li>
<li>拷贝到从节点 <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">scp</span> -rq hadoop-<span class="number">3</span>.<span class="number">2</span>.<span class="number">0</span> bigdata<span class="number">02</span>:/data/soft/</span><br><span class="line"><span class="attribute">scp</span> -rq hadoop-<span class="number">3</span>.<span class="number">2</span>.<span class="number">0</span> bigdata<span class="number">03</span>:/data/soft/</span><br></pre></td></tr></tbody></table></figure></li>
<li>hdfs 初始化 <figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">bin</span>/hdfs namenode -<span class="built_in">format</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>启动 <figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">sbin/start-<span class="keyword">all</span>.<span class="keyword">sh</span></span><br><span class="line">sbin/<span class="keyword">stop</span>-<span class="keyword">all</span>.<span class="keyword">sh</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h3 id="window连接Hadoop异常问题"><a href="#window连接Hadoop异常问题" class="headerlink" title="window连接Hadoop异常问题"></a>window 连接 Hadoop 异常问题</h3><ul>
<li>安装 <a href="https://github.com/steveloughran/winutils">HADOOP</a><figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">HADOOP_HOME D:<span class="symbol">\J</span>JDK<span class="symbol">\h</span>adoop-3.0.0</span><br><span class="line">Path: <span class="variable">%HADOOP_HOME%</span><span class="symbol">\b</span>in</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea 快捷键</title>
    <url>/2021/05/27/6-Idea%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/6.jpg"></p>
</span>

<span id="more"></span>

<h1 id="CMD系列"><a href="#CMD系列" class="headerlink" title="CMD系列"></a>CMD 系列</h1><ul>
<li><p>CMD + A 全选</p>
</li>
<li><p>CMD + B 查看方法定义</p>
</li>
<li><p>CMD + ALT + B 查看方法实现</p>
</li>
<li><p>CMD + C 复制选中的部分，如果没有选择，就复制当前行</p>
</li>
<li><p>CMD + SHIFT + C 复制当前文件的绝对路径</p>
</li>
<li><p>CMD + D 复制当前行</p>
</li>
<li><p>CMD + E 查看最近浏览的文件</p>
</li>
<li><p>CMD + SHIFT + E 查看最近编辑的文件</p>
</li>
<li><p>CMD + F 搜索当前文件中的关键字</p>
</li>
<li><p>CMD + SHIFT + F 格式化代码</p>
</li>
<li><p>CMD + G 定位行，如输入 50:9 可以定位第 50 行的第 9 个字符</p>
</li>
<li><p>CMD + J 插入模板（liveTemplate 每个人都应该学会，自定义很多模式）</p>
</li>
<li><p>CMD + K 提交 commit 到 git（习惯 Alt + F12 敲命令了，故一般不用）</p>
</li>
<li><p>CMD + SHIFT + K push 到 git (同上，一般不用)</p>
</li>
<li><p>CMD + N 查找类 (再按一次 N 可以查找依赖的 jar 包中的类)</p>
</li>
<li><p>CMD + SHIFT + N 查找文件（再按一次 N 可以查找依赖的 jar 包中的文件)</p>
</li>
<li><p>CMD + ALT + SHIFT + N 查找符号，包括变量名，函数名（再按一次 N 可以查找依赖的 jar 包中的符号）</p>
</li>
<li><p>CMD + O 覆盖或实现方法</p>
</li>
<li><p>CMD + P 查看方法参数</p>
</li>
<li><p>CMD + R 替换</p>
</li>
<li><p>CMD + S 增量选择神器，选择范围逐渐扩大 (超级牛逼快捷键，编码效率提升一个档次)</p>
</li>
<li><p>CMD + SHIFT + S 减量选择神器，选择范围逐渐缩小，一般和增量选择配合使用</p>
</li>
<li><p>CMD + U 跳转到父类或者接口</p>
</li>
<li><p>CMD + V 粘贴剪切板内容</p>
</li>
<li><p>CMD + SHIFT + V 粘贴最近几条剪切板的内容</p>
</li>
<li><p>CMD + SHIFT + ALT + V 粘贴，并且去掉格式，普通粘贴复制类的时候会把 import 带过来</p>
</li>
<li><p>CMD + W 关闭当前 Tab</p>
</li>
<li><p>CMD + SHIFT + W 重新打开最近关闭的 Tab</p>
</li>
<li><p>CMD + X 剪切当前选择的内容到剪切板，如果没有选中内容，则剪切当前光标所在的行</p>
</li>
<li><p>CMD + Y 删除当前行</p>
</li>
<li><p>CMD + Z 撤销操作</p>
</li>
<li><p>CMD + SHIFT + Z 反撤销操作</p>
</li>
<li><p>CMD + 1 跳转到项目视图（不牛逼，但是超级常用）</p>
</li>
<li><p>CMD + +/- 展开 / 折叠当前代码</p>
</li>
<li><p>CMD + SHIFT + +/- 展开 / 折叠当前所有代码</p>
</li>
<li><p>CMD + DELETE 安全删除文件（不牛逼，但是很常用）</p>
</li>
<li><p>CMD + [/] 跳转到对应大括号的开始 / 结尾</p>
</li>
<li><p>CMD + SHIFT + [/] 跳转到对应大括号的开始 / 结尾，并选择，与增量选择联合可以产生超快的选择</p>
</li>
<li><p>CMD + / 注释行与反注释行交替</p>
</li>
<li><p>CMD + left/right 移到行首 / 行尾</p>
</li>
<li><p>CMD + SHIFT + left/right 选择到行首 / 行尾</p>
</li>
</ul>
<h1 id="CTRL系列"><a href="#CTRL系列" class="headerlink" title="CTRL系列"></a>CTRL 系列</h1><ul>
<li><p>CTRL + G 多选神器，当你选中一个单词之后，连续按此键盘，可以批量编码，超爽</p>
</li>
<li><p>CTRL + CMD + G 选中一部分内容之后，可以批量全部选择该内容，然后就可以批量操作</p>
</li>
<li><p>CTRL + SHIFT + G 反多选，与 CTRL + G 的作用相反</p>
</li>
<li><p>CTRL + SHIFT + F 指定一个路径，搜索该路径下包含所有该关键字的文件（巨大牛逼，特别对于根据前端字符串定位代码）</p>
</li>
<li><p>CTRL + H 查看当前类的类型结构</p>
</li>
<li><p>CTRL + N 产生新元素神器，在任何可以新建的地方都可以尝试使用，在类中，可以生成 getter/setter 等方法，在项目中可以新建文件，在其他设置中，可以新建配置项</p>
</li>
<li><p>CTRL + P 播放上一次录制的宏</p>
</li>
<li><p>CTRL + S 开始或结束录制宏</p>
</li>
<li><p>CTRL + W 跳转到下一个单词 (驼峰的算一个单词)</p>
</li>
<li><p>CTRL + SHIFT + W 同 CTRL + W，不过跳转的同时，已经选择</p>
</li>
</ul>
<h1 id="SHIFT系列"><a href="#SHIFT系列" class="headerlink" title="SHIFT系列"></a>SHIFT 系列</h1><ul>
<li><p>SHIFT + F6 重命名文件或方法或属性，重构神器</p>
</li>
<li><p>SHIFT + F9/F10 运行 /debug 当前运行的项</p>
</li>
</ul>
<h1 id="ALT系列"><a href="#ALT系列" class="headerlink" title="ALT系列"></a>ALT 系列</h1><ul>
<li><p>ALT + F1 神器，按了此组合，接下来你可以跳转到项目结构，导航栏，甚至可以在 Finder 中定位该文件</p>
</li>
<li><p> ALT + / 智能提醒神器，当你不知道要写什么内容的时候，试试这个组合吧，或许他会给你带来灵感</p>
</li>
<li><p> ALT + left/right 移到上一个 / 下一个单词</p>
</li>
<li><p> ALT + up/down 复制当前光标到上 / 下一行，批量编码的时候使用，经常结合增量选择与 alt 选择进行操作，超酷</p>
</li>
<li><p> ALT + 单击 多次复制光标，比 ALT + up/down 更自由</p>
</li>
</ul>
<h1 id="其他主题"><a href="#其他主题" class="headerlink" title="其他主题"></a>其他主题</h1><h2 id="重构系列"><a href="#重构系列" class="headerlink" title="重构系列"></a>重构系列</h2><ul>
<li><p>CMD + ALT + C 抽取当前选择的到一个静态常量，多按一次可以指定常量所处于的类的位置</p>
</li>
<li><p>CMD + ALT + V 抽取当前选择的到一个局部变量，需要一个对象的时候直接 new 出来，然后试试此组合键</p>
</li>
<li><p>CMD + ALT + P 抽取当前选择的到参数</p>
</li>
<li><p>CMD + ALT + M 抽取当前选择的到一个方法</p>
</li>
<li><p>CMD + ALT + F 抽取当前选择到成员变量</p>
</li>
<li><p>CMD + F6 重构方法，很有用</p>
</li>
<li><p>SHIFT + F6 重命名，可以重命名普通文件</p>
</li>
<li><p>SHIFT + F5 可以重命名类文件</p>
</li>
<li><p>F5 拷贝当前文件</p>
</li>
<li><p>F6 转移当前文件</p>
</li>
</ul>
<h2 id="跳转系列"><a href="#跳转系列" class="headerlink" title="跳转系列"></a>跳转系列</h2><ul>
<li><p>F2 光标跳转到下一个出错的地方</p>
</li>
<li><p>F3 跳转到下一个搜索匹配项</p>
</li>
<li><p>SHIFT + F2 光标跳转到上一个出错的地方</p>
</li>
<li><p>CMD + left/right 跳转到行首 / 尾</p>
</li>
<li><p>CMD + SHIFT + left/right 选择到行首 / 尾</p>
</li>
<li><p>SHIFT + ENTER 在当前行下面新建一行并且光标移到下一行行首</p>
</li>
<li><p>CMD + ALT + ENTER 在当前行上面新建一行并且光标移到上一行行首</p>
</li>
<li><p>CMD + SHIFT + Del 跳转到上一个编辑的地方</p>
</li>
<li><p>CMD + CTRL + Del 跳转到下一个编辑的地方</p>
</li>
<li><p>CMD + ALT + left/right 跳转到上 / 下次浏览的地方</p>
</li>
<li><p>CTRL + up/down 跳转到上 / 下一个函数</p>
</li>
<li><p>CTRL + left/right 跳转到左 / 右 Tab 页面</p>
</li>
<li><p>CTRL + SHIFT + left/right 一个 Tab 里面有多个子 Tab 的时候可以前后切换</p>
</li>
<li><p>Esc 在任何一个 view 里面将光标放置到代码里</p>
</li>
<li><p>CMD + ALT + up/down 跳转上 / 下一个 intellij 项目</p>
</li>
<li><p>CTRL + ALT + R 打开最近的项目（很有用）</p>
</li>
<li><p>CTRL + ALT + O 打开项目</p>
</li>
<li><p>CMD + CTRL + up/down 光标移到屏幕最上 / 下方</p>
</li>
<li><p>CMD + CTRL + left/right 光标移到文件最上 / 下方</p>
</li>
</ul>
<h2 id="运行和调试系列"><a href="#运行和调试系列" class="headerlink" title="运行和调试系列"></a>运行和调试系列</h2><ul>
<li><p>CMD + F8 在当前行增加 / 去除断点</p>
</li>
<li><p>CMD + CTRL + F9/F10 智能判断上下文后调试 / 运行，比如 main 函数，测试用例的方法或类</p>
</li>
<li><p>CMD + ALT + F9/F10 选择上下文调试 / 运行</p>
</li>
<li><p>SHIFT + F9/F10 调试 / 运行当前的项</p>
</li>
<li><p>CMD + F2 停止当前正在运行的项目</p>
</li>
<li><p>F7 进入当前断点</p>
</li>
<li><p>F8 单步 debug</p>
</li>
<li><p>F9 结束 debug</p>
</li>
<li><p>SHIFT + F8 运行到当前函数结束</p>
</li>
<li><p>SHIFT + CMD + F8 查看当前有哪些断点</p>
</li>
<li><p>ALT + F8 debug 的时候计算选中表达式</p>
</li>
</ul>
<h2 id="测试用例系列"><a href="#测试用例系列" class="headerlink" title="测试用例系列"></a>测试用例系列</h2><ul>
<li><p>CMD + SHIFT + T 创建当前类或接口的测试类</p>
</li>
<li><p>CMD + SHIFT + F11 运行当前测试用例并且展示覆盖率</p>
</li>
<li><p>CMD + ALT + F5 隐藏测试用例覆盖率</p>
</li>
<li><p>CMD + ALT + F6 现实测试用例覆盖率</p>
</li>
</ul>
<p>#智能类</p>
<ul>
<li><p>CMD + SHIFT + ENTER 智能补全当前行</p>
</li>
<li><p>ALT + ENTER 当有出错提示的时候自动修复</p>
</li>
<li><p>ALT + / 任何时候都可以给你提供最佳操作提示，比如单词未输入完整，会给你完整单词列表</p>
</li>
<li><p>CTRL + . 当有智能提示的时候，选择第一个智能提示项目并且在后面加.(靠谱)</p>
</li>
</ul>
<h1 id="结构类"><a href="#结构类" class="headerlink" title="结构类"></a>结构类</h1><ul>
<li><p>CMD + F12 展示当前类结构</p>
</li>
<li><p>CMD + ALT + U 根据上下文展示 UML 图</p>
</li>
<li><p>CTRL + H 展示当前类的继承结构</p>
</li>
</ul>
<h1 id="其他类"><a href="#其他类" class="headerlink" title="其他类"></a>其他类</h1><ul>
<li><p>ALT + F12 打开 / 关闭终端（较常用）</p>
</li>
<li><p>CMD + SHIFT + / 搜索帮助</p>
</li>
<li><p>CMD + ALT + up/down 将当前行与上 / 下一行交换</p>
</li>
<li><p>CMD + SHIFT + up/down 将当前块与上 / 下一块交换</p>
</li>
<li><p>CMD + SHIFT + A 搜索 Action（巨牛逼）</p>
</li>
<li><p>CMD + ALT + V 垂直分割窗口</p>
</li>
<li><p>CMD + ALT + H 水平分割窗口</p>
</li>
<li><p>CMD + SHIFT + U 大小写转换</p>
</li>
<li><p>CMD + ALT + T surround with，讲一部分内容选中，然后 try catch 或者 if else</p>
</li>
<li><p>CMD + ALT + F4 关闭当前项目</p>
</li>
<li><p>CMD + SHIFT + R git 还原</p>
</li>
<li><p>CMD + ALT + N inline，就是去除中间变量的意思</p>
</li>
<li><p>SHIFT + CMD + B rebuild 项目</p>
</li>
<li><p>CMD + SHIFT + F12 切换全屏幕</p>
</li>
<li><p>CMD + SHIFT + O 关闭其他 Tab 页面</p>
</li>
<li><p>ALT + CTRL + B 打开数据库</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Idea</category>
      </categories>
      <tags>
        <tag>Idea</tag>
      </tags>
  </entry>
  <entry>
    <title>常用正则表达式</title>
    <url>/2021/05/27/7-%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/7.jpg"></p>
</span>

<span id="more"></span>

<h1 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h1><ul>
<li><p>火车车次</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/^[GCDZTSPKXLY1-9]\d{1,4}$/</span> </span><br></pre></td></tr></tbody></table></figure></li>
<li><p>手机机身码 (IMEI)</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/^\d{15,17}$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>必须带端口号的网址 (或 ip)</p>
<figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">/^((ht|f)tps?:<span class="symbol">\/</span><span class="symbol">\/</span>)?[<span class="symbol">\w</span>-]+(<span class="symbol">\.</span>[<span class="symbol">\w</span>-]+)+:<span class="symbol">\d</span>{1,5}<span class="symbol">\/</span>?$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>网址 (url, 支持端口和”?+ 参数” 和”#+ 参数)</p>
<figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">/^(((ht|f)tps?):<span class="symbol">\/</span><span class="symbol">\/</span>)?[<span class="symbol">\w</span>-]+(<span class="symbol">\.</span>[<span class="symbol">\w</span>-]+)+([<span class="symbol">\w</span>.,@?^=<span class="variable">%&amp;:/~+#-]*[\w@?^=%</span>&amp;/~+#-])?$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>统一社会信用代码</p>
<figure class="highlight dust"><table><tbody><tr><td class="code"><pre><span class="line"><span class="xml">/^[0-9A-HJ-NPQRTUWXY]</span><span class="template-variable">{2}</span><span class="xml">\d</span><span class="template-variable">{6}</span><span class="xml">[0-9A-HJ-NPQRTUWXY]</span><span class="template-variable">{10}</span><span class="xml">$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>迅雷链接</p>
<figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">/^thunderx?:<span class="symbol">\/</span><span class="symbol">\/</span>[a-zA-Z<span class="symbol">\d</span>]+=$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>ed2k 链接 (宽松匹配)</p>
<figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">/^ed2k:<span class="symbol">\/</span><span class="symbol">\/</span><span class="symbol">\|</span>file<span class="symbol">\|</span>.+<span class="symbol">\|</span><span class="symbol">\/</span>$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>磁力链接 (宽松匹配)</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/^magnet:\?xt=urn:btih:[0-9a-fA-F]{40,}.*$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>子网掩码</p>
<figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">/^(?:<span class="symbol">\d</span>{1,2}|1<span class="symbol">\d</span><span class="symbol">\d</span>|2[0-4]<span class="symbol">\d</span>|25[0-5])(?:<span class="symbol">\.</span>(?:<span class="symbol">\d</span>{1,2}|1<span class="symbol">\d</span><span class="symbol">\d</span>|2[0-4]<span class="symbol">\d</span>|25[0-5])){3}$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>linux” 隐藏文件” 路径</p>
<figure class="highlight groovy"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/^\/</span>(?:[^<span class="regexp">/]+\/</span>)*\.[^<span class="regexp">/]*/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>linux 文件夹路径</p>
<figure class="highlight arcade"><table><tbody><tr><td class="code"><pre><span class="line">/^\/(?:[^<span class="regexp">/]+\/)*$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>linux 文件路径</p>
<figure class="highlight ruby"><table><tbody><tr><td class="code"><pre><span class="line">/^\/(<span class="string">?:</span>[^<span class="regexp">/]+\/)*[^/</span>]+<span class="variable">$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>window” 文件夹” 路径</p>
<figure class="highlight ruby"><table><tbody><tr><td class="code"><pre><span class="line">/^[a-zA-Z]<span class="symbol">:</span>\\(<span class="string">?:\w</span>+\\<span class="string">?)</span>*<span class="variable">$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>window 下” 文件” 路径</p>
<figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">/^[a-zA-Z]:<span class="symbol">\\</span>(?:<span class="symbol">\w</span>+<span class="symbol">\\</span>)*<span class="symbol">\w</span>+<span class="symbol">\.</span><span class="symbol">\w</span>+$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>股票代码 (A 股)</p>
<figure class="highlight inform7"><table><tbody><tr><td class="code"><pre><span class="line">/^(s<span class="comment">[hz]</span>|S<span class="comment">[HZ]</span>)(000<span class="comment">[\d]</span>{3}|002<span class="comment">[\d]</span>{3}|300<span class="comment">[\d]</span>{3}|600<span class="comment">[\d]</span>{3}|60<span class="comment">[\d]</span>{4})$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>大于等于 0, 小于等于 150, 支持小数位出现 5, 如 145.5, 用于判断考卷分数</p>
<figure class="highlight ruby"><table><tbody><tr><td class="code"><pre><span class="line">/^<span class="number">150</span><span class="variable">$|</span>^(<span class="string">?:\d</span><span class="params">|[1-9]\d|</span><span class="number">1</span>[<span class="number">0</span>-<span class="number">4</span>]\d)(<span class="string">?:</span>.<span class="number">5</span>)<span class="string">?$</span>/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>html 注释</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/^$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>md5 格式 (32 位)</p>
<figure class="highlight gcode"><table><tbody><tr><td class="code"><pre><span class="line">/^<span class="comment">([a-f\d]{32}|[A-F\d]{32})</span>$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>版本号 (version) 格式必须为 X.Y.Z</p>
<figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">/^<span class="symbol">\d</span>+(?:<span class="symbol">\.</span><span class="symbol">\d</span>+){2}$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>视频 (video) 链接地址（视频格式可按需增删）</p>
<figure class="highlight coq"><table><tbody><tr><td class="code"><pre><span class="line">/^https?:\/\/(.+\/)+.+(\.(swf|<span class="type">avi</span>|<span class="type">flv</span>|<span class="type">mpg</span>|<span class="type">rm</span>|<span class="type">mov</span>|<span class="type">wav</span>|<span class="type">asf</span>|<span class="type">3gp</span>|<span class="type">mkv</span>|<span class="type">rmvb</span>|<span class="type">mp4</span>))$/i</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>图片 (image) 链接地址（图片格式可按需增删）</p>
<figure class="highlight coq"><table><tbody><tr><td class="code"><pre><span class="line">/^https?:\/\/(.+\/)+.+(\.(gif|<span class="type">png</span>|<span class="type">jpg</span>|<span class="type">jpeg</span>|<span class="type">webp</span>|<span class="type">svg</span>|<span class="type">psd</span>|<span class="type">bmp</span>|<span class="type">tif</span>))$/i</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>24 小时制时间（HH🇲🇲ss）</p>
<figure class="highlight inform7"><table><tbody><tr><td class="code"><pre><span class="line">/^(?:<span class="comment">[01]</span>\d|2<span class="comment">[0-3]</span>):<span class="comment">[0-5]</span>\d:<span class="comment">[0-5]</span>\d$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>12 小时制时间（hh🇲🇲ss）</p>
<figure class="highlight inform7"><table><tbody><tr><td class="code"><pre><span class="line">/^(?:1<span class="comment">[0-2]</span>|0?<span class="comment">[1-9]</span>):<span class="comment">[0-5]</span>\d:<span class="comment">[0-5]</span>\d$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>base64 格式</p>
<figure class="highlight gcode"><table><tbody><tr><td class="code"><pre><span class="line">/^\sdata:<span class="comment">(?:[a-z]+\/[a-z0-9-+.]+(?:;[a-z-]+=[a-z0-9-]+)</span>?)?<span class="comment">(?:;base64)</span>?,<span class="comment">([a-z0-9!&gt;&lt;',()</span>+;=-._~:@/?<span class="meta">%</span>\s]?)\s$/i</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>数字 / 货币金额（支持负数、千分位分隔符）</p>
<figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">/^-?<span class="symbol">\d</span>+(,<span class="symbol">\d</span>{3})*(<span class="symbol">\.</span><span class="symbol">\d</span>{1,2})?$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>数字 / 货币金额 (只支持正数、不支持校验千分位分隔符)</p>
<figure class="highlight elixir"><table><tbody><tr><td class="code"><pre><span class="line">/(?<span class="symbol">:^</span><span class="number">1</span><span class="number">-9</span>?(?<span class="symbol">:</span>.[0<span class="number">-9</span>]{<span class="number">1</span>,<span class="number">2</span>})?<span class="variable">$)</span>|(?<span class="symbol">:^</span>(?<span class="symbol">:</span>0){<span class="number">1</span>}<span class="variable">$)</span>|(?<span class="symbol">:^</span>[0<span class="number">-9</span>].0<span class="number">-9</span>?<span class="variable">$)</span>/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>银行卡号（10 到 30 位，覆盖对公 / 私账户，参考微信支付）</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/^[1-9]\d{9,29}$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>中文姓名</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/^(?:[\u4e00-\u9fa5·]{2,16})$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>英文姓名</p>
<figure class="highlight gcode"><table><tbody><tr><td class="code"><pre><span class="line">/<span class="comment">(^[a-zA-Z]{1}[a-zA-Z\s]{0,20}[a-zA-Z]{1}$)</span>/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>车牌号 (新能源)</p>
<figure class="highlight inform7"><table><tbody><tr><td class="code"><pre><span class="line">/<span class="comment">[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]</span>{1}<span class="comment">[A-HJ-NP-Z]</span>{1}((<span class="comment">[0-9]</span>{5}<span class="comment">[DF]</span>)|(<span class="comment">[DF]</span><span class="comment">[A-HJ-NP-Z0-9]</span><span class="comment">[0-9]</span>{4}))$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>车牌号 (非新能源)</p>
<figure class="highlight dns"><table><tbody><tr><td class="code"><pre><span class="line">/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 <span class="keyword">A</span>-Z]{<span class="number">1</span>}[<span class="keyword">A</span>-HJ-NP-Z]{<span class="number">1</span>}[<span class="keyword">A</span>-Z0-<span class="number">9</span>]{<span class="number">4</span>}[<span class="keyword">A</span>-Z0-<span class="number">9</span>挂学警港澳]{<span class="number">1</span>}$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>车牌号 (新能源 + 非新能源)</p>
<figure class="highlight gcode"><table><tbody><tr><td class="code"><pre><span class="line">/^<span class="comment">(?:[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]{1}[A-HJ-NP-Z]{1}(?:(?:[0-9]{5}[DF])</span>|<span class="comment">(?:DF[0-9]{4})</span>))$|<span class="comment">(?:[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]{1}[A-Z]{1}[A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9 挂学警港澳]{1})</span>$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>手机号 (mobile phone) 中国 (严谨), 根据工信部 2019 年最新公布的手机号段</p>
<figure class="highlight coq"><table><tbody><tr><td class="code"><pre><span class="line">/^(?:(?:\+|<span class="type">00</span>)<span class="number">86</span>)?<span class="number">1</span>(?:(?:<span class="number">3</span>[\d])|<span class="type">(?:4</span>[<span class="number">5</span><span class="number">-7</span>|<span class="type">9</span>])|<span class="type">(?:5</span>[<span class="number">0</span><span class="number">-3</span>|<span class="type">5</span><span class="number">-9</span>])|<span class="type">(?:6</span>[<span class="number">5</span><span class="number">-7</span>])|<span class="type">(?:7</span>[<span class="number">0</span><span class="number">-8</span>])|<span class="type">(?:8</span>[\d])|<span class="type">(?:9</span>[<span class="number">1</span>|<span class="type">8</span>|<span class="type">9</span>]))\d{<span class="number">8</span>}$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>手机号 (mobile phone) 中国 (宽松), 只要是 13,14,15,16,17,18,19 开头即可</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/^(?:(?:\+|00)86)?1[3-9]\d{9}$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>手机号 (mobile phone) 中国 (最宽松), 只要是 1 开头即可，如果你的手机号是用来接收短信，优先建议选择这一条</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/^(?:(?:\+|00)86)?1\d{10}$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>date (日期)</p>
<figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">/^<span class="symbol">\d</span>{4}(-)(1[0-2]|0?<span class="symbol">\d</span>)<span class="symbol">\1</span>([0-2]<span class="symbol">\d</span>|<span class="symbol">\d</span>|30|31)$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>email (邮箱)</p>
<figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">/^(([^&lt;&gt;()[<span class="symbol">\]</span><span class="symbol">\\</span>.,;:<span class="symbol">\s</span>@"]+(<span class="symbol">\.</span>[^&lt;&gt;()[<span class="symbol">\]</span><span class="symbol">\\</span>.,;:<span class="symbol">\s</span>@"]+)*)|(".+"))@((<span class="symbol">\[</span>[0-9]{1,3}<span class="symbol">\.</span>[0-9]{1,3}<span class="symbol">\.</span>[0-9]{1,3}<span class="symbol">\.</span>[0-9]{1,3}<span class="symbol">\]</span>)|(([a-zA-Z<span class="symbol">\-</span>0-9]+<span class="symbol">\.</span>)+[a-zA-Z]{2,}))$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>座机 (tel phone) 电话 (国内), 如: 0341-86091234</p>
<figure class="highlight dust"><table><tbody><tr><td class="code"><pre><span class="line"><span class="xml">/^\d</span><span class="template-variable">{3}</span><span class="xml">-\d</span><span class="template-variable">{8}</span><span class="xml">$|^\d</span><span class="template-variable">{4}</span><span class="xml">-\d</span><span class="template-variable">{7,8}</span><span class="xml">$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>身份证号 (1 代，15 位数字)</p>
<figure class="highlight coq"><table><tbody><tr><td class="code"><pre><span class="line">/^[<span class="number">1</span><span class="number">-9</span>]\d{<span class="number">7</span>}(?:<span class="number">0</span>\d|<span class="type">10</span>|<span class="type">11</span>|<span class="type">12</span>)(?:<span class="number">0</span>[<span class="number">1</span><span class="number">-9</span>]|<span class="type">[1</span><span class="number">-2</span>][\d]|<span class="type">30</span>|<span class="type">31</span>)\d{<span class="number">3</span>}$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>身份证号 (2 代，18 位数字), 最后一位是校验位，可能为数字或字符 X</p>
<figure class="highlight coq"><table><tbody><tr><td class="code"><pre><span class="line">/^[<span class="number">1</span><span class="number">-9</span>]\d{<span class="number">5</span>}(?:<span class="number">18</span>|<span class="type">19</span>|<span class="type">20</span>)\d{<span class="number">2</span>}(?:<span class="number">0</span>[<span class="number">1</span><span class="number">-9</span>]|<span class="type">10</span>|<span class="type">11</span>|<span class="type">12</span>)(?:<span class="number">0</span>[<span class="number">1</span><span class="number">-9</span>]|<span class="type">[1</span><span class="number">-2</span>]\d|<span class="type">30</span>|<span class="type">31</span>)\d{<span class="number">3</span>}[\dXx]$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>身份证号，支持 1/2 代 (15 位 / 18 位数字)</p>
<figure class="highlight coq"><table><tbody><tr><td class="code"><pre><span class="line">/(^\d{<span class="number">8</span>}(<span class="number">0</span>\d|<span class="type">10</span>|<span class="type">11</span>|<span class="type">12</span>)([<span class="number">0</span><span class="number">-2</span>]\d|<span class="type">30</span>|<span class="type">31</span>)\d{<span class="number">3</span>}$)|<span class="type">(^\d</span>{<span class="number">6</span>}(<span class="number">18</span>|<span class="type">19</span>|<span class="type">20</span>)\d{<span class="number">2</span>}(<span class="number">0</span>[<span class="number">1</span><span class="number">-9</span>]|<span class="type">10</span>|<span class="type">11</span>|<span class="type">12</span>)([<span class="number">0</span><span class="number">-2</span>]\d|<span class="type">30</span>|<span class="type">31</span>)\d{<span class="number">3</span>}(\d|<span class="type">X</span>|<span class="type">x</span>)$)/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>护照（包含香港、澳门）</p>
<figure class="highlight inform7"><table><tbody><tr><td class="code"><pre><span class="line">/(^<span class="comment">[EeKkGgDdSsPpHh]</span>\d{8}$)|(^((<span class="comment">[Ee]</span><span class="comment">[a-fA-F]</span>)|(<span class="comment">[DdSsPp]</span><span class="comment">[Ee]</span>)|(<span class="comment">[Kk]</span><span class="comment">[Jj]</span>)|(<span class="comment">[Mm]</span><span class="comment">[Aa]</span>)|(1<span class="comment">[45]</span>))\d{7}$)/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>帐号是否合法 (字母开头，允许 5-16 字节，允许字母数字下划线组合</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/^[a-zA-Z]\w{4,15}$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>中文 / 汉字</p>
<figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">/^(?:[<span class="symbol">\u</span>3400-<span class="symbol">\u</span>4DB5<span class="symbol">\u</span>4E00-<span class="symbol">\u</span>9FEA<span class="symbol">\u</span>FA0E<span class="symbol">\u</span>FA0F<span class="symbol">\u</span>FA11<span class="symbol">\u</span>FA13<span class="symbol">\u</span>FA14<span class="symbol">\u</span>FA1F<span class="symbol">\u</span>FA21<span class="symbol">\u</span>FA23<span class="symbol">\u</span>FA24<span class="symbol">\u</span>FA27-<span class="symbol">\u</span>FA29]|[<span class="symbol">\u</span>D840-<span class="symbol">\u</span>D868<span class="symbol">\u</span>D86A-<span class="symbol">\u</span>D86C<span class="symbol">\u</span>D86F-<span class="symbol">\u</span>D872<span class="symbol">\u</span>D874-<span class="symbol">\u</span>D879][<span class="symbol">\u</span>DC00-<span class="symbol">\u</span>DFFF]|<span class="symbol">\u</span>D869[<span class="symbol">\u</span>DC00-<span class="symbol">\u</span>DED6<span class="symbol">\u</span>DF00-<span class="symbol">\u</span>DFFF]|<span class="symbol">\u</span>D86D[<span class="symbol">\u</span>DC00-<span class="symbol">\u</span>DF34<span class="symbol">\u</span>DF40-<span class="symbol">\u</span>DFFF]|<span class="symbol">\u</span>D86E[<span class="symbol">\u</span>DC00-<span class="symbol">\u</span>DC1D<span class="symbol">\u</span>DC20-<span class="symbol">\u</span>DFFF]|<span class="symbol">\u</span>D873[<span class="symbol">\u</span>DC00-<span class="symbol">\u</span>DEA1<span class="symbol">\u</span>DEB0-<span class="symbol">\u</span>DFFF]|<span class="symbol">\u</span>D87A[<span class="symbol">\u</span>DC00-<span class="symbol">\u</span>DFE0])+$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>小数</p>
<figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">/^<span class="symbol">\d</span>+<span class="symbol">\.</span><span class="symbol">\d</span>+$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>数字</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/^\d{1,}$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>html 标签 (宽松匹配)</p>
<figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">/&lt;(<span class="symbol">\w</span>+)[^&gt;]*&gt;(.*?&lt;<span class="symbol">\/</span><span class="symbol">\1</span>&gt;)?/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>qq 号格式正确</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/^[1-9][0-9]{4,10}$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>数字和字母组成</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/^[A-Za-z0-9]+$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>英文字母</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/^[a-zA-Z]+$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>小写英文字母组成</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/^[a-z]+$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>大写英文字母</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/^[A-Z]+$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>密码强度校验，最少 6 位，包括至少 1 个大写字母，1 个小写字母，1 个数字，1 个特殊字符</p>
<figure class="highlight gcode"><table><tbody><tr><td class="code"><pre><span class="line">/^\S<span class="comment">(?=\S{6,})</span><span class="comment">(?=\S\d)</span><span class="comment">(?=\S[A-Z])</span><span class="comment">(?=\S[a-z])</span><span class="comment">(?=\S[!@#$%^&amp;? ])</span>\S*$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>用户名校验，4 到 16 位（字母，数字，下划线，减号）</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/^[a-zA-Z0-9_-]{2,20}$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>ip-v4</p>
<figure class="highlight inform7"><table><tbody><tr><td class="code"><pre><span class="line">/^(?:(?:25<span class="comment">[0-5]</span>|2<span class="comment">[0-4]</span><span class="comment">[0-9]</span>|<span class="comment">[01]</span>?<span class="comment">[0-9]</span><span class="comment">[0-9]</span>?).){3}(?:25<span class="comment">[0-5]</span>|2<span class="comment">[0-4]</span><span class="comment">[0-9]</span>|<span class="comment">[01]</span>?<span class="comment">[0-9]</span><span class="comment">[0-9]</span>?)$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>ip-v6</p>
<figure class="highlight dust"><table><tbody><tr><td class="code"><pre><span class="line"><span class="xml">/^((([0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">:)</span><span class="template-variable">{7}</span><span class="xml">[0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">)|(([0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">:)</span><span class="template-variable">{6}</span><span class="xml">:[0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">)|(([0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">:)</span><span class="template-variable">{5}</span><span class="xml">:([0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">:)?[0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">)|(([0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">:)</span><span class="template-variable">{4}</span><span class="xml">:([0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">:)</span><span class="template-variable">{0,2}</span><span class="xml">[0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">)|(([0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">:)</span><span class="template-variable">{3}</span><span class="xml">:([0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">:)</span><span class="template-variable">{0,3}</span><span class="xml">[0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">)|(([0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">:)</span><span class="template-variable">{2}</span><span class="xml">:([0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">:)</span><span class="template-variable">{0,4}</span><span class="xml">[0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">)|(([0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">:)</span><span class="template-variable">{6}</span><span class="xml">((\b((25[0-5])|(1\d</span><span class="template-variable">{2}</span><span class="xml">)|(2[0-4]\d)|(\d</span><span class="template-variable">{1,2}</span><span class="xml">))\b)\.)</span><span class="template-variable">{3}</span><span class="xml">(\b((25[0-5])|(1\d</span><span class="template-variable">{2}</span><span class="xml">)|(2[0-4]\d)|(\d</span><span class="template-variable">{1,2}</span><span class="xml">))\b))|(([0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">:)</span><span class="template-variable">{0,5}</span><span class="xml">:((\b((25[0-5])|(1\d</span><span class="template-variable">{2}</span><span class="xml">)|(2[0-4]\d)|(\d</span><span class="template-variable">{1,2}</span><span class="xml">))\b)\.)</span><span class="template-variable">{3}</span><span class="xml">(\b((25[0-5])|(1\d</span><span class="template-variable">{2}</span><span class="xml">)|(2[0-4]\d)|(\d</span><span class="template-variable">{1,2}</span><span class="xml">))\b))|(::([0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">:)</span><span class="template-variable">{0,5}</span><span class="xml">((\b((25[0-5])|(1\d</span><span class="template-variable">{2}</span><span class="xml">)|(2[0-4]\d)|(\d</span><span class="template-variable">{1,2}</span><span class="xml">))\b)\.)</span><span class="template-variable">{3}</span><span class="xml">(\b((25[0-5])|(1\d</span><span class="template-variable">{2}</span><span class="xml">)|(2[0-4]\d)|(\d</span><span class="template-variable">{1,2}</span><span class="xml">))\b))|([0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">::([0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">:)</span><span class="template-variable">{0,5}</span><span class="xml">[0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">)|(::([0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">:)</span><span class="template-variable">{0,6}</span><span class="xml">[0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">)|(([0-9A-Fa-f]</span><span class="template-variable">{1,4}</span><span class="xml">:)</span><span class="template-variable">{1,7}</span><span class="xml">:))$/i</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>16 进制颜色</p>
<figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">/^<span class="comment">#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>微信号 (wx)，6 至 20 位，以字母开头，字母，数字，减号，下划线</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/^[a-zA-Z][-_a-zA-Z0-9]{5,19}$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>邮政编码 (中国)</p>
<figure class="highlight inform7"><table><tbody><tr><td class="code"><pre><span class="line">/^(0<span class="comment">[1-7]</span>|1<span class="comment">[0-356]</span>|2<span class="comment">[0-7]</span>|3<span class="comment">[0-6]</span>|4<span class="comment">[0-7]</span>|5<span class="comment">[1-7]</span>|6<span class="comment">[1-7]</span>|7<span class="comment">[0-5]</span>|8<span class="comment">[013-6]</span>)\d{4}$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>中文和数字</p>
<figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">/^((?:[<span class="symbol">\u</span>3400-<span class="symbol">\u</span>4DB5<span class="symbol">\u</span>4E00-<span class="symbol">\u</span>9FEA<span class="symbol">\u</span>FA0E<span class="symbol">\u</span>FA0F<span class="symbol">\u</span>FA11<span class="symbol">\u</span>FA13<span class="symbol">\u</span>FA14<span class="symbol">\u</span>FA1F<span class="symbol">\u</span>FA21<span class="symbol">\u</span>FA23<span class="symbol">\u</span>FA24<span class="symbol">\u</span>FA27-<span class="symbol">\u</span>FA29]|[<span class="symbol">\u</span>D840-<span class="symbol">\u</span>D868<span class="symbol">\u</span>D86A-<span class="symbol">\u</span>D86C<span class="symbol">\u</span>D86F-<span class="symbol">\u</span>D872<span class="symbol">\u</span>D874-<span class="symbol">\u</span>D879][<span class="symbol">\u</span>DC00-<span class="symbol">\u</span>DFFF]|<span class="symbol">\u</span>D869[<span class="symbol">\u</span>DC00-<span class="symbol">\u</span>DED6<span class="symbol">\u</span>DF00-<span class="symbol">\u</span>DFFF]|<span class="symbol">\u</span>D86D[<span class="symbol">\u</span>DC00-<span class="symbol">\u</span>DF34<span class="symbol">\u</span>DF40-<span class="symbol">\u</span>DFFF]|<span class="symbol">\u</span>D86E[<span class="symbol">\u</span>DC00-<span class="symbol">\u</span>DC1D<span class="symbol">\u</span>DC20-<span class="symbol">\u</span>DFFF]|<span class="symbol">\u</span>D873[<span class="symbol">\u</span>DC00-<span class="symbol">\u</span>DEA1<span class="symbol">\u</span>DEB0-<span class="symbol">\u</span>DFFF]|<span class="symbol">\u</span>D87A[<span class="symbol">\u</span>DC00-<span class="symbol">\u</span>DFE0])|(<span class="symbol">\d</span>))+$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>不能包含字母</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/^[^A-Za-z]*$/</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>java 包名</p>
<figure class="highlight gcode"><table><tbody><tr><td class="code"><pre><span class="line">/^<span class="comment">([a-zA-Z_][a-zA-Z0-9_])</span>+<span class="comment">([.][a-zA-Z_][a-zA-Z0-9_])</span>+$/</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>mac 地址</p>
<figure class="highlight dust"><table><tbody><tr><td class="code"><pre><span class="line"><span class="xml">/^((([a-f0-9]</span><span class="template-variable">{2}</span><span class="xml">:)</span><span class="template-variable">{5}</span><span class="xml">)|(([a-f0-9]</span><span class="template-variable">{2}</span><span class="xml">-)</span><span class="template-variable">{5}</span><span class="xml">))[a-f0-9]</span><span class="template-variable">{2}</span><span class="xml">$/i</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>匹配连续重复的字符</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/(.)\1+/</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h1><ul>
<li>只输入数字  <figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">onkeyup</span>=<span class="string">"this.value=this.value.replace(/[^0-9]/g,'')"</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>只能输入数字、小数点  <figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">onkeyup</span>=<span class="string">"value=value.replace(/[^\0-9\.]/g,'')"</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>只能输入英文  <figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">onkeyup="value=value.replace(/[^<span class="symbol">\a</span>-<span class="symbol">\z</span><span class="symbol">\A</span>-<span class="symbol">\Z</span>]/g,'')"</span><br></pre></td></tr></tbody></table></figure></li>
<li>只能输入英文、数字  <figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">onkeyup="value=value.replace(/[^<span class="symbol">\a</span>-<span class="symbol">\z</span><span class="symbol">\A</span>-<span class="symbol">\Z</span>0-9]/g,'')"</span><br></pre></td></tr></tbody></table></figure></li>
<li>只能输入中文  <figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">onkeyup</span>=<span class="string">"value=value.replace(/[^\u4E00-\u9FA5]/g,'')"</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>只能输入中文、英文、数字  <figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">onkeyup="value=value.replace(/[^<span class="symbol">\a</span>-<span class="symbol">\z</span><span class="symbol">\A</span>-<span class="symbol">\Z</span>0-9<span class="symbol">\u</span>4E00-<span class="symbol">\u</span>9FA5]/g,'')"</span><br></pre></td></tr></tbody></table></figure></li>
<li>只能输入中文、英文、数字、空格  <figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">onkeyup="value=value.replace(/[^<span class="symbol">\a</span>-<span class="symbol">\z</span><span class="symbol">\A</span>-<span class="symbol">\Z</span>0-9<span class="symbol">\u</span>4E00-<span class="symbol">\u</span>9FA5<span class="symbol">\]</span>/g,'')"</span><br></pre></td></tr></tbody></table></figure></li>
<li>只能输入中文、英文、数字、小数点  <figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">onkeyup="value=value.replace(/[^<span class="symbol">\a</span>-<span class="symbol">\z</span><span class="symbol">\A</span>-<span class="symbol">\Z</span>0-9<span class="symbol">\u</span>4E00-<span class="symbol">\u</span>9FA5<span class="symbol">\.</span>]/g,'')"</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>在 input 里输入  <figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">onkeyup</span>=<span class="string">"value=value.replace(/[^\X]/g,'')"</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>然后在 (/[\X]/g,’’) 里的 X 换成你想输入的代码就可以了，<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">中文u4E00-u9FA5，数字<span class="number">0</span>-<span class="number">9</span>，英文<span class="selector-tag">a</span>-z\<span class="selector-tag">A</span>-Z，其它符号@、点或其它符号。</span><br></pre></td></tr></tbody></table></figure></li>
<li>可以多个，用 \ 隔开就行了。 中英文 + 数字 + @符号 + 点符号   <figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="symbol">\a</span>-<span class="symbol">\z</span><span class="symbol">\A</span>-<span class="symbol">\Z</span>0-9<span class="symbol">\u</span>4E00-<span class="symbol">\u</span>9FA5<span class="symbol">\@</span><span class="symbol">\.</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>想在文本框里不能右键弹出菜单和不能粘贴进复制的信息的话要在 input 里输入  <figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">onpaste</span>=<span class="string">"return false"</span> <span class="literal">on</span>contextmenu=<span class="string">"return false;"</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>验证网站  <figure class="highlight taggerscript"><table><tbody><tr><td class="code"><pre><span class="line">http(s)?:<span class="symbol">\/</span><span class="symbol">\/</span>([<span class="symbol">\w</span>-]+<span class="symbol">\.</span>)+[<span class="symbol">\w</span>-]+(<span class="symbol">\/</span>[<span class="symbol">\w</span>- .<span class="symbol">\/</span>?<span class="variable">%&amp;=]*)?</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>正则</category>
      </categories>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 基础命令相关</title>
    <url>/2021/05/28/8-Redis%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/8.jpg"></p>
</span>

<span id="more"></span>

<h1 id="Redis基本操作"><a href="#Redis基本操作" class="headerlink" title="Redis基本操作"></a>Redis 基本操作</h1><h2 id="基本数据结构"><a href="#基本数据结构" class="headerlink" title="基本数据结构"></a>基本数据结构</h2><h3 id="KV"><a href="#KV" class="headerlink" title="KV"></a>KV</h3><pre><code>set         #设置
get         #获取
del         #删除
incr        #+1 
decr        #-1
incrby 5    #+5
decrby 5    #-5
append      #追加
            #eg:如果 key 已经存在并且是一个字符串，
                APPEND 命令将 value 追加到 key 原来的值的末尾。
                如果 key 不存在， 
                APPEND 就简单地将给定 key 设为 value ，
                就像执行 SET key value 一样。]
</code></pre>
<h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><pre><code>hset myhash name mx             #单个设置
hget myhash name                #单个获取
hmset myhash2 name mx age 18    #多个设置
hmget myhash2 name age          #多个获取
hgetall myhash2                 #全部获取
hdel                            #删除 
hdel myhash2 name age           #指定删除
del myhash2                     #删除
hincrby myhash2 age 5           #+5
hdecrby myhash2 age 5           #-5
hexists myhash2 name            #判断存在 返回0或者1
hlen myhash                     #数量
hkeys myhash                    #获取keys
hvalues myhash                  #获取values
</code></pre>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><pre><code>lpush                       #左边推入  lpush mylist 1 2 3
rpush                       #右边推入  rpush mylist a b c
lrange                      #查看内容  lrange mylist 0 -1
lpop myliist                #左边弹出
rpop mylist                 #右边弹出
llen mylist                 #查看长度
lpushx                      #存在的list才插入，不存在就返回0
rpushx                      #同上
lrem mylist 2 3             #从头到尾删除2个3
lrem mylist -2 1            #从尾到头删除2个1
lrem mylist 0 2             #删除全部2
lset mylist 3 mm            #第三个脚表设置mm
linsert mylist before b 11  #第一个b之前插入11 
linsert mylist after b 22   #第一个b之后插入22
rpoplpush mylist5 mylist6   #将list5弹出压入list6
</code></pre>
<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><blockquote>
<p>不允许出现重复的数据，只保留一份</p>
</blockquote>
<pre><code>sadd myset abc              #添加
srem myset a b              #删除
smembers myset              #查看
sismember myset a           #a是否在集合中 返回0或者1
sdiff mya1 myb1             #差集运算
sinter  mya1 myb1           #交集运算
sunion  mya1 myb1           #并集运算
scard myset                 #得到set中的数量
srandmember myset           #随机获取集合中数量
sdiffstore  my1  mya1 myb1  #将mya1 myb1 不同的存在my1中
sinterstore my2  mya1 myb1  #将mya1 myb1 相同的存在my2中
sunionstore my3  mya1 myb1  #将mya1 myb1 并集的存在my3中
</code></pre>
<h3 id="SortedSet"><a href="#SortedSet" class="headerlink" title="SortedSet"></a>SortedSet</h3><blockquote>
<p>不允许出现重复的数据，只保留一份</p>
</blockquote>
<pre><code>zadd mysort 70 zs 80 li 90 ww                   #添加
zadd 100 zs                                     #覆盖之前的zs 
zscore mysort zs                                #获取分数
zcard mysort                                    #数量
zrem mysort tom ww                              #删除
zrange mysort 0 -1                              #从小到大查看元素
zrange mysort 0 -1 withscores                   #查看分数
zrevrange mysort 0 -1                           #从大到小
zrevrange mysort 0 -1 withscores                #从大到小分数排序
zremrangebyrank mysort 0 4                      #按照排名范围来删除
zremrangebyscore mysort 80                      #100 按照分数删除
zrangbyscore myscore 0 100 withscore            #返回分数范围的成员并排序返回
zrangbyscore myscore 0 100 withscore limit 0 2  #返回分数范围的成员并排序返回限制
zincrby myscore 3 ls                            #增加分数
zsscore mysorr ls                               #显示李四的分数
zcount mysort  80 90                            #获取分数范围的个数
    
</code></pre>
<h2 id="Keys"><a href="#Keys" class="headerlink" title="Keys"></a>Keys</h2><pre><code>keys *                      #所有keys
keys my?                    #查看所有my的key
exists my1                  #key是否存在
rename company new company  #更改键
expire company 1000         #设置1000秒过时
ttl company                 #剩余时间
type company                #获取类型
</code></pre>
<h2 id="Redis新特性"><a href="#Redis新特性" class="headerlink" title="Redis新特性"></a>Redis 新特性</h2><pre><code>select 1        #选择1号数据库
move myset 1    #移动myset这个key 到1号库
multi           #开启事务
exec            #提交
discard         #回滚
</code></pre>
<h2 id="Redis-持久化"><a href="#Redis-持久化" class="headerlink" title="Redis 持久化"></a>Redis 持久化</h2><pre><code>#RDB方式（100多行左右--）
    save 900 1
    save 300 10
    ...
    dbfilename dump.rdb #保存文件名
    ..
    优势：只会保留一个文件，容易备份，性能最大化
    劣势：容易丢失数据（每过几十秒才保存数据）
#AOF方式（appendonly yes 开启）
    策略： appendfsync always(每次修改都保存)
    ..
    优势：append的形式，不易毁坏之前的数据
    劣势：AOF要大，运行效率比RDB低
    把aof打开的最后的flushall删除，重新开启reids即可还原数据
    
#无持久化

#同时使用RDB和AOF
</code></pre>
<h1 id="Protostuff序列化"><a href="#Protostuff序列化" class="headerlink" title="Protostuff序列化"></a>Protostuff 序列化</h1><h2 id="Jar"><a href="#Jar" class="headerlink" title="Jar"></a>Jar</h2><pre><code>&lt;!--依赖jar包--&gt;
&lt;dependency&gt;
   &lt;groupId&gt;redis.clients&lt;/groupId&gt;
   &lt;artifactId&gt;jedis&lt;/artifactId&gt;
   &lt;version&gt; 2.9.0 &lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt;
   &lt;artifactId&gt;protostuff-core&lt;/artifactId&gt;
   &lt;version&gt;1.1.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt;
   &lt;artifactId&gt;protostuff-runtime&lt;/artifactId&gt;
   &lt;version&gt;1.1.3&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><pre><code>public class jedis {

    private static final String ip = "127.0.0.1";
    private static final int port = 6379;

    private static JedisPool jedisPool;
    private static RuntimeSchema&lt;Page&gt; schema = RuntimeSchema.createFrom(Page.class);
    public jedis() {
        jedisPool = new JedisPool(ip, port);
    }

    //设置数据进入redis
    public  String setRedis( Page page ){
        Jedis jedis  = jedisPool.getResource();
        String key = "key:" + page.getId();
        int timeout = 60 * 60; // 1小时
        //把对象实例化
        byte[] bytes = ProtostuffIOUtil.toByteArray( page,schema, 
        LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE));
        //设置redis
        String result = jedis.setex(key.getBytes(),timeout,bytes);
        jedis.close();
        return result;
    }
    /**
     * 从redis取数据
     */
    public  Page getRedis(String id){
        Jedis jedis  = jedisPool.getResource();
        String key = "key:" +id;
        byte[]  bytes = jedis.get(key.getBytes());
        //把字节数组序列化返回成实体
        if (bytes != null) {
            Page page = schema.newMessage();
            ProtostuffIOUtil.mergeFrom(bytes, page, schema);
            return page;
        }
        jedis.close();
        return null;
    }

    public static void main(String[] args){
        jedis j = new jedis();
        Page m = j .getRedis("1");
        if(m!=null){
            System.out.println(m);
        }else{
            Page p = new Page();
            p.setId(1);
            p.setName("小明");
            p.setDetail("小明今天去爬山");
            p.setTime(String.valueOf(new Date()));
            j.setRedis(p);
        }
    }
}
</code></pre>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Aspeat</title>
    <url>/2021/05/28/9-Aspeat/</url>
    <content><![CDATA[<span id="delete">

<p><img data-src="/images/banner/9.jpg"></p>
</span>

<span id="more"></span>

<h1 id="Aspeat介绍"><a href="#Aspeat介绍" class="headerlink" title="Aspeat介绍"></a>Aspeat 介绍</h1><ul>
<li>匹配类包</li>
<li><ul>
<li> within</li>
</ul>
</li>
<li> 匹配对象 拦截对象里面的方法 </li>
<li><ul>
<li>this target bean</li>
</ul>
</li>
<li> 匹配参数    </li>
<li><ul>
<li>execution arg</li>
</ul>
</li>
<li> 匹配注解 </li>
<li><ul>
<li>annotation</li>
</ul>
</li>
<li>execution 表达式   <figure class="highlight d"><table><tbody><tr><td class="code"><pre><span class="line">execution( modifier-pattern? ret-type-pattern</span><br><span class="line">  declarin-type-pattern? name-pattern(param-pattern) <span class="keyword">throw</span>-pattern? )</span><br><span class="line"></span><br><span class="line"><span class="keyword">@Aspect</span> </span><br><span class="line"><span class="keyword">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ExecutionAspectConfig{</span><br><span class="line">    #匹配<span class="keyword">public</span>方法 service包（service.*）和service子包（service..*）</span><br><span class="line">    #下面的所有service 参数为任意</span><br><span class="line">    <span class="keyword">@Pointcut</span>(<span class="string">"execution(public * com.imooc.service..*Service.*(..))"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> matchCondition(){}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">@Before</span> (<span class="string">"matchCondition()"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> before(){</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li>AOP 实现原理 (接口那种)   <figure class="highlight actionscript"><table><tbody><tr><td class="code"><pre><span class="line">JDK 代理</span><br><span class="line">    类:java.lang.reflect.Proxy</span><br><span class="line">    实现接口:InvocationHandler</span><br><span class="line">    只能基于接口进行动态代理</span><br><span class="line">cglib动态代理</span><br><span class="line">    实现MethodInterceptor接口</span><br><span class="line">    使用invokeSuper方法</span><br><span class="line">对比：</span><br><span class="line">    JDK只能针对有接口的类的接口方法进行动态代理</span><br><span class="line">    Cglib基于继承来实现代理，无法对<span class="keyword">static</span>,<span class="keyword">final</span>类进行代理</span><br><span class="line">    无法对<span class="keyword">private</span>,<span class="keyword">static</span>进行代理</span><br></pre></td></tr></tbody></table></figure></li>
<li>Spring aop  <figure class="highlight aspectj"><table><tbody><tr><td class="code"><pre><span class="line">如果目标对象实现了接口，则默认采用JDK动态代理,反之用Cglib</span><br><span class="line">如果实现接口，强制使用cglib代理，则用cglib（proxy-<span class="keyword">target</span>-<span class="class"><span class="keyword">class</span></span>=<span class="string">"true"</span>）</span><br></pre></td></tr></tbody></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>Aop</category>
      </categories>
      <tags>
        <tag>Aop</tag>
      </tags>
  </entry>
</search>
